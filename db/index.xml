<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Dbs on 深白色9527</title>
		<link>https://shenbaise9527.com/db/</link>
		<description>Recent content in Dbs on 深白色9527</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Tue, 24 Nov 2020 20:50:44 +0800</lastBuildDate>
		<atom:link href="https://shenbaise9527.com/db/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>MySQL的orderby分析</title>
			<link>https://shenbaise9527.com/db/mysql%E7%9A%84orderby%E5%88%86%E6%9E%90/</link>
			<pubDate>Tue, 24 Nov 2020 20:50:44 +0800</pubDate>
			
			<guid>https://shenbaise9527.com/db/mysql%E7%9A%84orderby%E5%88%86%E6%9E%90/</guid>
			<description>数据准备 /*mysql版本*/ Server version: 5.7.27-log MySQL Community Server (GPL) /*创建表t*/ CREATE TABLE `t` ( `id` int(11) NOT NULL AUTO_INCREMENT, `city` varchar(16) NOT NULL, `name` varchar(16) NOT NULL, `age` int(11) NOT NULL, `addr` varchar(128) DEFAULT NULL, PRIMARY KEY (`id`), KEY `city` (`city`) ) ENGINE=InnoDB; /*数据分布*</description>
			<content type="html"><![CDATA[<h2 id="数据准备">数据准备</h2>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="cm">/*mysql版本*/</span>
<span class="n">Server</span> <span class="k">version</span><span class="p">:</span> <span class="mi">5</span><span class="p">.</span><span class="mi">7</span><span class="p">.</span><span class="mi">27</span><span class="o">-</span><span class="n">log</span> <span class="n">MySQL</span> <span class="n">Community</span> <span class="n">Server</span> <span class="p">(</span><span class="n">GPL</span><span class="p">)</span>

<span class="cm">/*创建表t*/</span>
<span class="k">CREATE</span> <span class="k">TABLE</span> <span class="o">`</span><span class="n">t</span><span class="o">`</span> <span class="p">(</span>
  <span class="o">`</span><span class="n">id</span><span class="o">`</span> <span class="nb">int</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="n">AUTO_INCREMENT</span><span class="p">,</span>
  <span class="o">`</span><span class="n">city</span><span class="o">`</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="o">`</span><span class="n">name</span><span class="o">`</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="o">`</span><span class="n">age</span><span class="o">`</span> <span class="nb">int</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="o">`</span><span class="n">addr</span><span class="o">`</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">128</span><span class="p">)</span> <span class="k">DEFAULT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="p">(</span><span class="o">`</span><span class="n">id</span><span class="o">`</span><span class="p">),</span>
  <span class="k">KEY</span> <span class="o">`</span><span class="n">city</span><span class="o">`</span> <span class="p">(</span><span class="o">`</span><span class="n">city</span><span class="o">`</span><span class="p">)</span>
<span class="p">)</span> <span class="n">ENGINE</span><span class="o">=</span><span class="n">InnoDB</span><span class="p">;</span>

<span class="cm">/*数据分布*/</span>
<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">select</span> <span class="n">city</span><span class="p">,</span> <span class="k">count</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">from</span> <span class="n">t</span> <span class="k">group</span> <span class="k">by</span> <span class="n">city</span><span class="p">;</span>
<span class="o">+</span><span class="c1">-----------+----------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">city</span>      <span class="o">|</span> <span class="k">count</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">-----------+----------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">beijing</span>   <span class="o">|</span>     <span class="mi">5590</span> <span class="o">|</span>
<span class="o">|</span> <span class="n">gongan</span>    <span class="o">|</span>     <span class="mi">5398</span> <span class="o">|</span>
<span class="o">|</span> <span class="n">guangzhou</span> <span class="o">|</span>     <span class="mi">5557</span> <span class="o">|</span>
<span class="o">|</span> <span class="n">hangzhou</span>  <span class="o">|</span>     <span class="mi">5505</span> <span class="o">|</span>
<span class="o">|</span> <span class="n">ouchi</span>     <span class="o">|</span>     <span class="mi">5402</span> <span class="o">|</span>
<span class="o">|</span> <span class="n">shanghai</span>  <span class="o">|</span>     <span class="mi">5375</span> <span class="o">|</span>
<span class="o">|</span> <span class="n">shenzhen</span>  <span class="o">|</span>     <span class="mi">5591</span> <span class="o">|</span>
<span class="o">|</span> <span class="n">wuhan</span>     <span class="o">|</span>     <span class="mi">5582</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">-----------+----------+
</span><span class="c1"></span><span class="mi">8</span> <span class="k">rows</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">02</span> <span class="n">sec</span><span class="p">)</span>
</code></pre></div><h2 id="带条件orderby过程分析">带条件orderby过程分析</h2>
<p>主要针对sql语句<code>select city, name, age from t where city='hangzhou' order by name limit 1000</code>来分析.</p>
<h3 id="全字段排序">全字段排序</h3>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">explain</span> <span class="k">select</span> <span class="n">city</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span> <span class="k">from</span> <span class="n">t</span> <span class="k">where</span> <span class="n">city</span><span class="o">=</span><span class="s1">&#39;hangzhou&#39;</span> <span class="k">order</span> <span class="k">by</span> <span class="n">name</span> <span class="k">limit</span> <span class="mi">1000</span><span class="p">;</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+------+---------------+------+---------+-------+------+----------+---------------------------------------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">id</span> <span class="o">|</span> <span class="n">select_type</span> <span class="o">|</span> <span class="k">table</span> <span class="o">|</span> <span class="n">partitions</span> <span class="o">|</span> <span class="k">type</span> <span class="o">|</span> <span class="n">possible_keys</span> <span class="o">|</span> <span class="k">key</span>  <span class="o">|</span> <span class="n">key_len</span> <span class="o">|</span> <span class="k">ref</span>   <span class="o">|</span> <span class="k">rows</span> <span class="o">|</span> <span class="n">filtered</span> <span class="o">|</span> <span class="n">Extra</span>                                 <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+------+---------------+------+---------+-------+------+----------+---------------------------------------+
</span><span class="c1"></span><span class="o">|</span>  <span class="mi">1</span> <span class="o">|</span> <span class="k">SIMPLE</span>      <span class="o">|</span> <span class="n">t</span>     <span class="o">|</span> <span class="k">NULL</span>       <span class="o">|</span> <span class="k">ref</span>  <span class="o">|</span> <span class="n">city</span>          <span class="o">|</span> <span class="n">city</span> <span class="o">|</span> <span class="mi">50</span>      <span class="o">|</span> <span class="n">const</span> <span class="o">|</span> <span class="mi">5505</span> <span class="o">|</span>   <span class="mi">100</span><span class="p">.</span><span class="mi">00</span> <span class="o">|</span> <span class="k">Using</span> <span class="k">index</span> <span class="n">condition</span><span class="p">;</span> <span class="k">Using</span> <span class="n">filesort</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+------+---------------+------+---------+-------+------+----------+---------------------------------------+
</span><span class="c1"></span><span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span><span class="p">,</span> <span class="mi">1</span> <span class="n">warning</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</code></pre></div><p>通过执行计划可以看出，<code>rows</code>扫描行数为5505，符合预期。<code>Using index condition</code>(索引下推,Index Condition Pushdown)使用了索引<code>city</code>来遍历。<code>Using filesort</code>使用了排序.</p>
<p>开启optimizer_trace，来跟踪执行结果</p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="cm">/*打开optimizer_trace，只对本线程有效*/</span>
<span class="k">set</span> <span class="n">optimizer_trace</span><span class="o">=</span><span class="s1">&#39;enabled=on&#39;</span><span class="p">;</span>

<span class="cm">/*@a保存Innodb_rows_read的初始值*/</span>
<span class="k">select</span> <span class="n">variable_value</span> <span class="k">into</span> <span class="o">@</span><span class="n">a</span> <span class="k">from</span> <span class="n">performance_schema</span><span class="p">.</span><span class="n">session_status</span> <span class="k">where</span> <span class="n">variable_name</span><span class="o">=</span><span class="s1">&#39;Innodb_rows_read&#39;</span><span class="p">;</span>

<span class="cm">/*执行sql语句*/</span>
<span class="k">select</span> <span class="n">city</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span> <span class="k">from</span> <span class="n">t</span> <span class="k">where</span> <span class="n">city</span><span class="o">=</span><span class="s1">&#39;hangzhou&#39;</span> <span class="k">order</span> <span class="k">by</span> <span class="n">name</span> <span class="k">limit</span> <span class="mi">1000</span><span class="p">;</span>

<span class="cm">/*查看optimizer_trace输出*/</span>
<span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">information_schema</span><span class="p">.</span><span class="n">OPTIMIZER_TRACE</span><span class="err">\</span><span class="k">G</span>
<span class="cm">/*截图部分结果*/</span>
            <span class="s2">&#34;filesort_execution&#34;</span><span class="p">:</span> <span class="p">[</span>
            <span class="p">],</span>
            <span class="s2">&#34;filesort_summary&#34;</span><span class="p">:</span> <span class="err">{</span>
              <span class="s2">&#34;rows&#34;</span><span class="p">:</span> <span class="mi">5505</span><span class="p">,</span>
              <span class="s2">&#34;examined_rows&#34;</span><span class="p">:</span> <span class="mi">5505</span><span class="p">,</span>
              <span class="s2">&#34;number_of_tmp_files&#34;</span><span class="p">:</span> <span class="mi">9</span><span class="p">,</span>
              <span class="s2">&#34;sort_buffer_size&#34;</span><span class="p">:</span> <span class="mi">262000</span><span class="p">,</span>
              <span class="s2">&#34;sort_mode&#34;</span><span class="p">:</span> <span class="s2">&#34;&lt;sort_key, packed_additional_fields&gt;&#34;</span>
            <span class="err">}</span>

<span class="cm">/*@b保存Innodb_rows_read的当前值*/</span>
<span class="k">select</span> <span class="n">variable_value</span> <span class="k">into</span> <span class="o">@</span><span class="n">b</span> <span class="k">from</span> <span class="n">performance_schema</span><span class="p">.</span><span class="n">session_status</span> <span class="k">where</span> <span class="n">variable_name</span><span class="o">=</span><span class="s1">&#39;Innodb_rows_read&#39;</span><span class="p">;</span>

<span class="cm">/*计算Innodb_rows_read的差值*/</span>
<span class="k">select</span> <span class="o">@</span><span class="n">b</span><span class="o">-@</span><span class="n">a</span><span class="p">;</span>

<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">select</span> <span class="o">@</span><span class="n">b</span><span class="o">-@</span><span class="n">a</span><span class="p">;</span>
<span class="o">+</span><span class="c1">-------+
</span><span class="c1"></span><span class="o">|</span> <span class="o">@</span><span class="n">b</span><span class="o">-@</span><span class="n">a</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">-------+
</span><span class="c1"></span><span class="o">|</span>  <span class="mi">5506</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">-------+
</span><span class="c1"></span><span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</code></pre></div><p>optimizer_trace结果分析：</p>
<ul>
<li>optimizer_trace结果中的<code>number_of_tmp_files</code>可以看到使用了临时文件来排序.说明排序过程中内存放不下所有待排序数据,需要使用外部排序(一般采用归并排序).</li>
<li>Mysql把待排序的数据分成了9份,每一份单独排序存放在临时文件中,最后把这9个有序文件再合并成一个有序的大文件.</li>
<li>若<code>number_of_tmp_files</code>为0,表示排序是在内存中完成的.Mysql通过参数<code>sort_buffer_size</code>来定义排序缓存的大小,若<code>sort_buffer_size</code>越小,需要分成的份数就越多.</li>
<li>optimizer_trace结果中的<code>examined_rows</code>表示参与排序的行数.</li>
<li>optimizer_trace结果中的<code>sort_mode</code>里的<code>packed_additional_fields</code>表示对字符串进行了紧凑处理,针对varchar字段是按照实际长度来分配空间的.</li>
<li><code>packed_additional_fields</code>也表明排序采用的是全字段排序,即排序时包含所有查询字段(先把city、name和age字段查询出来放入到临时文件中,然后再根据name排序).Mysql通过参数<code>max_length_for_sort_data</code>来控制排序字段的长度,默认是1024.</li>
</ul>
<p>整个排序过程:</p>
<ol>
<li>根据参数<code>max_length_for_sort_data</code>来判断,放入sort_buffer的字段(字段为city、name和age).</li>
<li>从索引<code>city</code>中找到满足条件的主键id.</li>
<li>根据主键id到主键索引中取出整行数据,取city、name、age三个字段的值,存入sort_buffer中.</li>
<li>从索引<code>city</code>中获取下一个满足条件的主键id.</li>
<li>循环3、4直到city不满足条件为止.</li>
<li>对sort_buffer中的数据按照字段name做排序.</li>
<li>排序完成sort_buffer内存空间就会被释放.</li>
</ol>
<p><code>Innodb_rows_read</code>的差值为什么是5506而不是5505？</p>
<p>因为在查询<code>OPTIMIZER_TRACE</code>表时，需要用到临时表，而临时表的存储引擎默认是InnoDB(通过参数<code>internal_tmp_disk_storage_engine</code>来控制的)，再把数据从临时表取出来时，会让Innodb_rows_read的值加1</p>
<h3 id="rowid排序">rowid排序</h3>
<p>若查询的字段很多,总长度超过了<code>max_length_for_sort_data</code>所规定的长度,排序的过程是如何的?</p>
<p>修改参数<code>set max_length_for_sort_data=16;</code>,查询的三个字段的总长度为为36,则可触发上面说的情况.然后再来看看排序的过程.</p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="cm">/*@a保存Innodb_rows_read的初始值*/</span>
<span class="k">select</span> <span class="n">variable_value</span> <span class="k">into</span> <span class="o">@</span><span class="n">a</span> <span class="k">from</span> <span class="n">performance_schema</span><span class="p">.</span><span class="n">session_status</span> <span class="k">where</span> <span class="n">variable_name</span><span class="o">=</span><span class="s1">&#39;Innodb_rows_read&#39;</span><span class="p">;</span>

<span class="cm">/*执行sql语句*/</span>
<span class="k">select</span> <span class="n">city</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span> <span class="k">from</span> <span class="n">t</span> <span class="k">where</span> <span class="n">city</span><span class="o">=</span><span class="s1">&#39;hangzhou&#39;</span> <span class="k">order</span> <span class="k">by</span> <span class="n">name</span> <span class="k">limit</span> <span class="mi">1000</span><span class="p">;</span>

<span class="cm">/*查看optimizer_trace输出*/</span>
<span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">information_schema</span><span class="p">.</span><span class="n">OPTIMIZER_TRACE</span><span class="err">\</span><span class="k">G</span>
<span class="cm">/*截图部分结果*/</span>
            <span class="s2">&#34;filesort_execution&#34;</span><span class="p">:</span> <span class="p">[</span>
            <span class="p">],</span>
            <span class="s2">&#34;filesort_summary&#34;</span><span class="p">:</span> <span class="err">{</span>
              <span class="s2">&#34;rows&#34;</span><span class="p">:</span> <span class="mi">5505</span><span class="p">,</span>
              <span class="s2">&#34;examined_rows&#34;</span><span class="p">:</span> <span class="mi">5505</span><span class="p">,</span>
              <span class="s2">&#34;number_of_tmp_files&#34;</span><span class="p">:</span> <span class="mi">9</span><span class="p">,</span>
              <span class="s2">&#34;sort_buffer_size&#34;</span><span class="p">:</span> <span class="mi">261760</span><span class="p">,</span>
              <span class="s2">&#34;sort_mode&#34;</span><span class="p">:</span> <span class="s2">&#34;&lt;sort_key, rowid&gt;&#34;</span>
            <span class="err">}</span>

<span class="cm">/*@b保存Innodb_rows_read的当前值*/</span>
<span class="k">select</span> <span class="n">variable_value</span> <span class="k">into</span> <span class="o">@</span><span class="n">b</span> <span class="k">from</span> <span class="n">performance_schema</span><span class="p">.</span><span class="n">session_status</span> <span class="k">where</span> <span class="n">variable_name</span><span class="o">=</span><span class="s1">&#39;Innodb_rows_read&#39;</span><span class="p">;</span>

<span class="cm">/*计算Innodb_rows_read的差值*/</span>
<span class="k">select</span> <span class="o">@</span><span class="n">b</span><span class="o">-@</span><span class="n">a</span><span class="p">;</span>

<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">select</span> <span class="o">@</span><span class="n">b</span><span class="o">-@</span><span class="n">a</span><span class="p">;</span>
<span class="o">+</span><span class="c1">-------+
</span><span class="c1"></span><span class="o">|</span> <span class="o">@</span><span class="n">b</span><span class="o">-@</span><span class="n">a</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">-------+
</span><span class="c1"></span><span class="o">|</span>  <span class="mi">6506</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">-------+
</span><span class="c1"></span><span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</code></pre></div><p>optimizer_trace结果分析:</p>
<ul>
<li>依然会采用外部排序,使用了9个临时文件来排序</li>
<li><code>sort_mode</code>变更为<code>rowid</code>,表明排序时的列只有要排序的列(name字段)和主键id.根据name排序完后还要根据对应的主键id去获取字段的值.</li>
<li>rowid排序比全字段排序会多了回表操作,必定会影响排序的性能.</li>
<li><code>select @b-@a</code>的结果为6506,比之前的多了1000,为什么?
<ul>
<li>全字段排序时回表是在引擎层内部自动完成的,server层并不感知,server层只是调用了5505次引擎的读接口获取city、name、age的值,然后在server层完成排序,所以是5505次读.</li>
<li>rowid排序时server层会先调用5505次引擎的读接口获取name、id的值,然后在server层完成排序,然后取前1000条记录中的id调用引擎的读接口获取对应的city、name、age的值,所以是6505次读.</li>
</ul>
</li>
</ul>
<p>整个排序过程:</p>
<ol>
<li>根据参数<code>max_length_for_sort_data</code>来判断,放入sort_buffer的字段(字段为name和主键id).</li>
<li>从索引<code>city</code>中找到满足条件的主键id.</li>
<li>根据主键id到主键索引中取出整行数据,取id和name字段的值,存入sort_buffer中.</li>
<li>从索引<code>city</code>中获取下一个满足条件的主键id.</li>
<li>循环3、4直到city不满足条件为止.</li>
<li>对sort_buffer中的数据按照字段name做排序.</li>
<li>再根据排序结果中的主键id去主键索引中获取city、name和age字段的值.</li>
</ol>
<h3 id="利用索引有序的特性">利用索引有序的特性</h3>
<p><code>order by name</code>需要排序是因为<code>name</code>字段是无序的,如果为有序的,<code>order by</code>又是怎样处理的?</p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="cm">/*增加city+name的索引*/</span>
<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">alter</span> <span class="k">table</span> <span class="n">t</span> <span class="k">add</span> <span class="k">index</span> <span class="n">city_name</span><span class="p">(</span><span class="n">city</span><span class="p">,</span> <span class="n">name</span><span class="p">);</span>
<span class="n">Query</span> <span class="n">OK</span><span class="p">,</span> <span class="mi">0</span> <span class="k">rows</span> <span class="n">affected</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">34</span> <span class="n">sec</span><span class="p">)</span>
<span class="n">Records</span><span class="p">:</span> <span class="mi">0</span>  <span class="n">Duplicates</span><span class="p">:</span> <span class="mi">0</span>  <span class="n">Warnings</span><span class="p">:</span> <span class="mi">0</span>

<span class="cm">/*查看执行计划*/</span>
<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">explain</span> <span class="k">select</span> <span class="n">city</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span> <span class="k">from</span> <span class="n">t</span> <span class="k">where</span> <span class="n">city</span><span class="o">=</span><span class="s1">&#39;hangzhou&#39;</span> <span class="k">order</span> <span class="k">by</span> <span class="n">name</span> <span class="k">limit</span> <span class="mi">1000</span><span class="p">;</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+------+----------------+-----------+---------+-------+------+----------+-----------------------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">id</span> <span class="o">|</span> <span class="n">select_type</span> <span class="o">|</span> <span class="k">table</span> <span class="o">|</span> <span class="n">partitions</span> <span class="o">|</span> <span class="k">type</span> <span class="o">|</span> <span class="n">possible_keys</span>  <span class="o">|</span> <span class="k">key</span>       <span class="o">|</span> <span class="n">key_len</span> <span class="o">|</span> <span class="k">ref</span>   <span class="o">|</span> <span class="k">rows</span> <span class="o">|</span> <span class="n">filtered</span> <span class="o">|</span> <span class="n">Extra</span>                 <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+------+----------------+-----------+---------+-------+------+----------+-----------------------+
</span><span class="c1"></span><span class="o">|</span>  <span class="mi">1</span> <span class="o">|</span> <span class="k">SIMPLE</span>      <span class="o">|</span> <span class="n">t</span>     <span class="o">|</span> <span class="k">NULL</span>       <span class="o">|</span> <span class="k">ref</span>  <span class="o">|</span> <span class="n">city</span><span class="p">,</span><span class="n">city_name</span> <span class="o">|</span> <span class="n">city_name</span> <span class="o">|</span> <span class="mi">50</span>      <span class="o">|</span> <span class="n">const</span> <span class="o">|</span> <span class="mi">5505</span> <span class="o">|</span>   <span class="mi">100</span><span class="p">.</span><span class="mi">00</span> <span class="o">|</span> <span class="k">Using</span> <span class="k">index</span> <span class="n">condition</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+------+----------------+-----------+---------+-------+------+----------+-----------------------+
</span><span class="c1"></span><span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span><span class="p">,</span> <span class="mi">1</span> <span class="n">warning</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</code></pre></div><p>可以看到执行计划Extra中只有<code>Using index condition</code>,使用索引<code>city_name</code>而不用再排序了.虽然不用再排序,但仍然需要回表操作来获取city、name和age的值.</p>
<p>如果使用了覆盖索引,该查询语句又会是怎样的列?</p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="cm">/*增加city+name+age的索引,覆盖所有查询字段*/</span>
<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">alter</span> <span class="k">table</span> <span class="n">t</span> <span class="k">add</span> <span class="k">index</span> <span class="n">city_name_age</span><span class="p">(</span><span class="n">city</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">);</span>
<span class="n">Query</span> <span class="n">OK</span><span class="p">,</span> <span class="mi">0</span> <span class="k">rows</span> <span class="n">affected</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">32</span> <span class="n">sec</span><span class="p">)</span>
<span class="n">Records</span><span class="p">:</span> <span class="mi">0</span>  <span class="n">Duplicates</span><span class="p">:</span> <span class="mi">0</span>  <span class="n">Warnings</span><span class="p">:</span> <span class="mi">0</span>

<span class="cm">/*查看执行计划*/</span>
<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">explain</span> <span class="k">select</span> <span class="n">city</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span> <span class="k">from</span> <span class="n">t</span> <span class="k">where</span> <span class="n">city</span><span class="o">=</span><span class="s1">&#39;hangzhou&#39;</span> <span class="k">order</span> <span class="k">by</span> <span class="n">name</span> <span class="k">limit</span> <span class="mi">1000</span><span class="p">;</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+------+------------------------------+-----------+---------+-------+------+----------+-----------------------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">id</span> <span class="o">|</span> <span class="n">select_type</span> <span class="o">|</span> <span class="k">table</span> <span class="o">|</span> <span class="n">partitions</span> <span class="o">|</span> <span class="k">type</span> <span class="o">|</span> <span class="n">possible_keys</span>                <span class="o">|</span> <span class="k">key</span>       <span class="o">|</span> <span class="n">key_len</span> <span class="o">|</span> <span class="k">ref</span>   <span class="o">|</span> <span class="k">rows</span> <span class="o">|</span> <span class="n">filtered</span> <span class="o">|</span> <span class="n">Extra</span>                 <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+------+------------------------------+-----------+---------+-------+------+----------+-----------------------+
</span><span class="c1"></span><span class="o">|</span>  <span class="mi">1</span> <span class="o">|</span> <span class="k">SIMPLE</span>      <span class="o">|</span> <span class="n">t</span>     <span class="o">|</span> <span class="k">NULL</span>       <span class="o">|</span> <span class="k">ref</span>  <span class="o">|</span> <span class="n">city</span><span class="p">,</span><span class="n">city_name</span><span class="p">,</span><span class="n">city_name_age</span> <span class="o">|</span> <span class="n">city_name</span> <span class="o">|</span> <span class="mi">50</span>      <span class="o">|</span> <span class="n">const</span> <span class="o">|</span> <span class="mi">5505</span> <span class="o">|</span>   <span class="mi">100</span><span class="p">.</span><span class="mi">00</span> <span class="o">|</span> <span class="k">Using</span> <span class="k">index</span> <span class="n">condition</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+------+------------------------------+-----------+---------+-------+------+----------+-----------------------+
</span><span class="c1"></span><span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span><span class="p">,</span> <span class="mi">1</span> <span class="n">warning</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</code></pre></div><p>从执行计划中可以看出仍然是使用的索引<code>city_name</code>,为什么不使用索引<code>city_name_age</code>来避免回表操作列?</p>
<p>强制使用索引<code>city_name_age</code>来看看具体情况.</p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">explain</span> <span class="k">select</span> <span class="n">city</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span> <span class="k">from</span> <span class="n">t</span> <span class="k">force</span> <span class="k">index</span> <span class="p">(</span><span class="n">city_name_age</span><span class="p">)</span> <span class="k">where</span> <span class="n">city</span><span class="o">=</span><span class="s1">&#39;hangzhou&#39;</span> <span class="k">order</span> <span class="k">by</span> <span class="n">name</span> <span class="k">limit</span> <span class="mi">1000</span><span class="p">;</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+------+---------------+---------------+---------+-------+------+----------+--------------------------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">id</span> <span class="o">|</span> <span class="n">select_type</span> <span class="o">|</span> <span class="k">table</span> <span class="o">|</span> <span class="n">partitions</span> <span class="o">|</span> <span class="k">type</span> <span class="o">|</span> <span class="n">possible_keys</span> <span class="o">|</span> <span class="k">key</span>           <span class="o">|</span> <span class="n">key_len</span> <span class="o">|</span> <span class="k">ref</span>   <span class="o">|</span> <span class="k">rows</span> <span class="o">|</span> <span class="n">filtered</span> <span class="o">|</span> <span class="n">Extra</span>                    <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+------+---------------+---------------+---------+-------+------+----------+--------------------------+
</span><span class="c1"></span><span class="o">|</span>  <span class="mi">1</span> <span class="o">|</span> <span class="k">SIMPLE</span>      <span class="o">|</span> <span class="n">t</span>     <span class="o">|</span> <span class="k">NULL</span>       <span class="o">|</span> <span class="k">ref</span>  <span class="o">|</span> <span class="n">city_name_age</span> <span class="o">|</span> <span class="n">city_name_age</span> <span class="o">|</span> <span class="mi">50</span>      <span class="o">|</span> <span class="n">const</span> <span class="o">|</span> <span class="mi">9940</span> <span class="o">|</span>   <span class="mi">100</span><span class="p">.</span><span class="mi">00</span> <span class="o">|</span> <span class="k">Using</span> <span class="k">where</span><span class="p">;</span> <span class="k">Using</span> <span class="k">index</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+------+---------------+---------------+---------+-------+------+----------+--------------------------+
</span><span class="c1"></span><span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span><span class="p">,</span> <span class="mi">1</span> <span class="n">warning</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">01</span> <span class="n">sec</span><span class="p">)</span>
</code></pre></div><p>从执行计划中可以看出使用覆盖索引(Extra中的<code>Using index</code>就是覆盖索引).<strong>但rows为什么是9940?</strong></p>
<p>再来看看使用<code>order by name, age</code>的情况.</p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">explain</span> <span class="k">select</span> <span class="n">city</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span> <span class="k">from</span> <span class="n">t</span> <span class="k">where</span> <span class="n">city</span><span class="o">=</span><span class="s1">&#39;hangzhou&#39;</span> <span class="k">order</span> <span class="k">by</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span> <span class="k">limit</span> <span class="mi">1000</span><span class="p">;</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+------+------------------------------+---------------+---------+-------+------+----------+--------------------------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">id</span> <span class="o">|</span> <span class="n">select_type</span> <span class="o">|</span> <span class="k">table</span> <span class="o">|</span> <span class="n">partitions</span> <span class="o">|</span> <span class="k">type</span> <span class="o">|</span> <span class="n">possible_keys</span>                <span class="o">|</span> <span class="k">key</span>           <span class="o">|</span> <span class="n">key_len</span> <span class="o">|</span> <span class="k">ref</span>   <span class="o">|</span> <span class="k">rows</span> <span class="o">|</span> <span class="n">filtered</span> <span class="o">|</span> <span class="n">Extra</span>                    <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+------+------------------------------+---------------+---------+-------+------+----------+--------------------------+
</span><span class="c1"></span><span class="o">|</span>  <span class="mi">1</span> <span class="o">|</span> <span class="k">SIMPLE</span>      <span class="o">|</span> <span class="n">t</span>     <span class="o">|</span> <span class="k">NULL</span>       <span class="o">|</span> <span class="k">ref</span>  <span class="o">|</span> <span class="n">city</span><span class="p">,</span><span class="n">city_name</span><span class="p">,</span><span class="n">city_name_age</span> <span class="o">|</span> <span class="n">city_name_age</span> <span class="o">|</span> <span class="mi">50</span>      <span class="o">|</span> <span class="n">const</span> <span class="o">|</span> <span class="mi">5505</span> <span class="o">|</span>   <span class="mi">100</span><span class="p">.</span><span class="mi">00</span> <span class="o">|</span> <span class="k">Using</span> <span class="k">where</span><span class="p">;</span> <span class="k">Using</span> <span class="k">index</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+------+------------------------------+---------------+---------+-------+------+----------+--------------------------+
</span><span class="c1"></span><span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span><span class="p">,</span> <span class="mi">1</span> <span class="n">warning</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</code></pre></div><p>这时和预期是一样的,使用了索引city_name_age(覆盖索引<code>Using index</code>).</p>
<p>再来看看当把索引<code>city_name</code>删除后的情况.</p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="cm">/*删除索引city_name*/</span>
<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">alter</span> <span class="k">table</span> <span class="n">t</span> <span class="k">drop</span> <span class="k">index</span> <span class="n">city_name</span><span class="p">;</span>
<span class="n">Query</span> <span class="n">OK</span><span class="p">,</span> <span class="mi">0</span> <span class="k">rows</span> <span class="n">affected</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">02</span> <span class="n">sec</span><span class="p">)</span>
<span class="n">Records</span><span class="p">:</span> <span class="mi">0</span>  <span class="n">Duplicates</span><span class="p">:</span> <span class="mi">0</span>  <span class="n">Warnings</span><span class="p">:</span> <span class="mi">0</span>

<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">explain</span> <span class="k">select</span> <span class="n">city</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span> <span class="k">from</span> <span class="n">t</span> <span class="k">where</span> <span class="n">city</span><span class="o">=</span><span class="s1">&#39;hangzhou&#39;</span> <span class="k">order</span> <span class="k">by</span> <span class="n">name</span> <span class="k">limit</span> <span class="mi">1000</span><span class="p">;</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+------+--------------------+---------------+---------+-------+------+----------+--------------------------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">id</span> <span class="o">|</span> <span class="n">select_type</span> <span class="o">|</span> <span class="k">table</span> <span class="o">|</span> <span class="n">partitions</span> <span class="o">|</span> <span class="k">type</span> <span class="o">|</span> <span class="n">possible_keys</span>      <span class="o">|</span> <span class="k">key</span>           <span class="o">|</span> <span class="n">key_len</span> <span class="o">|</span> <span class="k">ref</span>   <span class="o">|</span> <span class="k">rows</span> <span class="o">|</span> <span class="n">filtered</span> <span class="o">|</span> <span class="n">Extra</span>                    <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+------+--------------------+---------------+---------+-------+------+----------+--------------------------+
</span><span class="c1"></span><span class="o">|</span>  <span class="mi">1</span> <span class="o">|</span> <span class="k">SIMPLE</span>      <span class="o">|</span> <span class="n">t</span>     <span class="o">|</span> <span class="k">NULL</span>       <span class="o">|</span> <span class="k">ref</span>  <span class="o">|</span> <span class="n">city</span><span class="p">,</span><span class="n">city_name_age</span> <span class="o">|</span> <span class="n">city_name_age</span> <span class="o">|</span> <span class="mi">50</span>      <span class="o">|</span> <span class="n">const</span> <span class="o">|</span> <span class="mi">5505</span> <span class="o">|</span>   <span class="mi">100</span><span class="p">.</span><span class="mi">00</span> <span class="o">|</span> <span class="k">Using</span> <span class="k">where</span><span class="p">;</span> <span class="k">Using</span> <span class="k">index</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+------+--------------------+---------------+---------+-------+------+----------+--------------------------+
</span><span class="c1"></span><span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span><span class="p">,</span> <span class="mi">1</span> <span class="n">warning</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</code></pre></div><p>可以看到查询使用了索引<code>city_name_age</code>(覆盖索引<code>Using index</code>),避免了回表操作.</p>
<p><strong>注意,针对<code>order by name</code>,在使用索引<code>city_name</code>和<code>city_name_age</code>时在语义上是有细微差异的,两个查询返回的结果可能并不一样,这是两个索引的排序规则不一样导致的.</strong></p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">select</span> <span class="n">city</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span> <span class="k">from</span> <span class="n">t</span> <span class="k">force</span> <span class="k">index</span> <span class="p">(</span><span class="n">city_name_age</span><span class="p">)</span> <span class="k">where</span> <span class="n">city</span><span class="o">=</span><span class="s1">&#39;hangzhou&#39;</span> <span class="k">order</span> <span class="k">by</span> <span class="n">name</span> <span class="k">limit</span> <span class="mi">5</span><span class="p">;</span>
<span class="o">+</span><span class="c1">----------+------+-----+
</span><span class="c1"></span><span class="o">|</span> <span class="n">city</span>     <span class="o">|</span> <span class="n">name</span> <span class="o">|</span> <span class="n">age</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----------+------+-----+
</span><span class="c1"></span><span class="o">|</span> <span class="n">hangzhou</span> <span class="o">|</span> <span class="o">??</span>   <span class="o">|</span>   <span class="mi">8</span> <span class="o">|</span>
<span class="o">|</span> <span class="n">hangzhou</span> <span class="o">|</span> <span class="o">??</span>   <span class="o">|</span>  <span class="mi">10</span> <span class="o">|</span>
<span class="o">|</span> <span class="n">hangzhou</span> <span class="o">|</span> <span class="o">??</span>   <span class="o">|</span>  <span class="mi">10</span> <span class="o">|</span>
<span class="o">|</span> <span class="n">hangzhou</span> <span class="o">|</span> <span class="o">??</span>   <span class="o">|</span>  <span class="mi">10</span> <span class="o">|</span>
<span class="o">|</span> <span class="n">hangzhou</span> <span class="o">|</span> <span class="o">??</span>   <span class="o">|</span>  <span class="mi">13</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----------+------+-----+
</span><span class="c1"></span><span class="mi">5</span> <span class="k">rows</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>

<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">select</span> <span class="n">city</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span> <span class="k">from</span> <span class="n">t</span>  <span class="k">where</span> <span class="n">city</span><span class="o">=</span><span class="s1">&#39;hangzhou&#39;</span> <span class="k">order</span> <span class="k">by</span> <span class="n">name</span> <span class="k">limit</span> <span class="mi">5</span><span class="p">;</span>
<span class="o">+</span><span class="c1">----------+------+-----+
</span><span class="c1"></span><span class="o">|</span> <span class="n">city</span>     <span class="o">|</span> <span class="n">name</span> <span class="o">|</span> <span class="n">age</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----------+------+-----+
</span><span class="c1"></span><span class="o">|</span> <span class="n">hangzhou</span> <span class="o">|</span> <span class="o">??</span>   <span class="o">|</span>  <span class="mi">82</span> <span class="o">|</span>
<span class="o">|</span> <span class="n">hangzhou</span> <span class="o">|</span> <span class="o">??</span>   <span class="o">|</span>  <span class="mi">57</span> <span class="o">|</span>
<span class="o">|</span> <span class="n">hangzhou</span> <span class="o">|</span> <span class="o">??</span>   <span class="o">|</span>  <span class="mi">29</span> <span class="o">|</span>
<span class="o">|</span> <span class="n">hangzhou</span> <span class="o">|</span> <span class="o">??</span>   <span class="o">|</span>  <span class="mi">86</span> <span class="o">|</span>
<span class="o">|</span> <span class="n">hangzhou</span> <span class="o">|</span> <span class="o">??</span>   <span class="o">|</span>  <span class="mi">16</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----------+------+-----+
</span><span class="c1"></span><span class="mi">5</span> <span class="k">rows</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</code></pre></div><p>可以看出查询结果明显不一样.</p>
<p><strong>但如何解释同时存在索引<code>city_name</code>和<code>city_name_age</code>时,查询为什么不优先使用索引<code>city_name_age</code>来避免回表操作,而强制使用<code>city_name_age</code>时explain中rows为什么会是9940?</strong></p>
<h2 id="不带条件的orderby分析">不带条件的orderby分析</h2>
<p>针对语句<code>select * from t order by city limit 1000</code>,会使用索引吗?如果会是哪个索引?</p>
<p>针对语句<code>select * from t order by city limit 10000</code>列?</p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">explain</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">t</span> <span class="k">order</span> <span class="k">by</span> <span class="n">city</span> <span class="k">limit</span> <span class="mi">1000</span><span class="p">;</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">id</span> <span class="o">|</span> <span class="n">select_type</span> <span class="o">|</span> <span class="k">table</span> <span class="o">|</span> <span class="n">partitions</span> <span class="o">|</span> <span class="k">type</span>  <span class="o">|</span> <span class="n">possible_keys</span> <span class="o">|</span> <span class="k">key</span>  <span class="o">|</span> <span class="n">key_len</span> <span class="o">|</span> <span class="k">ref</span>  <span class="o">|</span> <span class="k">rows</span> <span class="o">|</span> <span class="n">filtered</span> <span class="o">|</span> <span class="n">Extra</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-------+
</span><span class="c1"></span><span class="o">|</span>  <span class="mi">1</span> <span class="o">|</span> <span class="k">SIMPLE</span>      <span class="o">|</span> <span class="n">t</span>     <span class="o">|</span> <span class="k">NULL</span>       <span class="o">|</span> <span class="k">index</span> <span class="o">|</span> <span class="k">NULL</span>          <span class="o">|</span> <span class="n">city</span> <span class="o">|</span> <span class="mi">50</span>      <span class="o">|</span> <span class="k">NULL</span> <span class="o">|</span> <span class="mi">1000</span> <span class="o">|</span>   <span class="mi">100</span><span class="p">.</span><span class="mi">00</span> <span class="o">|</span> <span class="k">NULL</span>  <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-------+
</span><span class="c1"></span><span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span><span class="p">,</span> <span class="mi">1</span> <span class="n">warning</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>

<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">explain</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">t</span> <span class="k">order</span> <span class="k">by</span> <span class="n">city</span> <span class="k">limit</span> <span class="mi">10000</span><span class="p">;</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+------+---------------+------+---------+------+-------+----------+----------------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">id</span> <span class="o">|</span> <span class="n">select_type</span> <span class="o">|</span> <span class="k">table</span> <span class="o">|</span> <span class="n">partitions</span> <span class="o">|</span> <span class="k">type</span> <span class="o">|</span> <span class="n">possible_keys</span> <span class="o">|</span> <span class="k">key</span>  <span class="o">|</span> <span class="n">key_len</span> <span class="o">|</span> <span class="k">ref</span>  <span class="o">|</span> <span class="k">rows</span>  <span class="o">|</span> <span class="n">filtered</span> <span class="o">|</span> <span class="n">Extra</span>          <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+------+---------------+------+---------+------+-------+----------+----------------+
</span><span class="c1"></span><span class="o">|</span>  <span class="mi">1</span> <span class="o">|</span> <span class="k">SIMPLE</span>      <span class="o">|</span> <span class="n">t</span>     <span class="o">|</span> <span class="k">NULL</span>       <span class="o">|</span> <span class="k">ALL</span>  <span class="o">|</span> <span class="k">NULL</span>          <span class="o">|</span> <span class="k">NULL</span> <span class="o">|</span> <span class="k">NULL</span>    <span class="o">|</span> <span class="k">NULL</span> <span class="o">|</span> <span class="mi">44064</span> <span class="o">|</span>   <span class="mi">100</span><span class="p">.</span><span class="mi">00</span> <span class="o">|</span> <span class="k">Using</span> <span class="n">filesort</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+------+---------------+------+---------+------+-------+----------+----------------+
</span><span class="c1"></span><span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span><span class="p">,</span> <span class="mi">1</span> <span class="n">warning</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</code></pre></div><p>从执行计划中可以看出,语句1是有使用索引<code>city</code>且不用排序.而语句2是全表扫描且使用了排序(Extra的<code>Using filesort</code>).</p>
<p>当把limit从1000改成10000时查询为什么造成这种差异?</p>
<ul>
<li>使用索引<code>city</code>是需要进行回表操作的,当limit数据量大时优化器认为回表操作代价太大,还不如直接全表扫描.</li>
<li>针对回表操作,从索引<code>city</code>中获取到的id不是有序的,回表会造成随机读,这也是优化器认为代价太大的原因(Mysql其实有提供MRR机制来优化这种情况),还不如直接全表扫描,使用顺序读.</li>
</ul>
<h2 id="总结">总结</h2>
<ul>
<li>可以通过合理的创建索引来避免<code>order by</code>排序,提高查询性能.</li>
<li>当排序不可避免时,有两个系统参数<code>max_length_for_sort_data</code>和<code>sort_buffer_size</code>会对排序过程产生影响.</li>
<li>当排序不可避免时,尽量使用<code>sort_buffer</code>内存+全字段排序,这样性能最好.可以考虑优化上面两个参数.</li>
<li>Mysql设计思想之一:当内存足够时,就要多利用内存,尽量减少磁盘访问.</li>
<li>Mysql设计思想之一:尽量避免磁盘随机IO.</li>
<li><code>Using filesort</code>表示需要排序.</li>
<li><code>Using where; Using index</code>表示使用覆盖索引,需要的数据都在索引列中,不需要回表.</li>
<li><code>Using index condition</code>表示索引下推来过滤条件,但需要回表查询数据.</li>
<li><code>Using where</code>表示使用索引的情况下,需要回表查询数据.</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>MySQL锁机制分析</title>
			<link>https://shenbaise9527.com/db/mysql%E9%94%81%E6%9C%BA%E5%88%B6%E5%88%86%E6%9E%90/</link>
			<pubDate>Tue, 24 Nov 2020 20:50:10 +0800</pubDate>
			
			<guid>https://shenbaise9527.com/db/mysql%E9%94%81%E6%9C%BA%E5%88%B6%E5%88%86%E6%9E%90/</guid>
			<description>全局锁 全局锁就是对整个数据库实例加锁.MySQL提供了命令Flush tables with read lock(FTWRL),可使整库处于只读状态,其它线程的数据更新语</description>
			<content type="html"><![CDATA[<h2 id="全局锁">全局锁</h2>
<p>全局锁就是对整个数据库实例加锁.MySQL提供了命令<code>Flush tables with read lock</code>(FTWRL),可使整库处于只读状态,其它线程的数据更新语句(数据的增删改)、数据定义语句(DDL)和更新类事务的提交语句都会被阻塞.</p>
<p>全局锁的典型使用场景是做全库的逻辑备份.使用FTWRL可确保不会有其它线程对数据库做更新,然后再对整个库做备份,这样可以保证数据库的数据逻辑一致性.但让整库只读,是危险操作:</p>
<ol>
<li>如果在主库上备份,那么在备份期间都不能执行更新,业务基本上停摆.</li>
<li>如果在从库上备份,那么在备份期间不能执行主库同步过来的binlog,会主从延迟.</li>
</ol>
<p>在针对InnoDB引擎的表做全库备份时,可以采用可重复读隔离级别下来进行备份,不会对其它线程的操作造成堵塞,还可以保证数据的逻辑一致性.是基于一致性视图+MVCC来实现的.</p>
<p>可以使用官方工具mysqldump,使用参数<code>-single-transaction</code>时,会在可重复读隔离级别下启动一个事务,确保拿到一致性视图.但该方法只适用于所有的表都使用事务引擎的库.</p>
<p>使用命令<code>set global readonly=true</code>也可使整库处于只读状态,但这个操作更加的危险.</p>
<ol>
<li>在有些系统中,readonly的值会被用来做其它逻辑,比如判断一个库是主库还是备库.修改该值影响面更广.</li>
<li>在异常处理机制上有差异.执行FTWRL后客户端异常断开,MySQL会自动释放这个全局锁,使数据库恢复到正常状态.而readonly修改后会一直有效,使库一直处于只读状态,风险更高.</li>
</ol>
<p>ps: 在从库上如果用户有超级权限,readonly是失效的.</p>
<h2 id="表级锁">表级锁</h2>
<p>MySQL里表级别的锁有两种,表锁和元数据锁(meta data lock,简称MDL锁)</p>
<h3 id="表锁">表锁</h3>
<p>加锁语法为<code>lock tables ... read/write</code>,解锁语句为<code>unlock tables</code></p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="c1">-- session1
</span><span class="c1"></span><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">lock</span> <span class="n">tables</span> <span class="n">t</span> <span class="k">read</span><span class="p">,</span> <span class="n">t1</span> <span class="k">write</span><span class="p">;</span>
<span class="n">Query</span> <span class="n">OK</span><span class="p">,</span> <span class="mi">0</span> <span class="k">rows</span> <span class="n">affected</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>

<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">t</span> <span class="k">limit</span> <span class="mi">1</span><span class="p">;</span>
<span class="o">+</span><span class="c1">----+--------+------+-----+------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">id</span> <span class="o">|</span> <span class="n">city</span>   <span class="o">|</span> <span class="n">name</span> <span class="o">|</span> <span class="n">age</span> <span class="o">|</span> <span class="n">addr</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----+--------+------+-----+------+
</span><span class="c1"></span><span class="o">|</span>  <span class="mi">1</span> <span class="o">|</span> <span class="n">gongan</span> <span class="o">|</span> <span class="o">??</span>   <span class="o">|</span>  <span class="mi">80</span> <span class="o">|</span> <span class="n">test</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----+--------+------+-----+------+
</span><span class="c1"></span><span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>

<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">t1</span> <span class="k">limit</span> <span class="mi">1</span><span class="p">;</span>
<span class="o">+</span><span class="c1">----+------+------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">id</span> <span class="o">|</span> <span class="n">a</span>    <span class="o">|</span> <span class="n">b</span>    <span class="o">|</span>
<span class="o">+</span><span class="c1">----+------+------+
</span><span class="c1"></span><span class="o">|</span>  <span class="mi">1</span> <span class="o">|</span>    <span class="mi">1</span> <span class="o">|</span>    <span class="mi">1</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----+------+------+
</span><span class="c1"></span><span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>

<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">insert</span> <span class="k">into</span> <span class="n">t</span> <span class="k">values</span> <span class="p">(</span><span class="k">null</span><span class="p">,</span> <span class="s1">&#39;gongan&#39;</span><span class="p">,</span> <span class="s1">&#39;guanguan&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;test&#39;</span><span class="p">);</span>
<span class="n">ERROR</span> <span class="mi">1099</span> <span class="p">(</span><span class="n">HY000</span><span class="p">):</span> <span class="k">Table</span> <span class="s1">&#39;t&#39;</span> <span class="n">was</span> <span class="n">locked</span> <span class="k">with</span> <span class="n">a</span> <span class="k">READ</span> <span class="k">lock</span> <span class="k">and</span> <span class="n">can</span><span class="s1">&#39;t be updated
</span><span class="s1">mysql&gt; insert into t1 values(101, 101, 101);
</span><span class="s1">Query OK, 1 row affected (0.00 sec)
</span><span class="s1">
</span><span class="s1">mysql&gt; select * from t2 limit 1;
</span><span class="s1">ERROR 1100 (HY000): Table &#39;</span><span class="n">t2</span><span class="s1">&#39; was not locked with LOCK TABLES
</span><span class="s1">mysql&gt; insert into t2 values(1001, 1001, 1001);
</span><span class="s1">ERROR 1100 (HY000): Table &#39;</span><span class="n">t2</span><span class="s1">&#39; was not locked with LOCK TABLES
</span></code></pre></div><ul>
<li>针对表<code>t</code>读锁,表<code>t1</code>为写锁.本线程两个表的查询操作都正常,表<code>t1</code>插入正常,但针对表<code>t</code>的插入操作报错.</li>
<li>本线程只能操作表<code>t</code>和表<code>t1</code>,操作其它表都会报错.</li>
<li>本线程只能读表<code>t</code>,写会报错.</li>
<li>本线程能读写表<code>t1</code>.</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="c1">-- session2
</span><span class="c1"></span><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">t</span> <span class="k">limit</span> <span class="mi">1</span><span class="p">;</span>
<span class="o">+</span><span class="c1">----+--------+------+-----+------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">id</span> <span class="o">|</span> <span class="n">city</span>   <span class="o">|</span> <span class="n">name</span> <span class="o">|</span> <span class="n">age</span> <span class="o">|</span> <span class="n">addr</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----+--------+------+-----+------+
</span><span class="c1"></span><span class="o">|</span>  <span class="mi">1</span> <span class="o">|</span> <span class="n">gongan</span> <span class="o">|</span> <span class="o">??</span>   <span class="o">|</span>  <span class="mi">80</span> <span class="o">|</span> <span class="n">test</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----+--------+------+-----+------+
</span><span class="c1"></span><span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>

<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">t2</span> <span class="k">limit</span> <span class="mi">1</span><span class="p">;</span>
<span class="o">+</span><span class="c1">----+------+------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">id</span> <span class="o">|</span> <span class="n">a</span>    <span class="o">|</span> <span class="n">b</span>    <span class="o">|</span>
<span class="o">+</span><span class="c1">----+------+------+
</span><span class="c1"></span><span class="o">|</span>  <span class="mi">1</span> <span class="o">|</span>    <span class="mi">1</span> <span class="o">|</span>    <span class="mi">1</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----+------+------+
</span><span class="c1"></span><span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>

<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">insert</span> <span class="k">into</span> <span class="n">t2</span> <span class="k">values</span><span class="p">(</span><span class="mi">1001</span><span class="p">,</span> <span class="mi">1001</span><span class="p">,</span> <span class="mi">1001</span><span class="p">);</span>
<span class="n">Query</span> <span class="n">OK</span><span class="p">,</span> <span class="mi">1</span> <span class="k">row</span> <span class="n">affected</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">03</span> <span class="n">sec</span><span class="p">)</span>

<span class="c1">-- block
</span><span class="c1"></span><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">insert</span> <span class="k">into</span> <span class="n">t</span> <span class="k">values</span> <span class="p">(</span><span class="k">null</span><span class="p">,</span> <span class="s1">&#39;gongan&#39;</span><span class="p">,</span> <span class="s1">&#39;guanguan&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;test&#39;</span><span class="p">);</span>
</code></pre></div><ul>
<li>其它线程能正常读表<code>t</code>,但写表<code>t</code>时被阻塞</li>
<li>其它线程能正常读写其它表.</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="c1">-- session3(block)
</span><span class="c1"></span><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">t1</span> <span class="k">limit</span> <span class="mi">1</span><span class="p">;</span>
</code></pre></div><ul>
<li>其它线程读表<code>t1</code>时被阻塞.</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="c1">-- session4(block)
</span><span class="c1"></span><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">insert</span> <span class="k">into</span> <span class="n">t1</span> <span class="k">values</span><span class="p">(</span><span class="mi">102</span><span class="p">,</span> <span class="mi">102</span><span class="p">,</span> <span class="mi">102</span><span class="p">);</span>
</code></pre></div><ul>
<li>其它线程写表<code>t1</code>时被阻塞.</li>
</ul>
<h3 id="元数据锁">元数据锁</h3>
<p>MySQL5.5版本之后的功能,会自动加锁、解锁.主要是为了解决DDL和DML并发的问题.DML时会加MDL读锁,DDL时会加MDL写锁,读读之间不互斥,读写、写写之间互斥.</p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="c1">-- session1
</span><span class="c1"></span><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">begin</span><span class="p">;</span>
<span class="n">Query</span> <span class="n">OK</span><span class="p">,</span> <span class="mi">0</span> <span class="k">rows</span> <span class="n">affected</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>

<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">t1</span> <span class="k">limit</span> <span class="mi">1</span><span class="p">;</span>
<span class="o">+</span><span class="c1">----+------+------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">id</span> <span class="o">|</span> <span class="n">a</span>    <span class="o">|</span> <span class="n">b</span>    <span class="o">|</span>
<span class="o">+</span><span class="c1">----+------+------+
</span><span class="c1"></span><span class="o">|</span>  <span class="mi">1</span> <span class="o">|</span>    <span class="mi">1</span> <span class="o">|</span>    <span class="mi">1</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----+------+------+
</span><span class="c1"></span><span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>

<span class="c1">-- session2
</span><span class="c1"></span><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">alter</span> <span class="k">table</span> <span class="n">t1</span> <span class="k">add</span> <span class="n">f</span> <span class="nb">int</span><span class="p">;</span>

<span class="c1">-- session3
</span><span class="c1"></span><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">t1</span> <span class="k">limit</span> <span class="mi">1</span><span class="p">;</span>
</code></pre></div><ol>
<li>在session1提交事务之前,session2和session3都被阻塞了.</li>
<li>session1是获取了表<code>t1</code>的MDL读锁,但由于事务未提交,导致该MDL读锁未被释放.</li>
<li>session2是给表<code>t1</code>增加列,需要MDL写锁,由于读写互斥,导致该操作被堵塞.</li>
<li>session3是读表<code>t1</code>,需要MDL读锁,但之前已经有MDL写锁在等待了,也导致获取不到MDL读锁,从而被堵塞.</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="c1">-- session1
</span><span class="c1"></span><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">commit</span><span class="p">;</span>
<span class="n">Query</span> <span class="n">OK</span><span class="p">,</span> <span class="mi">0</span> <span class="k">rows</span> <span class="n">affected</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>

<span class="c1">-- session2
</span><span class="c1"></span><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">alter</span> <span class="k">table</span> <span class="n">t1</span> <span class="k">add</span> <span class="n">f</span> <span class="nb">int</span><span class="p">;</span>
<span class="n">Query</span> <span class="n">OK</span><span class="p">,</span> <span class="mi">0</span> <span class="k">rows</span> <span class="n">affected</span> <span class="p">(</span><span class="mi">4</span> <span class="k">min</span> <span class="mi">23</span><span class="p">.</span><span class="mi">27</span> <span class="n">sec</span><span class="p">)</span>
<span class="n">Records</span><span class="p">:</span> <span class="mi">0</span>  <span class="n">Duplicates</span><span class="p">:</span> <span class="mi">0</span>  <span class="n">Warnings</span><span class="p">:</span> <span class="mi">0</span>

<span class="c1">-- session3
</span><span class="c1"></span><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">t1</span> <span class="k">limit</span> <span class="mi">1</span><span class="p">;</span>
<span class="o">+</span><span class="c1">----+------+------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">id</span> <span class="o">|</span> <span class="n">a</span>    <span class="o">|</span> <span class="n">b</span>    <span class="o">|</span>
<span class="o">+</span><span class="c1">----+------+------+
</span><span class="c1"></span><span class="o">|</span>  <span class="mi">1</span> <span class="o">|</span>    <span class="mi">1</span> <span class="o">|</span>    <span class="mi">1</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----+------+------+
</span><span class="c1"></span><span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">4</span> <span class="k">min</span> <span class="mi">20</span><span class="p">.</span><span class="mi">25</span> <span class="n">sec</span><span class="p">)</span>
</code></pre></div><p>session1提交之后,session2和session3才执行完,但注意session3在session2之前执行,也就是session3先获取到了MDL读锁.</p>
<p><strong>当有多个线程在等待MDL锁时,获取锁的规则是什么?会由哪个线程得到锁?读锁优先还是写锁优先?</strong></p>
<p><em><strong>MDL锁是在需要的时候由MySQL自动加的,但要等待事务被提交后才会被释放.</strong></em></p>
<h2 id="行锁">行锁</h2>
<p>全局锁和表级锁是在server层实现的,而行锁是由引擎层实现的,这里主要关注InnoDB的行锁.行锁是自动加的.</p>
<h3 id="两阶段协议锁">两阶段协议锁</h3>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="c1">-- session A
</span><span class="c1"></span><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">begin</span><span class="p">;</span>
<span class="n">Query</span> <span class="n">OK</span><span class="p">,</span> <span class="mi">0</span> <span class="k">rows</span> <span class="n">affected</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>

<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">update</span> <span class="n">t2</span> <span class="k">set</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">2</span> <span class="k">where</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="n">Query</span> <span class="n">OK</span><span class="p">,</span> <span class="mi">1</span> <span class="k">row</span> <span class="n">affected</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">01</span> <span class="n">sec</span><span class="p">)</span>
<span class="k">Rows</span> <span class="n">matched</span><span class="p">:</span> <span class="mi">1</span>  <span class="n">Changed</span><span class="p">:</span> <span class="mi">1</span>  <span class="n">Warnings</span><span class="p">:</span> <span class="mi">0</span>

<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">update</span> <span class="n">t2</span> <span class="k">set</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">3</span> <span class="k">where</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
<span class="n">Query</span> <span class="n">OK</span><span class="p">,</span> <span class="mi">1</span> <span class="k">row</span> <span class="n">affected</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
<span class="k">Rows</span> <span class="n">matched</span><span class="p">:</span> <span class="mi">1</span>  <span class="n">Changed</span><span class="p">:</span> <span class="mi">1</span>  <span class="n">Warnings</span><span class="p">:</span> <span class="mi">0</span>

<span class="c1">-- session B(block)
</span><span class="c1"></span><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">update</span> <span class="n">t2</span> <span class="k">set</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">1</span> <span class="k">where</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</code></pre></div><p>可以看到session A未提交,会导致session B阻塞.当session A在<code>commit</code>提交之后,session B才能开始执行.</p>
<p>行锁是在需要的时候由InnoDB自动加上,但直到事务结束时锁才会被释放.这就是两阶段协议锁.</p>
<h3 id="死锁和死锁检测">死锁和死锁检测</h3>
<p>在并发系统中当不同的线程出现循环资源依赖,就会导致这些线程都进入无限等待的状态,称为死锁.如下session A和session B就出现了循环资源依赖,导致死锁.</p>
<table>
<thead>
<tr>
<th style="text-align:left">session A</th>
<th style="text-align:left">session B</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">begin;update t2 set a = 2 where id = 1;</td>
<td style="text-align:left">begin;</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">update t2 set a = 3 where id = 2;</td>
</tr>
<tr>
<td style="text-align:left">update t2 set a = 4 where id = 2;</td>
<td></td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">update t2 set a = 5 where id = 1;</td>
</tr>
</tbody>
</table>
<p>在InnoDB中,当处于锁等待状态时,就有可能会触发死锁检测,是参数<code>innodb_deadlock_detect</code>控制的.</p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="c1">-- 默认值为on,表示开启死锁检测.
</span><span class="c1"></span><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">show</span> <span class="n">variables</span> <span class="k">like</span> <span class="s1">&#39;innodb_deadlock%&#39;</span><span class="p">;</span>
<span class="o">+</span><span class="c1">------------------------+-------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">Variable_name</span>          <span class="o">|</span> <span class="n">Value</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">------------------------+-------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">innodb_deadlock_detect</span> <span class="o">|</span> <span class="k">ON</span>    <span class="o">|</span>
<span class="o">+</span><span class="c1">------------------------+-------+
</span><span class="c1"></span><span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</code></pre></div><p>每个新来的被堵住的线程,都要判断会不会由于自己的加入导致了死锁,这是一个时间复杂度为O(n)的操作.假设有1000个线程要同时更新同一行,那么死锁检测操作就是100万量级的,这期间会消耗大量的CPU资源.注意死锁检测只会检测相关联的线程.比如当前session A在等待session B,而session B在等待session C;session D在等待session E.当session F加入需要等待session A时,只会检测F-&gt;A-&gt;B-&gt;C,D和E是不会检测的.</p>
<p><em><strong>怎么解决由热点行更新导致的性能问题?</strong></em></p>
<p><em><strong>若在事务中需要锁多个行,把最可能造成锁冲突、最可能影响并发度的锁的申请时机尽量往后放.</strong></em></p>
<p>另外需要注意的是,当等待锁一定时间后,会出现超时现象,是参数<code>innodb_lock_wait_timeout</code>控制的.</p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="c1">-- 等待锁超时.
</span><span class="c1"></span><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">update</span> <span class="n">t2</span> <span class="k">set</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">1</span> <span class="k">where</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="n">ERROR</span> <span class="mi">1205</span> <span class="p">(</span><span class="n">HY000</span><span class="p">):</span> <span class="k">Lock</span> <span class="n">wait</span> <span class="n">timeout</span> <span class="n">exceeded</span><span class="p">;</span> <span class="n">try</span> <span class="n">restarting</span> <span class="k">transaction</span>

<span class="c1">-- 锁等待超时时间,默认为50s.
</span><span class="c1"></span><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">show</span> <span class="n">variables</span> <span class="k">like</span> <span class="s1">&#39;innodb_lock_wait_timeout&#39;</span><span class="p">;</span>
<span class="o">+</span><span class="c1">--------------------------+-------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">Variable_name</span>            <span class="o">|</span> <span class="n">Value</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">--------------------------+-------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">innodb_lock_wait_timeout</span> <span class="o">|</span> <span class="mi">50</span>    <span class="o">|</span>
<span class="o">+</span><span class="c1">--------------------------+-------+
</span><span class="c1"></span><span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">01</span> <span class="n">sec</span><span class="p">)</span>
</code></pre></div><p>死锁时可以通过<code>show engine innodb status</code>命令查看</p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">show</span> <span class="n">engine</span> <span class="n">innodb</span> <span class="n">status</span><span class="err">\</span><span class="k">G</span>
<span class="o">***************************</span> <span class="mi">1</span><span class="p">.</span> <span class="k">row</span> <span class="o">***************************</span>
  <span class="k">Type</span><span class="p">:</span> <span class="n">InnoDB</span>
  <span class="n">Name</span><span class="p">:</span> 
<span class="n">Status</span><span class="p">:</span> 
<span class="o">=====================================</span>
<span class="mi">2020</span><span class="o">-</span><span class="mi">07</span><span class="o">-</span><span class="mi">14</span> <span class="mi">14</span><span class="p">:</span><span class="mi">49</span><span class="p">:</span><span class="mi">16</span> <span class="mi">0</span><span class="n">x7fa8507f8700</span> <span class="n">INNODB</span> <span class="n">MONITOR</span> <span class="k">OUTPUT</span>
<span class="o">=====================================</span>
<span class="n">Per</span> <span class="k">second</span> <span class="n">averages</span> <span class="n">calculated</span> <span class="k">from</span> <span class="n">the</span> <span class="k">last</span> <span class="mi">26</span> <span class="n">seconds</span>
<span class="c1">-----------------
</span><span class="c1"></span><span class="n">BACKGROUND</span> <span class="n">THREAD</span>
<span class="c1">-----------------
</span><span class="c1"></span><span class="n">srv_master_thread</span> <span class="n">loops</span><span class="p">:</span> <span class="mi">521</span> <span class="n">srv_active</span><span class="p">,</span> <span class="mi">0</span> <span class="n">srv_shutdown</span><span class="p">,</span> <span class="mi">3098384</span> <span class="n">srv_idle</span>
<span class="n">srv_master_thread</span> <span class="n">log</span> <span class="n">flush</span> <span class="k">and</span> <span class="n">writes</span><span class="p">:</span> <span class="mi">3098905</span>
<span class="c1">----------
</span><span class="c1"></span><span class="n">SEMAPHORES</span>
<span class="c1">----------
</span><span class="c1"></span><span class="n">OS</span> <span class="n">WAIT</span> <span class="nb">ARRAY</span> <span class="n">INFO</span><span class="p">:</span> <span class="n">reservation</span> <span class="k">count</span> <span class="mi">6262</span>
<span class="n">OS</span> <span class="n">WAIT</span> <span class="nb">ARRAY</span> <span class="n">INFO</span><span class="p">:</span> <span class="n">signal</span> <span class="k">count</span> <span class="mi">28687</span>
<span class="n">RW</span><span class="o">-</span><span class="n">shared</span> <span class="n">spins</span> <span class="mi">0</span><span class="p">,</span> <span class="n">rounds</span> <span class="mi">27977</span><span class="p">,</span> <span class="n">OS</span> <span class="n">waits</span> <span class="mi">2270</span>
<span class="n">RW</span><span class="o">-</span><span class="n">excl</span> <span class="n">spins</span> <span class="mi">0</span><span class="p">,</span> <span class="n">rounds</span> <span class="mi">159415</span><span class="p">,</span> <span class="n">OS</span> <span class="n">waits</span> <span class="mi">2170</span>
<span class="n">RW</span><span class="o">-</span><span class="n">sx</span> <span class="n">spins</span> <span class="mi">4327</span><span class="p">,</span> <span class="n">rounds</span> <span class="mi">34223</span><span class="p">,</span> <span class="n">OS</span> <span class="n">waits</span> <span class="mi">205</span>
<span class="n">Spin</span> <span class="n">rounds</span> <span class="n">per</span> <span class="n">wait</span><span class="p">:</span> <span class="mi">27977</span><span class="p">.</span><span class="mi">00</span> <span class="n">RW</span><span class="o">-</span><span class="n">shared</span><span class="p">,</span> <span class="mi">159415</span><span class="p">.</span><span class="mi">00</span> <span class="n">RW</span><span class="o">-</span><span class="n">excl</span><span class="p">,</span> <span class="mi">7</span><span class="p">.</span><span class="mi">91</span> <span class="n">RW</span><span class="o">-</span><span class="n">sx</span>
<span class="c1">-- 死锁信息
</span><span class="c1">------------------------
</span><span class="c1"></span><span class="n">LATEST</span> <span class="n">DETECTED</span> <span class="n">DEADLOCK</span>
<span class="c1">------------------------
</span><span class="c1"></span><span class="mi">2020</span><span class="o">-</span><span class="mi">07</span><span class="o">-</span><span class="mi">14</span> <span class="mi">12</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">34</span> <span class="mi">0</span><span class="n">x7fa8507f8700</span>
<span class="o">***</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="k">TRANSACTION</span><span class="p">:</span>
<span class="k">TRANSACTION</span> <span class="mi">3667</span><span class="p">,</span> <span class="n">ACTIVE</span> <span class="mi">7</span> <span class="n">sec</span> <span class="n">starting</span> <span class="k">index</span> <span class="k">read</span>
<span class="n">mysql</span> <span class="n">tables</span> <span class="k">in</span> <span class="n">use</span> <span class="mi">1</span><span class="p">,</span> <span class="n">locked</span> <span class="mi">1</span>
<span class="k">LOCK</span> <span class="n">WAIT</span> <span class="mi">2</span> <span class="k">lock</span> <span class="n">struct</span><span class="p">(</span><span class="n">s</span><span class="p">),</span> <span class="n">heap</span> <span class="k">size</span> <span class="mi">1136</span><span class="p">,</span> <span class="mi">1</span> <span class="k">row</span> <span class="k">lock</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
<span class="n">MySQL</span> <span class="n">thread</span> <span class="n">id</span> <span class="mi">73</span><span class="p">,</span> <span class="n">OS</span> <span class="n">thread</span> <span class="n">handle</span> <span class="mi">140361007904512</span><span class="p">,</span> <span class="n">query</span> <span class="n">id</span> <span class="mi">1776328</span> <span class="n">localhost</span> <span class="n">web</span> <span class="n">updating</span>
<span class="k">update</span> <span class="n">t</span> <span class="k">set</span> <span class="n">d</span><span class="o">=</span><span class="n">d</span><span class="o">+</span><span class="mi">1</span> <span class="k">where</span> <span class="k">c</span><span class="o">=</span><span class="mi">10</span>
<span class="o">***</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="n">WAITING</span> <span class="k">FOR</span> <span class="n">THIS</span> <span class="k">LOCK</span> <span class="k">TO</span> <span class="n">BE</span> <span class="k">GRANTED</span><span class="p">:</span>
<span class="n">RECORD</span> <span class="n">LOCKS</span> <span class="k">space</span> <span class="n">id</span> <span class="mi">43</span> <span class="n">page</span> <span class="k">no</span> <span class="mi">4</span> <span class="n">n</span> <span class="n">bits</span> <span class="mi">80</span> <span class="k">index</span> <span class="k">c</span> <span class="k">of</span> <span class="k">table</span> <span class="o">`</span><span class="n">web</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">t</span><span class="o">`</span> <span class="n">trx</span> <span class="n">id</span> <span class="mi">3667</span> <span class="n">lock_mode</span> <span class="n">X</span> <span class="n">waiting</span>
<span class="n">Record</span> <span class="k">lock</span><span class="p">,</span> <span class="n">heap</span> <span class="k">no</span> <span class="mi">4</span> <span class="n">PHYSICAL</span> <span class="n">RECORD</span><span class="p">:</span> <span class="n">n_fields</span> <span class="mi">2</span><span class="p">;</span> <span class="n">compact</span> <span class="n">format</span><span class="p">;</span> <span class="n">info</span> <span class="n">bits</span> <span class="mi">0</span>
 <span class="mi">0</span><span class="p">:</span> <span class="n">len</span> <span class="mi">4</span><span class="p">;</span> <span class="n">hex</span> <span class="mi">8000000</span><span class="n">a</span><span class="p">;</span> <span class="k">asc</span>     <span class="p">;;</span>
 <span class="mi">1</span><span class="p">:</span> <span class="n">len</span> <span class="mi">4</span><span class="p">;</span> <span class="n">hex</span> <span class="mi">8000000</span><span class="n">a</span><span class="p">;</span> <span class="k">asc</span>     <span class="p">;;</span>

<span class="o">***</span> <span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="k">TRANSACTION</span><span class="p">:</span>
<span class="k">TRANSACTION</span> <span class="mi">3668</span><span class="p">,</span> <span class="n">ACTIVE</span> <span class="mi">12</span> <span class="n">sec</span> <span class="n">inserting</span>
<span class="n">mysql</span> <span class="n">tables</span> <span class="k">in</span> <span class="n">use</span> <span class="mi">1</span><span class="p">,</span> <span class="n">locked</span> <span class="mi">1</span>
<span class="mi">5</span> <span class="k">lock</span> <span class="n">struct</span><span class="p">(</span><span class="n">s</span><span class="p">),</span> <span class="n">heap</span> <span class="k">size</span> <span class="mi">1136</span><span class="p">,</span> <span class="mi">3</span> <span class="k">row</span> <span class="k">lock</span><span class="p">(</span><span class="n">s</span><span class="p">),</span> <span class="n">undo</span> <span class="n">log</span> <span class="n">entries</span> <span class="mi">1</span>
<span class="n">MySQL</span> <span class="n">thread</span> <span class="n">id</span> <span class="mi">72</span><span class="p">,</span> <span class="n">OS</span> <span class="n">thread</span> <span class="n">handle</span> <span class="mi">140360881768192</span><span class="p">,</span> <span class="n">query</span> <span class="n">id</span> <span class="mi">1776329</span> <span class="n">localhost</span> <span class="n">web</span> <span class="k">update</span>
<span class="k">insert</span> <span class="k">into</span> <span class="n">t</span> <span class="k">values</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">8</span><span class="p">)</span>
<span class="o">***</span> <span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="n">HOLDS</span> <span class="n">THE</span> <span class="k">LOCK</span><span class="p">(</span><span class="n">S</span><span class="p">):</span>
<span class="n">RECORD</span> <span class="n">LOCKS</span> <span class="k">space</span> <span class="n">id</span> <span class="mi">43</span> <span class="n">page</span> <span class="k">no</span> <span class="mi">4</span> <span class="n">n</span> <span class="n">bits</span> <span class="mi">80</span> <span class="k">index</span> <span class="k">c</span> <span class="k">of</span> <span class="k">table</span> <span class="o">`</span><span class="n">web</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">t</span><span class="o">`</span> <span class="n">trx</span> <span class="n">id</span> <span class="mi">3668</span> <span class="k">lock</span> <span class="k">mode</span> <span class="n">S</span>
<span class="n">Record</span> <span class="k">lock</span><span class="p">,</span> <span class="n">heap</span> <span class="k">no</span> <span class="mi">4</span> <span class="n">PHYSICAL</span> <span class="n">RECORD</span><span class="p">:</span> <span class="n">n_fields</span> <span class="mi">2</span><span class="p">;</span> <span class="n">compact</span> <span class="n">format</span><span class="p">;</span> <span class="n">info</span> <span class="n">bits</span> <span class="mi">0</span>
 <span class="mi">0</span><span class="p">:</span> <span class="n">len</span> <span class="mi">4</span><span class="p">;</span> <span class="n">hex</span> <span class="mi">8000000</span><span class="n">a</span><span class="p">;</span> <span class="k">asc</span>     <span class="p">;;</span>
 <span class="mi">1</span><span class="p">:</span> <span class="n">len</span> <span class="mi">4</span><span class="p">;</span> <span class="n">hex</span> <span class="mi">8000000</span><span class="n">a</span><span class="p">;</span> <span class="k">asc</span>     <span class="p">;;</span>

<span class="o">***</span> <span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="n">WAITING</span> <span class="k">FOR</span> <span class="n">THIS</span> <span class="k">LOCK</span> <span class="k">TO</span> <span class="n">BE</span> <span class="k">GRANTED</span><span class="p">:</span>
<span class="n">RECORD</span> <span class="n">LOCKS</span> <span class="k">space</span> <span class="n">id</span> <span class="mi">43</span> <span class="n">page</span> <span class="k">no</span> <span class="mi">4</span> <span class="n">n</span> <span class="n">bits</span> <span class="mi">80</span> <span class="k">index</span> <span class="k">c</span> <span class="k">of</span> <span class="k">table</span> <span class="o">`</span><span class="n">web</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">t</span><span class="o">`</span> <span class="n">trx</span> <span class="n">id</span> <span class="mi">3668</span> <span class="n">lock_mode</span> <span class="n">X</span> <span class="n">locks</span> <span class="n">gap</span> <span class="k">before</span> <span class="n">rec</span> <span class="k">insert</span> <span class="n">intention</span> <span class="n">waiting</span>
<span class="n">Record</span> <span class="k">lock</span><span class="p">,</span> <span class="n">heap</span> <span class="k">no</span> <span class="mi">4</span> <span class="n">PHYSICAL</span> <span class="n">RECORD</span><span class="p">:</span> <span class="n">n_fields</span> <span class="mi">2</span><span class="p">;</span> <span class="n">compact</span> <span class="n">format</span><span class="p">;</span> <span class="n">info</span> <span class="n">bits</span> <span class="mi">0</span>
 <span class="mi">0</span><span class="p">:</span> <span class="n">len</span> <span class="mi">4</span><span class="p">;</span> <span class="n">hex</span> <span class="mi">8000000</span><span class="n">a</span><span class="p">;</span> <span class="k">asc</span>     <span class="p">;;</span>
 <span class="mi">1</span><span class="p">:</span> <span class="n">len</span> <span class="mi">4</span><span class="p">;</span> <span class="n">hex</span> <span class="mi">8000000</span><span class="n">a</span><span class="p">;</span> <span class="k">asc</span>     <span class="p">;;</span>

<span class="o">***</span> <span class="n">WE</span> <span class="n">ROLL</span> <span class="n">BACK</span> <span class="k">TRANSACTION</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div><h3 id="锁等待分析">锁等待分析</h3>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="c1">-- session A,开启事务,在di=1加行锁.
</span><span class="c1"></span><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">begin</span><span class="p">;</span>
<span class="n">Query</span> <span class="n">OK</span><span class="p">,</span> <span class="mi">0</span> <span class="k">rows</span> <span class="n">affected</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>

<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">update</span> <span class="n">t2</span> <span class="k">set</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">2</span> <span class="k">where</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="n">Query</span> <span class="n">OK</span><span class="p">,</span> <span class="mi">1</span> <span class="k">row</span> <span class="n">affected</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
<span class="k">Rows</span> <span class="n">matched</span><span class="p">:</span> <span class="mi">1</span>  <span class="n">Changed</span><span class="p">:</span> <span class="mi">1</span>  <span class="n">Warnings</span><span class="p">:</span> <span class="mi">0</span>

<span class="c1">-- session B(block),等待session A的锁.
</span><span class="c1"></span><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">t2</span> <span class="k">where</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">1</span> <span class="k">lock</span> <span class="k">in</span> <span class="k">share</span> <span class="k">mode</span><span class="p">;</span>

<span class="c1">-- session C,查看阻塞情况.
</span><span class="c1"></span><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">show</span> <span class="n">processlist</span><span class="p">;</span>
<span class="o">+</span><span class="c1">----+------+-----------+------+---------+------+------------+--------------------------------------------------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">Id</span> <span class="o">|</span> <span class="k">User</span> <span class="o">|</span> <span class="k">Host</span>      <span class="o">|</span> <span class="n">db</span>   <span class="o">|</span> <span class="n">Command</span> <span class="o">|</span> <span class="n">Time</span> <span class="o">|</span> <span class="k">State</span>      <span class="o">|</span> <span class="n">Info</span>                                             <span class="o">|</span>
<span class="o">+</span><span class="c1">----+------+-----------+------+---------+------+------------+--------------------------------------------------+
</span><span class="c1"></span><span class="o">|</span> <span class="mi">68</span> <span class="o">|</span> <span class="n">web</span>  <span class="o">|</span> <span class="n">localhost</span> <span class="o">|</span> <span class="n">web</span>  <span class="o">|</span> <span class="n">Sleep</span>   <span class="o">|</span>  <span class="mi">104</span> <span class="o">|</span>            <span class="o">|</span> <span class="k">NULL</span>                                             <span class="o">|</span>
<span class="o">|</span> <span class="mi">69</span> <span class="o">|</span> <span class="n">web</span>  <span class="o">|</span> <span class="n">localhost</span> <span class="o">|</span> <span class="n">web</span>  <span class="o">|</span> <span class="n">Query</span>   <span class="o">|</span>   <span class="mi">20</span> <span class="o">|</span> <span class="k">statistics</span> <span class="o">|</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">t2</span> <span class="k">where</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">1</span> <span class="k">lock</span> <span class="k">in</span> <span class="k">share</span> <span class="k">mode</span> <span class="o">|</span>
<span class="o">|</span> <span class="mi">70</span> <span class="o">|</span> <span class="n">web</span>  <span class="o">|</span> <span class="n">localhost</span> <span class="o">|</span> <span class="n">web</span>  <span class="o">|</span> <span class="n">Query</span>   <span class="o">|</span>    <span class="mi">0</span> <span class="o">|</span> <span class="n">starting</span>   <span class="o">|</span> <span class="k">show</span> <span class="n">processlist</span>                                 <span class="o">|</span>
<span class="o">|</span> <span class="mi">71</span> <span class="o">|</span> <span class="n">web</span>  <span class="o">|</span> <span class="n">localhost</span> <span class="o">|</span> <span class="n">web</span>  <span class="o">|</span> <span class="n">Sleep</span>   <span class="o">|</span> <span class="mi">3724</span> <span class="o">|</span>            <span class="o">|</span> <span class="k">NULL</span>                                             <span class="o">|</span>
<span class="o">+</span><span class="c1">----+------+-----------+------+---------+------+------------+--------------------------------------------------+
</span><span class="c1"></span><span class="mi">4</span> <span class="k">rows</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>

<span class="c1">-- 从下面可以看出69在等待68的锁.
</span><span class="c1"></span><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">sys</span><span class="p">.</span><span class="n">innodb_lock_waits</span> <span class="k">where</span> <span class="n">locked_table</span><span class="o">=</span><span class="s1">&#39;`web`.`t2`&#39;</span><span class="err">\</span><span class="k">G</span>
<span class="o">***************************</span> <span class="mi">1</span><span class="p">.</span> <span class="k">row</span> <span class="o">***************************</span>
                <span class="n">wait_started</span><span class="p">:</span> <span class="mi">2020</span><span class="o">-</span><span class="mi">07</span><span class="o">-</span><span class="mi">13</span> <span class="mi">16</span><span class="p">:</span><span class="mi">37</span><span class="p">:</span><span class="mi">31</span>
                    <span class="n">wait_age</span><span class="p">:</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">02</span>
               <span class="n">wait_age_secs</span><span class="p">:</span> <span class="mi">2</span>
                <span class="n">locked_table</span><span class="p">:</span> <span class="o">`</span><span class="n">web</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">t2</span><span class="o">`</span>
                <span class="n">locked_index</span><span class="p">:</span> <span class="k">PRIMARY</span>
                 <span class="n">locked_type</span><span class="p">:</span> <span class="n">RECORD</span>
              <span class="n">waiting_trx_id</span><span class="p">:</span> <span class="mi">421836271774456</span>
         <span class="n">waiting_trx_started</span><span class="p">:</span> <span class="mi">2020</span><span class="o">-</span><span class="mi">07</span><span class="o">-</span><span class="mi">13</span> <span class="mi">16</span><span class="p">:</span><span class="mi">37</span><span class="p">:</span><span class="mi">31</span>
             <span class="n">waiting_trx_age</span><span class="p">:</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">02</span>
     <span class="n">waiting_trx_rows_locked</span><span class="p">:</span> <span class="mi">1</span>
   <span class="n">waiting_trx_rows_modified</span><span class="p">:</span> <span class="mi">0</span>
                 <span class="n">waiting_pid</span><span class="p">:</span> <span class="mi">69</span>
               <span class="n">waiting_query</span><span class="p">:</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">t2</span> <span class="k">where</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">1</span> <span class="k">lock</span> <span class="k">in</span> <span class="k">share</span> <span class="k">mode</span>
             <span class="n">waiting_lock_id</span><span class="p">:</span> <span class="mi">421836271774456</span><span class="p">:</span><span class="mi">33</span><span class="p">:</span><span class="mi">5</span><span class="p">:</span><span class="mi">2</span>
           <span class="n">waiting_lock_mode</span><span class="p">:</span> <span class="n">S</span>
             <span class="n">blocking_trx_id</span><span class="p">:</span> <span class="mi">3553</span>
                <span class="n">blocking_pid</span><span class="p">:</span> <span class="mi">68</span>
              <span class="n">blocking_query</span><span class="p">:</span> <span class="k">NULL</span>
            <span class="n">blocking_lock_id</span><span class="p">:</span> <span class="mi">3553</span><span class="p">:</span><span class="mi">33</span><span class="p">:</span><span class="mi">5</span><span class="p">:</span><span class="mi">2</span>
          <span class="n">blocking_lock_mode</span><span class="p">:</span> <span class="n">X</span>
        <span class="n">blocking_trx_started</span><span class="p">:</span> <span class="mi">2020</span><span class="o">-</span><span class="mi">07</span><span class="o">-</span><span class="mi">13</span> <span class="mi">16</span><span class="p">:</span><span class="mi">36</span><span class="p">:</span><span class="mi">07</span>
            <span class="n">blocking_trx_age</span><span class="p">:</span> <span class="mi">00</span><span class="p">:</span><span class="mi">01</span><span class="p">:</span><span class="mi">26</span>
    <span class="n">blocking_trx_rows_locked</span><span class="p">:</span> <span class="mi">1</span>
  <span class="n">blocking_trx_rows_modified</span><span class="p">:</span> <span class="mi">1</span>
     <span class="n">sql_kill_blocking_query</span><span class="p">:</span> <span class="n">KILL</span> <span class="n">QUERY</span> <span class="mi">68</span>
<span class="n">sql_kill_blocking_connection</span><span class="p">:</span> <span class="n">KILL</span> <span class="mi">68</span>
<span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span><span class="p">,</span> <span class="mi">3</span> <span class="n">warnings</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">06</span> <span class="n">sec</span><span class="p">)</span>
</code></pre></div><p>在MySQL5.7及之后版本可以通过<code>sys.innodb_lock_waits</code>表获取锁占用情况.</p>
<h3 id="幻读">幻读</h3>
<h4 id="什么是幻读">什么是幻读?</h4>
<ol>
<li>在一个事务内,前后看到的数据不一致,不一致特指后面看到的数据行数多了,这就是幻读(幻读特指新插入的行).</li>
<li>在读已提交隔离级别下,是允许存在幻读现象的.</li>
<li>在可重复读隔离级别下,MySQL是不存在幻读现象的.</li>
<li>在可重复读隔离级别下,普通的查询都是快照读,是不能看到别的事务插入的数据,因此必须是针对当前读的语句.</li>
</ol>
<h4 id="幻读有什么问题">幻读有什么问题?</h4>
<p>在可重复隔离级别下,如果允许幻读会出现什么现象?</p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="c1">-- 隔离级别为可重复读.
</span><span class="c1"></span><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">select</span> <span class="o">@@</span><span class="n">transaction_isolation</span><span class="p">;</span>
<span class="o">+</span><span class="c1">-------------------------+
</span><span class="c1"></span><span class="o">|</span> <span class="o">@@</span><span class="n">transaction_isolation</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">-------------------------+
</span><span class="c1"></span><span class="o">|</span> <span class="k">REPEATABLE</span><span class="o">-</span><span class="k">READ</span>         <span class="o">|</span>
<span class="o">+</span><span class="c1">-------------------------+
</span><span class="c1"></span><span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>

<span class="c1">-- session A
</span><span class="c1"></span><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">begin</span><span class="p">;</span>
<span class="n">Query</span> <span class="n">OK</span><span class="p">,</span> <span class="mi">0</span> <span class="k">rows</span> <span class="n">affected</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>

<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">update</span> <span class="n">t2</span> <span class="k">set</span> <span class="n">b</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="mi">1</span> <span class="k">where</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
<span class="n">Query</span> <span class="n">OK</span><span class="p">,</span> <span class="mi">1</span> <span class="k">row</span> <span class="n">affected</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
<span class="k">Rows</span> <span class="n">matched</span><span class="p">:</span> <span class="mi">1</span>  <span class="n">Changed</span><span class="p">:</span> <span class="mi">1</span>  <span class="n">Warnings</span><span class="p">:</span> <span class="mi">0</span>

<span class="c1">-- session B,假定此处不会block
</span><span class="c1"></span><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">insert</span> <span class="k">into</span> <span class="n">t2</span> <span class="k">values</span><span class="p">(</span><span class="mi">1002</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">1002</span><span class="p">);</span>

<span class="c1">-- session A,提交事务
</span><span class="c1"></span><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">commit</span><span class="p">;</span>
<span class="n">Query</span> <span class="n">OK</span><span class="p">,</span> <span class="mi">0</span> <span class="k">rows</span> <span class="n">affected</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">01</span> <span class="n">sec</span><span class="p">)</span>
</code></pre></div><p>如上所示的流程,假如session A只是对a=4这行加了行锁.</p>
<p>session B的事务是先提交,session A的事务是后提交.此时数据库的数据为(4, 4, 5)和(1002, 4, 1002).但在binlog中先是session B的操作,然后是session A的操作,该binlog同步到从库上开始执行,会得到什么结果?</p>
<p>session B先执行,插入一行数据(1002, 4, 1002),然后更新a=4的行,从库的数据为(4, 4, 5)和(1002, 4, 5),此时主库和从库的数据不一致了.</p>
<p>session A本来是想更新所有a=4的行的,但在这之后session B插入了一行a=4的数据,导致session A的语义被破坏了.</p>
<p><em><strong>主从数据不一致和语义被破坏,这就是幻读的问题.</strong></em></p>
<p>实际上InnoDB在可重复读级别下是不会出现幻读的现象的,上面的sql语句,session B的<code>insert</code>操作会被阻塞,直到session A的事务提交后才能执行.</p>
<h4 id="如何解决幻读">如何解决幻读?</h4>
<p>通过上例,只是加行锁,无法阻止幻读的出现.InnoDB是通过加间隙锁(Gap Lock),来锁住a=4的间隙,这样可以阻塞别的线程的插入操作.</p>
<p>间隙锁,锁的就是两个值之间的间隙,以上例session A来说,会锁住(3, 4)和(4, 5)的间隙.这样再插入session B的数据,会落入到(4, 5)间隙,导致被阻塞.</p>
<p>间隙锁一般是针对可重复隔离级别的.读已提交一般情况下只有行锁(说明该隔离级别会出现幻读的现象).</p>
<p>间隙锁的引入会导致锁的范围变大,这样其实会影响并发度的.</p>
<p><em><strong>需要注意,间隙锁之间是不互斥的,不同的session之间可以锁住同样的间隙</strong></em></p>
<h4 id="next-key-lock">Next-key lock</h4>
<p>行锁+间隙锁合称为next-key lock,每个next-key lock都是前开后闭区间.</p>
<h3 id="innodb加锁规则可重复读隔离级别">InnoDB加锁规则(可重复读隔离级别)</h3>
<ol>
<li>原则一: 加锁的基本单位是next-key lock,是前开后闭区间.</li>
<li>原则二: 查找过程中访问到的对象才会加锁.</li>
<li>优化一: 索引上的等值查询,给唯一索引加锁的时候,next-key lock会退化为行锁.</li>
<li>优化二: 索引上的等值查询,向右遍历时且最后一个值不满足等值条件的时候,next-key lock会退化为间隙锁.</li>
<li>bug一: 唯一索引上的范围查询会访问到不满足条件的第一个值为止.</li>
</ol>
<p>数据准备.</p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="c1">-- 创建表t.
</span><span class="c1"></span><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="o">`</span><span class="n">t</span><span class="o">`</span> <span class="p">(</span>
  <span class="o">`</span><span class="n">id</span><span class="o">`</span> <span class="nb">int</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="o">`</span><span class="k">c</span><span class="o">`</span> <span class="nb">int</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="k">DEFAULT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="o">`</span><span class="n">d</span><span class="o">`</span> <span class="nb">int</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="k">DEFAULT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="p">(</span><span class="o">`</span><span class="n">id</span><span class="o">`</span><span class="p">),</span>
  <span class="k">KEY</span> <span class="o">`</span><span class="k">c</span><span class="o">`</span> <span class="p">(</span><span class="o">`</span><span class="k">c</span><span class="o">`</span><span class="p">)</span>
<span class="p">)</span> <span class="n">ENGINE</span><span class="o">=</span><span class="n">InnoDB</span>

<span class="c1">-- 插入数据.
</span><span class="c1"></span><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">insert</span>  <span class="k">into</span> <span class="n">t</span> <span class="k">values</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">),(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">),(</span><span class="mi">15</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">15</span><span class="p">),(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">20</span><span class="p">),(</span><span class="mi">25</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">25</span><span class="p">);</span>
<span class="n">Query</span> <span class="n">OK</span><span class="p">,</span> <span class="mi">6</span> <span class="k">rows</span> <span class="n">affected</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
<span class="n">Records</span><span class="p">:</span> <span class="mi">6</span>  <span class="n">Duplicates</span><span class="p">:</span> <span class="mi">0</span>  <span class="n">Warnings</span><span class="p">:</span> <span class="mi">0</span>
</code></pre></div><h4 id="等值查询间隙锁">等值查询间隙锁</h4>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="c1">-- session A.
</span><span class="c1"></span><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">begin</span><span class="p">;</span>
<span class="n">Query</span> <span class="n">OK</span><span class="p">,</span> <span class="mi">0</span> <span class="k">rows</span> <span class="n">affected</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>

<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">update</span> <span class="n">t</span> <span class="k">set</span> <span class="n">d</span><span class="o">=</span><span class="n">d</span><span class="o">+</span><span class="mi">1</span> <span class="k">where</span> <span class="n">id</span><span class="o">=</span><span class="mi">7</span><span class="p">;</span>
<span class="n">Query</span> <span class="n">OK</span><span class="p">,</span> <span class="mi">0</span> <span class="k">rows</span> <span class="n">affected</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
<span class="k">Rows</span> <span class="n">matched</span><span class="p">:</span> <span class="mi">0</span>  <span class="n">Changed</span><span class="p">:</span> <span class="mi">0</span>  <span class="n">Warnings</span><span class="p">:</span> <span class="mi">0</span>

<span class="c1">-- session B(block).
</span><span class="c1"></span><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">insert</span> <span class="k">into</span> <span class="n">t</span> <span class="k">values</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">8</span><span class="p">);</span>

<span class="c1">-- session C.
</span><span class="c1"></span><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">update</span> <span class="n">t</span> <span class="k">set</span> <span class="n">d</span><span class="o">=</span><span class="n">d</span><span class="o">+</span><span class="mi">1</span> <span class="k">where</span> <span class="n">id</span><span class="o">=</span><span class="mi">10</span><span class="p">;</span>
<span class="n">Query</span> <span class="n">OK</span><span class="p">,</span> <span class="mi">1</span> <span class="k">row</span> <span class="n">affected</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
<span class="k">Rows</span> <span class="n">matched</span><span class="p">:</span> <span class="mi">1</span>  <span class="n">Changed</span><span class="p">:</span> <span class="mi">1</span>  <span class="n">Warnings</span><span class="p">:</span> <span class="mi">0</span>
</code></pre></div><ol>
<li>session A在主键索引上加锁,根据规则一加锁为(5, 10],根据优化二退化为间隙锁(5, 10)</li>
<li>session B要插入id=8,落在间隙锁(5, 10)之间,被阻塞.</li>
<li>session C更新id=10的行,根据规则一加锁为(5, 10],根据优化一退化为行锁(10),锁不冲突,可以更新成功.</li>
</ol>
<h4 id="非唯一索引等值锁">非唯一索引等值锁</h4>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="c1">-- session A
</span><span class="c1"></span><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">begin</span><span class="p">;</span>
<span class="n">Query</span> <span class="n">OK</span><span class="p">,</span> <span class="mi">0</span> <span class="k">rows</span> <span class="n">affected</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>

<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">select</span> <span class="n">id</span> <span class="k">from</span> <span class="n">t</span> <span class="k">where</span> <span class="k">c</span> <span class="o">=</span> <span class="mi">5</span> <span class="k">lock</span> <span class="k">in</span> <span class="k">share</span> <span class="k">mode</span><span class="p">;</span>
<span class="o">+</span><span class="c1">----+
</span><span class="c1"></span><span class="o">|</span> <span class="n">id</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----+
</span><span class="c1"></span><span class="o">|</span>  <span class="mi">5</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----+
</span><span class="c1"></span><span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>

<span class="c1">-- session B
</span><span class="c1"></span><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">update</span> <span class="n">t</span> <span class="k">set</span> <span class="n">d</span> <span class="o">=</span> <span class="n">d</span><span class="o">+</span><span class="mi">1</span> <span class="k">where</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
<span class="n">Query</span> <span class="n">OK</span><span class="p">,</span> <span class="mi">1</span> <span class="k">row</span> <span class="n">affected</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">02</span> <span class="n">sec</span><span class="p">)</span>
<span class="k">Rows</span> <span class="n">matched</span><span class="p">:</span> <span class="mi">1</span>  <span class="n">Changed</span><span class="p">:</span> <span class="mi">1</span>  <span class="n">Warnings</span><span class="p">:</span> <span class="mi">0</span>

<span class="c1">-- session C(block)
</span><span class="c1"></span><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">insert</span> <span class="k">into</span> <span class="n">t</span> <span class="k">values</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">7</span><span class="p">);</span>
</code></pre></div><ol>
<li>session A在索引c上加锁,根据规则一为(0, 5]和(5, 10],根据优化二退化为(0, 5]和(5, 10).注意该语句是使用了覆盖索引,所以并没有在主键索引上加锁.</li>
<li>session B是在主键索引上加锁,根据优化一退化为行锁(5),和session A并不冲突,可以更新成功.</li>
<li>session C要再索引c上插入c=7的行,落在了(5, 10)之间,被session A阻塞.</li>
</ol>
<p><strong>注意:语句中使用的是<code>lock in share mode</code>,是读锁且使用了覆盖索引,并不需要访问主键索引.但如果使用的是<code>for update</code>,又是什么效果列?</strong></p>
<h4 id="主键索引范围锁">主键索引范围锁</h4>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="c1">--session A
</span><span class="c1"></span><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">begin</span><span class="p">;</span>
<span class="n">Query</span> <span class="n">OK</span><span class="p">,</span> <span class="mi">0</span> <span class="k">rows</span> <span class="n">affected</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>

<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">t</span> <span class="k">where</span> <span class="n">id</span> <span class="o">&gt;=</span> <span class="mi">10</span> <span class="k">and</span> <span class="n">id</span> <span class="o">&lt;</span> <span class="mi">11</span> <span class="k">for</span> <span class="k">update</span><span class="p">;</span>
<span class="o">+</span><span class="c1">----+------+------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">id</span> <span class="o">|</span> <span class="k">c</span>    <span class="o">|</span> <span class="n">d</span>    <span class="o">|</span>
<span class="o">+</span><span class="c1">----+------+------+
</span><span class="c1"></span><span class="o">|</span> <span class="mi">10</span> <span class="o">|</span>   <span class="mi">10</span> <span class="o">|</span>   <span class="mi">10</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----+------+------+
</span><span class="c1"></span><span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">01</span> <span class="n">sec</span><span class="p">)</span>

<span class="c1">--session B
</span><span class="c1"></span><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">insert</span> <span class="k">into</span> <span class="n">t</span> <span class="k">values</span> <span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">8</span><span class="p">);</span>
<span class="n">Query</span> <span class="n">OK</span><span class="p">,</span> <span class="mi">1</span> <span class="k">row</span> <span class="n">affected</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>

<span class="c1">-- block
</span><span class="c1"></span><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">insert</span> <span class="k">into</span> <span class="n">t</span> <span class="k">values</span><span class="p">(</span><span class="mi">13</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">13</span><span class="p">);</span>

<span class="c1">--session C (block)
</span><span class="c1"></span><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">update</span> <span class="n">t</span> <span class="k">set</span> <span class="n">d</span><span class="o">=</span><span class="n">d</span><span class="o">+</span><span class="mi">1</span> <span class="k">where</span> <span class="n">id</span><span class="o">=</span><span class="mi">15</span><span class="p">;</span>
</code></pre></div><ol>
<li>session A在主键索引上加锁,满足条件的第一行是id=10,则加锁(5, 10],但根据优化一退化为行锁(10);范围查询要继续查找,则加锁(10, 15],由于是范围查询没有适用的优化规则.故加锁范围为[10, 15]</li>
<li>session B第一条插入id=8,不在锁的范围,可以插入成功.第二条插入id=13,在锁的范围,被阻塞.</li>
<li>session C更新id=15的行,在锁的范围,被阻塞.</li>
</ol>
<h4 id="非唯一索引范围锁">非唯一索引范围锁</h4>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="c1">-- session A
</span><span class="c1"></span><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">begin</span><span class="p">;</span>
<span class="n">Query</span> <span class="n">OK</span><span class="p">,</span> <span class="mi">0</span> <span class="k">rows</span> <span class="n">affected</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>

<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">t</span> <span class="k">where</span> <span class="k">c</span><span class="o">&gt;=</span><span class="mi">10</span> <span class="k">and</span> <span class="k">c</span><span class="o">&lt;</span><span class="mi">11</span> <span class="k">for</span> <span class="k">update</span><span class="p">;</span>
<span class="o">+</span><span class="c1">----+------+------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">id</span> <span class="o">|</span> <span class="k">c</span>    <span class="o">|</span> <span class="n">d</span>    <span class="o">|</span>
<span class="o">+</span><span class="c1">----+------+------+
</span><span class="c1"></span><span class="o">|</span> <span class="mi">10</span> <span class="o">|</span>   <span class="mi">10</span> <span class="o">|</span>   <span class="mi">10</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----+------+------+
</span><span class="c1"></span><span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>

<span class="c1">-- session B(block)
</span><span class="c1"></span><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">insert</span> <span class="k">into</span> <span class="n">t</span> <span class="k">values</span> <span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">8</span><span class="p">);</span>

<span class="c1">-- session C(block)
</span><span class="c1"></span><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">update</span> <span class="n">t</span> <span class="k">set</span> <span class="n">d</span><span class="o">=</span><span class="n">d</span><span class="o">+</span><span class="mi">1</span> <span class="k">where</span> <span class="k">c</span><span class="o">=</span><span class="mi">15</span><span class="p">;</span>
</code></pre></div><ol>
<li>session A在索引c上加锁,满足条件的第一行是c=10,则加锁(5, 10],注意c是非唯一索引没有优化规则;范围查询要继续查找,则加锁(10, 15],由于是范围查询没有适用的优化规则.故加锁范围为(5, 15].</li>
<li>session B要插入c=8的行,在锁的范围内,被阻塞.</li>
<li>session C要更新c=15的行,在锁的范围内,被阻塞.</li>
</ol>
<h4 id="唯一索引范围bug">唯一索引范围bug</h4>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="c1">--session A
</span><span class="c1"></span><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">begin</span><span class="p">;</span>
<span class="n">Query</span> <span class="n">OK</span><span class="p">,</span> <span class="mi">0</span> <span class="k">rows</span> <span class="n">affected</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>

<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">t</span> <span class="k">where</span> <span class="n">id</span><span class="o">&gt;</span><span class="mi">10</span> <span class="k">and</span> <span class="n">id</span><span class="o">&lt;=</span><span class="mi">15</span> <span class="k">for</span> <span class="k">update</span><span class="p">;</span>
<span class="o">+</span><span class="c1">----+------+------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">id</span> <span class="o">|</span> <span class="k">c</span>    <span class="o">|</span> <span class="n">d</span>    <span class="o">|</span>
<span class="o">+</span><span class="c1">----+------+------+
</span><span class="c1"></span><span class="o">|</span> <span class="mi">15</span> <span class="o">|</span>   <span class="mi">15</span> <span class="o">|</span>   <span class="mi">15</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----+------+------+
</span><span class="c1"></span><span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>

<span class="c1">--session B(block)
</span><span class="c1"></span><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">update</span> <span class="n">t</span> <span class="k">set</span> <span class="n">d</span><span class="o">=</span><span class="n">d</span><span class="o">+</span><span class="mi">1</span> <span class="k">where</span> <span class="n">id</span><span class="o">=</span><span class="mi">20</span><span class="p">;</span>

<span class="c1">--session C(block)
</span><span class="c1"></span><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">insert</span> <span class="k">into</span> <span class="n">t</span> <span class="k">values</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">16</span><span class="p">);</span>
</code></pre></div><ol>
<li>session A在主键索引上加锁,按照原则一,加锁(10, 15],但InnoDB会扫描到第一个不满足条件的行为止,这里也就是id=20，由于是范围扫描,所以还会加锁(15, 20].但(15, 20]是完全没必要的,可以认为是bug.</li>
<li>session B要更新id=20的行,在锁的范围内,被阻塞.</li>
<li>session C要插入id=16的行,在锁的范围内,被阻塞.</li>
</ol>
<h4 id="非唯一索引上存在相同键">非唯一索引上存在相同键</h4>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="c1">-- 插入新行,c=10的有两行数据.
</span><span class="c1"></span><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">insert</span> <span class="k">into</span> <span class="n">t</span> <span class="k">values</span><span class="p">(</span><span class="mi">30</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">30</span><span class="p">);</span>
<span class="n">Query</span> <span class="n">OK</span><span class="p">,</span> <span class="mi">1</span> <span class="k">row</span> <span class="n">affected</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>

<span class="c1">-- 可以看到索引c的顺序.
</span><span class="c1"></span><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">t</span> <span class="k">order</span> <span class="k">by</span> <span class="k">c</span><span class="p">;</span>
<span class="o">+</span><span class="c1">----+------+------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">id</span> <span class="o">|</span> <span class="k">c</span>    <span class="o">|</span> <span class="n">d</span>    <span class="o">|</span>
<span class="o">+</span><span class="c1">----+------+------+
</span><span class="c1"></span><span class="o">|</span>  <span class="mi">0</span> <span class="o">|</span>    <span class="mi">0</span> <span class="o">|</span>    <span class="mi">0</span> <span class="o">|</span>
<span class="o">|</span>  <span class="mi">5</span> <span class="o">|</span>    <span class="mi">5</span> <span class="o">|</span>    <span class="mi">5</span> <span class="o">|</span>
<span class="o">|</span> <span class="mi">10</span> <span class="o">|</span>   <span class="mi">10</span> <span class="o">|</span>   <span class="mi">10</span> <span class="o">|</span>
<span class="o">|</span> <span class="mi">30</span> <span class="o">|</span>   <span class="mi">10</span> <span class="o">|</span>   <span class="mi">30</span> <span class="o">|</span>
<span class="o">|</span> <span class="mi">15</span> <span class="o">|</span>   <span class="mi">15</span> <span class="o">|</span>   <span class="mi">15</span> <span class="o">|</span>
<span class="o">|</span> <span class="mi">20</span> <span class="o">|</span>   <span class="mi">20</span> <span class="o">|</span>   <span class="mi">20</span> <span class="o">|</span>
<span class="o">|</span> <span class="mi">25</span> <span class="o">|</span>   <span class="mi">25</span> <span class="o">|</span>   <span class="mi">25</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----+------+------+
</span><span class="c1"></span><span class="mi">7</span> <span class="k">rows</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">01</span> <span class="n">sec</span><span class="p">)</span>

<span class="c1">--session A
</span><span class="c1"></span><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">begin</span><span class="p">;</span>
<span class="n">Query</span> <span class="n">OK</span><span class="p">,</span> <span class="mi">0</span> <span class="k">rows</span> <span class="n">affected</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>

<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">delete</span> <span class="k">from</span> <span class="n">t</span> <span class="k">where</span> <span class="k">c</span><span class="o">=</span><span class="mi">10</span><span class="p">;</span>
<span class="n">Query</span> <span class="n">OK</span><span class="p">,</span> <span class="mi">2</span> <span class="k">rows</span> <span class="n">affected</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>

<span class="c1">--session B(block)
</span><span class="c1"></span><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">insert</span> <span class="k">into</span> <span class="n">t</span> <span class="k">values</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">12</span><span class="p">);</span>

<span class="c1">--session C
</span><span class="c1"></span><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">update</span> <span class="n">t</span> <span class="k">set</span> <span class="n">d</span><span class="o">=</span><span class="n">d</span><span class="o">+</span><span class="mi">1</span> <span class="k">where</span> <span class="k">c</span><span class="o">=</span><span class="mi">15</span><span class="p">;</span>
<span class="n">Query</span> <span class="n">OK</span><span class="p">,</span> <span class="mi">1</span> <span class="k">row</span> <span class="n">affected</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">01</span> <span class="n">sec</span><span class="p">)</span>
<span class="k">Rows</span> <span class="n">matched</span><span class="p">:</span> <span class="mi">1</span>  <span class="n">Changed</span><span class="p">:</span> <span class="mi">1</span>  <span class="n">Warnings</span><span class="p">:</span> <span class="mi">0</span>
</code></pre></div><ol>
<li>session A是在索引c上加锁,满足条件的第一行为(id=10,c=10),则加锁((id=5,c=5),(id=10,c=10)],非唯一索引没有优化规则.第一行为(id=30,c=10),则加锁((id=10,c=10),(id=30,c=10)],继续查找到(id=15,c=15)结束,根据优化规则二,退化为间隙锁((id=30,c=10),(id=15,c=15))</li>
<li>session B插入c=12的行,在锁的范围内,被阻塞.</li>
<li>session C更新c=15的行,不再锁的范围内,可正常更新.</li>
</ol>
<h4 id="limit语句加锁">limit语句加锁</h4>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="c1">--session A
</span><span class="c1"></span><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">begin</span><span class="p">;</span>
<span class="n">Query</span> <span class="n">OK</span><span class="p">,</span> <span class="mi">0</span> <span class="k">rows</span> <span class="n">affected</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>

<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">delete</span> <span class="k">from</span> <span class="n">t</span> <span class="k">where</span> <span class="k">c</span><span class="o">=</span><span class="mi">10</span> <span class="k">limit</span> <span class="mi">2</span><span class="p">;</span>
<span class="n">Query</span> <span class="n">OK</span><span class="p">,</span> <span class="mi">2</span> <span class="k">rows</span> <span class="n">affected</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>

<span class="c1">--session B(正常)
</span><span class="c1"></span><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">insert</span> <span class="k">into</span> <span class="n">t</span> <span class="k">values</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">12</span><span class="p">);</span>
<span class="n">Query</span> <span class="n">OK</span><span class="p">,</span> <span class="mi">1</span> <span class="k">row</span> <span class="n">affected</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">02</span> <span class="n">sec</span><span class="p">)</span>
</code></pre></div><p>session A是在索引c上加锁,由于有<code>limit 2</code>在读取到满足条件的两行数据后就不会再继续查找,所以加锁范围相比上节的例子会变小,加锁范围为((id=5,c=5),(id=10,c=10)]和((id=10,c=10),(id=30,c=10)]
session B要插入c=12的行,不在加锁范围内,可正常插入.</p>
<p><strong>在不改变语义的前提下,删除数据的时候尽量加limit,可有效降低加锁范围</strong></p>
<h4 id="死锁">死锁</h4>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="c1">--session A
</span><span class="c1"></span><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">t</span><span class="p">;</span>
<span class="o">+</span><span class="c1">----+------+------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">id</span> <span class="o">|</span> <span class="k">c</span>    <span class="o">|</span> <span class="n">d</span>    <span class="o">|</span>
<span class="o">+</span><span class="c1">----+------+------+
</span><span class="c1"></span><span class="o">|</span>  <span class="mi">0</span> <span class="o">|</span>    <span class="mi">0</span> <span class="o">|</span>    <span class="mi">0</span> <span class="o">|</span>
<span class="o">|</span>  <span class="mi">5</span> <span class="o">|</span>    <span class="mi">5</span> <span class="o">|</span>    <span class="mi">5</span> <span class="o">|</span>
<span class="o">|</span> <span class="mi">10</span> <span class="o">|</span>   <span class="mi">10</span> <span class="o">|</span>   <span class="mi">10</span> <span class="o">|</span>
<span class="o">|</span> <span class="mi">15</span> <span class="o">|</span>   <span class="mi">15</span> <span class="o">|</span>   <span class="mi">15</span> <span class="o">|</span>
<span class="o">|</span> <span class="mi">20</span> <span class="o">|</span>   <span class="mi">20</span> <span class="o">|</span>   <span class="mi">20</span> <span class="o">|</span>
<span class="o">|</span> <span class="mi">25</span> <span class="o">|</span>   <span class="mi">25</span> <span class="o">|</span>   <span class="mi">25</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----+------+------+
</span><span class="c1"></span><span class="mi">6</span> <span class="k">rows</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>

<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">begin</span><span class="p">;</span>
<span class="n">Query</span> <span class="n">OK</span><span class="p">,</span> <span class="mi">0</span> <span class="k">rows</span> <span class="n">affected</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>

<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">select</span> <span class="n">id</span> <span class="k">from</span> <span class="n">t</span> <span class="k">where</span> <span class="k">c</span><span class="o">=</span><span class="mi">10</span> <span class="k">lock</span> <span class="k">in</span> <span class="k">share</span> <span class="k">mode</span><span class="p">;</span>
<span class="o">+</span><span class="c1">----+
</span><span class="c1"></span><span class="o">|</span> <span class="n">id</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----+
</span><span class="c1"></span><span class="o">|</span> <span class="mi">10</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----+
</span><span class="c1"></span><span class="mi">2</span> <span class="k">rows</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>

<span class="c1">--session B(block)
</span><span class="c1"></span><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">update</span> <span class="n">t</span> <span class="k">set</span> <span class="n">d</span><span class="o">=</span><span class="n">d</span><span class="o">+</span><span class="mi">1</span> <span class="k">where</span> <span class="k">c</span><span class="o">=</span><span class="mi">10</span><span class="p">;</span>

<span class="c1">--session A
</span><span class="c1"></span><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">insert</span> <span class="k">into</span> <span class="n">t</span> <span class="k">values</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">8</span><span class="p">);</span>
<span class="n">Query</span> <span class="n">OK</span><span class="p">,</span> <span class="mi">1</span> <span class="k">row</span> <span class="n">affected</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">12</span> <span class="n">sec</span><span class="p">)</span>

<span class="c1">--session B(死锁,回滚)
</span><span class="c1"></span><span class="n">ERROR</span> <span class="mi">1213</span> <span class="p">(</span><span class="mi">40001</span><span class="p">):</span> <span class="n">Deadlock</span> <span class="k">found</span> <span class="k">when</span> <span class="n">trying</span> <span class="k">to</span> <span class="k">get</span> <span class="k">lock</span><span class="p">;</span> <span class="n">try</span> <span class="n">restarting</span> <span class="k">transaction</span>
</code></pre></div><ol>
<li>首先session A的加锁范围为next-key lock(5, 10]和间隙锁(10, 15)</li>
<li>session B的update语句被阻塞,其加锁逻辑为:先加间隙锁(5, 10),然后是行锁(10).由于间隙锁之间是不冲突的,有冲突的是行锁(10),导致sesssion B的阻塞.</li>
<li>此时session A拥有(5, 10]和(10, 15)的锁,session B拥有(5, 10)的锁且在等待行锁(10).</li>
<li>最后session A插入c=8的新行,落在间隙(5, 10)中,该间隙锁session B也拥有导致阻塞.</li>
<li>此时会进行死锁检测,发现session B在等待session A的行锁,而session A又在等待session B的间隙锁,导致死锁.</li>
</ol>
<h4 id="order-by加锁">order by加锁</h4>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="c1">-- session A
</span><span class="c1"></span><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">begin</span><span class="p">;</span>
<span class="n">Query</span> <span class="n">OK</span><span class="p">,</span> <span class="mi">0</span> <span class="k">rows</span> <span class="n">affected</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>

<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">t</span> <span class="k">where</span> <span class="k">c</span><span class="o">&gt;=</span><span class="mi">15</span> <span class="k">and</span> <span class="k">c</span><span class="o">&lt;=</span><span class="mi">20</span> <span class="k">order</span> <span class="k">by</span> <span class="k">c</span> <span class="k">desc</span> <span class="k">lock</span> <span class="k">in</span> <span class="k">share</span> <span class="k">mode</span><span class="p">;</span>
<span class="o">+</span><span class="c1">----+------+------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">id</span> <span class="o">|</span> <span class="k">c</span>    <span class="o">|</span> <span class="n">d</span>    <span class="o">|</span>
<span class="o">+</span><span class="c1">----+------+------+
</span><span class="c1"></span><span class="o">|</span> <span class="mi">20</span> <span class="o">|</span>   <span class="mi">20</span> <span class="o">|</span>   <span class="mi">20</span> <span class="o">|</span>
<span class="o">|</span> <span class="mi">15</span> <span class="o">|</span>   <span class="mi">15</span> <span class="o">|</span>   <span class="mi">15</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----+------+------+
</span><span class="c1"></span><span class="mi">2</span> <span class="k">rows</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>

<span class="c1">-- session B(block)
</span><span class="c1"></span><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">insert</span> <span class="k">into</span> <span class="n">t</span> <span class="k">values</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>
</code></pre></div><ol>
<li>session A由于是倒序,第一个访问的是索引c上最右边的c=20的行,会加间隙锁(20, 25)和next-key lock(15, 20],继续遍历到c=10才会停下来,则next-key lock(5, 10].故整个锁的范围是索引c上的(5, 25),主键索引上id=15和id=20的两个行锁.</li>
<li>session B要插入c=6的行,落在了间隙锁(5, 25)中,所以被阻塞.</li>
</ol>
<h3 id="innodb加锁规则读已提交隔离级别">InnoDB加锁规则(读已提交隔离级别)</h3>
<ol>
<li>主要是行锁(只有在外键场景下会有间隙锁)</li>
<li>在语句执行过程中加的行锁,在语句执行完成后,就会把不满足条件的行的行锁释放掉,不需要等待事务提交.</li>
</ol>
<p>在读已提交下锁的范围更小,锁的时间更短.</p>
]]></content>
		</item>
		
		<item>
			<title>MySQL的join分析</title>
			<link>https://shenbaise9527.com/db/mysql%E4%B9%8Bjoin/</link>
			<pubDate>Tue, 24 Nov 2020 20:47:44 +0800</pubDate>
			
			<guid>https://shenbaise9527.com/db/mysql%E4%B9%8Bjoin/</guid>
			<description>问题 使用join时驱动表、被驱动表是如何选择的?影响因素有哪些? 如何优化? 数据准备 /*创建表*/ CREATE TABLE `t1` ( `id` int(11) NOT NULL, `a` int(11) DEFAULT NULL, `b` int(11) DEFAULT NULL, PRIMARY KEY (`id`), KEY `a` (`a`)</description>
			<content type="html"><![CDATA[<h2 id="问题">问题</h2>
<ol>
<li>使用join时驱动表、被驱动表是如何选择的?影响因素有哪些?</li>
<li>如何优化?</li>
</ol>
<h2 id="数据准备">数据准备</h2>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="cm">/*创建表*/</span>
<span class="k">CREATE</span> <span class="k">TABLE</span> <span class="o">`</span><span class="n">t1</span><span class="o">`</span> <span class="p">(</span>
  <span class="o">`</span><span class="n">id</span><span class="o">`</span> <span class="nb">int</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="o">`</span><span class="n">a</span><span class="o">`</span> <span class="nb">int</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="k">DEFAULT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="o">`</span><span class="n">b</span><span class="o">`</span> <span class="nb">int</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="k">DEFAULT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="p">(</span><span class="o">`</span><span class="n">id</span><span class="o">`</span><span class="p">),</span>
  <span class="k">KEY</span> <span class="o">`</span><span class="n">a</span><span class="o">`</span> <span class="p">(</span><span class="o">`</span><span class="n">a</span><span class="o">`</span><span class="p">)</span>
<span class="p">)</span> <span class="n">ENGINE</span><span class="o">=</span><span class="n">InnoDB</span><span class="p">;</span>

<span class="cm">/*创建存储过程*/</span>
<span class="k">delimiter</span> <span class="p">;;</span>
<span class="k">create</span> <span class="k">procedure</span> <span class="n">idata</span><span class="p">()</span>
<span class="k">begin</span>
    <span class="k">declare</span> <span class="n">i</span> <span class="nb">int</span><span class="p">;</span>
    <span class="k">set</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="n">while</span><span class="p">(</span><span class="n">i</span><span class="o">&lt;=</span><span class="mi">1000</span><span class="p">)</span> <span class="k">do</span>
        <span class="k">insert</span> <span class="k">into</span> <span class="n">t2</span> <span class="k">values</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
        <span class="k">set</span> <span class="n">i</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
    <span class="k">end</span> <span class="n">while</span><span class="p">;</span>
<span class="k">end</span><span class="p">;;</span>
<span class="k">delimiter</span> <span class="p">;</span>

<span class="cm">/*执行*/</span>
<span class="k">call</span> <span class="n">idata</span><span class="p">();</span>

<span class="cm">/*创建表t1*/</span>
<span class="k">create</span> <span class="k">table</span> <span class="n">t1</span> <span class="k">like</span> <span class="n">t2</span><span class="p">;</span>

<span class="cm">/*插入数据*/</span>
<span class="k">insert</span> <span class="k">into</span> <span class="n">t1</span> <span class="p">(</span><span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">t2</span> <span class="k">where</span> <span class="n">id</span> <span class="o">&lt;=</span> <span class="mi">100</span><span class="p">);</span>
</code></pre></div><h2 id="index-nested-loop-joinnlj">Index Nested-Loop Join(NLJ)</h2>
<p>join时能用上被驱动表的索引,称之为<code>Index Nested-Loop Join</code>,简称为NLJ</p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">explain</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">t1</span> <span class="k">join</span> <span class="n">t2</span> <span class="k">on</span> <span class="n">t1</span><span class="p">.</span><span class="n">a</span><span class="o">=</span><span class="n">t2</span><span class="p">.</span><span class="n">a</span><span class="p">;</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+------+---------------+------+---------+----------+------+----------+-------------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">id</span> <span class="o">|</span> <span class="n">select_type</span> <span class="o">|</span> <span class="k">table</span> <span class="o">|</span> <span class="n">partitions</span> <span class="o">|</span> <span class="k">type</span> <span class="o">|</span> <span class="n">possible_keys</span> <span class="o">|</span> <span class="k">key</span>  <span class="o">|</span> <span class="n">key_len</span> <span class="o">|</span> <span class="k">ref</span>      <span class="o">|</span> <span class="k">rows</span> <span class="o">|</span> <span class="n">filtered</span> <span class="o">|</span> <span class="n">Extra</span>       <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+------+---------------+------+---------+----------+------+----------+-------------+
</span><span class="c1"></span><span class="o">|</span>  <span class="mi">1</span> <span class="o">|</span> <span class="k">SIMPLE</span>      <span class="o">|</span> <span class="n">t1</span>    <span class="o">|</span> <span class="k">NULL</span>       <span class="o">|</span> <span class="k">ALL</span>  <span class="o">|</span> <span class="n">a</span>             <span class="o">|</span> <span class="k">NULL</span> <span class="o">|</span> <span class="k">NULL</span>    <span class="o">|</span> <span class="k">NULL</span>     <span class="o">|</span>  <span class="mi">100</span> <span class="o">|</span>   <span class="mi">100</span><span class="p">.</span><span class="mi">00</span> <span class="o">|</span> <span class="k">Using</span> <span class="k">where</span> <span class="o">|</span>
<span class="o">|</span>  <span class="mi">1</span> <span class="o">|</span> <span class="k">SIMPLE</span>      <span class="o">|</span> <span class="n">t2</span>    <span class="o">|</span> <span class="k">NULL</span>       <span class="o">|</span> <span class="k">ref</span>  <span class="o">|</span> <span class="n">a</span>             <span class="o">|</span> <span class="n">a</span>    <span class="o">|</span> <span class="mi">5</span>       <span class="o">|</span> <span class="n">web</span><span class="p">.</span><span class="n">t1</span><span class="p">.</span><span class="n">a</span> <span class="o">|</span>    <span class="mi">1</span> <span class="o">|</span>   <span class="mi">100</span><span class="p">.</span><span class="mi">00</span> <span class="o">|</span> <span class="k">NULL</span>        <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+------+---------------+------+---------+----------+------+----------+-------------+
</span><span class="c1"></span><span class="mi">2</span> <span class="k">rows</span> <span class="k">in</span> <span class="k">set</span><span class="p">,</span> <span class="mi">1</span> <span class="n">warning</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</code></pre></div><p>从上面的结果可以看出,驱动表是表<code>t1</code>,被驱动表是表<code>t2</code>.驱动表是全表扫描,而被驱动表是用的索引<code>a</code>.</p>
<p>语句执行过程是:</p>
<ol>
<li>从表<code>t1</code>中读入一行数据R.</li>
<li>从R取出字段<code>a</code>的值,去表<code>t2</code>里查找.</li>
<li>取出表<code>t2</code>中满足条件的行,跟R组成一行,作为结果集的一部分.</li>
<li>重复执行步骤1到3,直到表<code>t1</code>的末尾,循环结束.</li>
</ol>
<p>假定驱动表有N行,被驱动表有M行,每扫描一行驱动表,使用字段a的值去被驱动表的索引树a上查找,然后再回表到被驱动表的主键索引树,则被驱动表要扫描2*$log_2{M}$.则总的扫描行数为N+N*2*$log_2{M}$.显然N对扫描行数的影响更大,因此在这种情况下应该使用小表为驱动表.</p>
<p>但如果被驱动表没有索引列?</p>
<h2 id="block-nested-loop-joinbnl">Block Nested-Loop Join(BNL)</h2>
<p>join时被驱动表没有索引时,称之为<code>Block Nested-Loop Join</code>,简称为BNL</p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="cm">/*使用straight_join强行指定驱动表为t1*/</span>
<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">explain</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">t1</span> <span class="n">straight_join</span> <span class="n">t2</span> <span class="k">on</span> <span class="n">t1</span><span class="p">.</span><span class="n">a</span><span class="o">=</span><span class="n">t2</span><span class="p">.</span><span class="n">b</span><span class="p">;</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">id</span> <span class="o">|</span> <span class="n">select_type</span> <span class="o">|</span> <span class="k">table</span> <span class="o">|</span> <span class="n">partitions</span> <span class="o">|</span> <span class="k">type</span> <span class="o">|</span> <span class="n">possible_keys</span> <span class="o">|</span> <span class="k">key</span>  <span class="o">|</span> <span class="n">key_len</span> <span class="o">|</span> <span class="k">ref</span>  <span class="o">|</span> <span class="k">rows</span> <span class="o">|</span> <span class="n">filtered</span> <span class="o">|</span> <span class="n">Extra</span>                                              <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+
</span><span class="c1"></span><span class="o">|</span>  <span class="mi">1</span> <span class="o">|</span> <span class="k">SIMPLE</span>      <span class="o">|</span> <span class="n">t1</span>    <span class="o">|</span> <span class="k">NULL</span>       <span class="o">|</span> <span class="k">ALL</span>  <span class="o">|</span> <span class="n">a</span>             <span class="o">|</span> <span class="k">NULL</span> <span class="o">|</span> <span class="k">NULL</span>    <span class="o">|</span> <span class="k">NULL</span> <span class="o">|</span>  <span class="mi">100</span> <span class="o">|</span>   <span class="mi">100</span><span class="p">.</span><span class="mi">00</span> <span class="o">|</span> <span class="k">NULL</span>                                               <span class="o">|</span>
<span class="o">|</span>  <span class="mi">1</span> <span class="o">|</span> <span class="k">SIMPLE</span>      <span class="o">|</span> <span class="n">t2</span>    <span class="o">|</span> <span class="k">NULL</span>       <span class="o">|</span> <span class="k">ALL</span>  <span class="o">|</span> <span class="k">NULL</span>          <span class="o">|</span> <span class="k">NULL</span> <span class="o">|</span> <span class="k">NULL</span>    <span class="o">|</span> <span class="k">NULL</span> <span class="o">|</span> <span class="mi">1000</span> <span class="o">|</span>    <span class="mi">10</span><span class="p">.</span><span class="mi">00</span> <span class="o">|</span> <span class="k">Using</span> <span class="k">where</span><span class="p">;</span> <span class="k">Using</span> <span class="k">join</span> <span class="n">buffer</span> <span class="p">(</span><span class="n">Block</span> <span class="n">Nested</span> <span class="n">Loop</span><span class="p">)</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+
</span><span class="c1"></span><span class="mi">2</span> <span class="k">rows</span> <span class="k">in</span> <span class="k">set</span><span class="p">,</span> <span class="mi">1</span> <span class="n">warning</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</code></pre></div><p>从上面的Extra字段的值<code>Using join buffer (Block Nested Loop)</code>可以看出,采用的正是BNL.</p>
<p>语句执行过程是:</p>
<ol>
<li>把表<code>t1</code>的数据读入线程内存<code>join_buffer</code>中</li>
<li>扫描表<code>t2</code>,把每一行取出,跟<code>join_buffer</code>中的数据比对,满足<code>join</code>条件的,作为结果集的一部分.</li>
</ol>
<p>整个过程表<code>t1</code>和表<code>t2</code>都是全表扫描,扫描行数为1000+100=1100,由于<code>join_buffer</code>中的数据时无序的,对表<code>t2</code>里的每一行都要做100次判断,总判断次数为1000*100=10万次.判读次数是纯内存操作,相比读表会快上不少,整个过程就是扫描1100行+10万次内存操作.</p>
<p><em><strong>在这种情况下,不论选择哪个表为驱动表其实是没有差异的.</strong></em></p>
<p><code>join_buffer</code>的大小是由参数<code>join_buffer_size</code>来控制的,默认大小为256k.</p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">show</span> <span class="n">variables</span> <span class="k">like</span> <span class="s1">&#39;join%&#39;</span><span class="p">;</span>
<span class="o">+</span><span class="c1">------------------+--------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">Variable_name</span>    <span class="o">|</span> <span class="n">Value</span>  <span class="o">|</span>
<span class="o">+</span><span class="c1">------------------+--------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">join_buffer_size</span> <span class="o">|</span> <span class="mi">262144</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">------------------+--------+
</span><span class="c1"></span><span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">26</span> <span class="n">sec</span><span class="p">)</span>
</code></pre></div><p>如果表<code>t1</code>的数据量很大,导致<code>join_buffer</code>放不下了,整个过程又会是怎么样的?</p>
<p>策略很简单,就是分段放入,分次比较.详见<a href="https://dev.mysql.com/doc/internals/en/join-buffer-size.html">官网说明</a>
Basic information about the join buffer cache:</p>
<ul>
<li>The size of each join buffer is determined by the value of the join_buffer_size system variable.</li>
<li>This buffer is <strong>used only when the join is of type ALL or index (in other words, when no possible keys can be used)</strong>.</li>
<li>A join buffer is never allocated for the first non-const table, even if it would be of type ALL or index.</li>
<li>The buffer is allocated when we need to do a full join between two tables, and freed after the query is done.</li>
<li>Accepted row combinations of tables before the ALL/index are stored in the cache and are used to compare against each read row in the ALL table.</li>
<li>We only store the used columns in the join buffer, not the whole rows.</li>
</ul>
<p>Assume you have the following join:</p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">Table</span> <span class="n">name</span> <span class="k">Type</span>
<span class="n">t1</span>         <span class="n">range</span>
<span class="n">t2</span>         <span class="k">ref</span>
<span class="n">t3</span>         <span class="k">ALL</span>
</code></pre></div><p>The Join is then done as follows:</p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="o">-</span> <span class="n">While</span> <span class="k">rows</span> <span class="k">in</span> <span class="n">t1</span> <span class="n">matching</span> <span class="n">range</span>
 <span class="o">-</span> <span class="k">Read</span> <span class="n">through</span> <span class="k">all</span> <span class="k">rows</span> <span class="k">in</span> <span class="n">t2</span> <span class="n">according</span> <span class="k">to</span> <span class="n">reference</span> <span class="k">key</span>
  <span class="o">-</span> <span class="n">Store</span> <span class="n">used</span> <span class="n">fields</span> <span class="k">from</span> <span class="n">t1</span><span class="p">,</span> <span class="n">t2</span> <span class="k">in</span> <span class="k">cache</span>
  <span class="o">-</span> <span class="k">If</span> <span class="k">cache</span> <span class="k">is</span> <span class="k">full</span> 
    <span class="o">-</span> <span class="k">Read</span> <span class="n">through</span> <span class="k">all</span> <span class="k">rows</span> <span class="k">in</span> <span class="n">t3</span> 
      <span class="o">-</span> <span class="n">Compare</span> <span class="n">t3</span> <span class="k">row</span> <span class="n">against</span> <span class="k">all</span> <span class="n">t1</span><span class="p">,</span> <span class="n">t2</span> <span class="n">combinations</span> <span class="k">in</span> <span class="k">cache</span> 
        <span class="o">-</span> <span class="k">If</span> <span class="k">row</span> <span class="n">satisfies</span> <span class="k">join</span> <span class="n">condition</span><span class="p">,</span> <span class="n">send</span> <span class="n">it</span> <span class="k">to</span> <span class="n">client</span> 
    <span class="o">-</span> <span class="n">Empty</span> <span class="k">cache</span> 

<span class="o">-</span> <span class="k">Read</span> <span class="n">through</span> <span class="k">all</span> <span class="k">rows</span> <span class="k">in</span> <span class="n">t3</span>
 <span class="o">-</span> <span class="n">Compare</span> <span class="n">t3</span> <span class="k">row</span> <span class="n">against</span> <span class="k">all</span> <span class="n">stored</span> <span class="n">t1</span><span class="p">,</span> <span class="n">t2</span> <span class="n">combinations</span> <span class="k">in</span> <span class="k">cache</span>
   <span class="o">-</span> <span class="k">If</span> <span class="k">row</span> <span class="n">satisfies</span> <span class="k">join</span> <span class="n">condition</span><span class="p">,</span> <span class="n">send</span> <span class="n">it</span> <span class="k">to</span> <span class="n">client</span>
</code></pre></div><p>假设驱动表的行数是N,需要分K段才能完成算法流程,被驱动表数据行数是M.显然N越大,K就会越大,K=$\lambda$*N,$\lambda$取值范围为(0,1).此算法扫描的行数为N+$\lambda$*N*M,内存判断次数为N*M,在N和M确定的情况下,N小些,扫描行数的算式会更小些,可见此时应小表当驱动表.参数$\lambda$才是影响扫描行数的关键因素,这个值应该越小越好.在N固定时若<code>join_buffer_size</code>越大,能放入的行数越多,该值就会越小.</p>
<p>若join语句很慢,可尝试把<code>join_buffer_size</code>改大点.</p>
<p>以上两个join算法都应该尽量使用小表作为驱动表,但什么是小表列?</p>
<h2 id="什么是小表">什么是小表?</h2>
<p>先来看看两组sql语句</p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="cm">/*Q1,此时放入join_buffer的数据是100行*/</span>
<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">explain</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">t1</span> <span class="n">straight_join</span> <span class="n">t2</span> <span class="k">on</span> <span class="n">t1</span><span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="n">t2</span><span class="p">.</span><span class="n">b</span> <span class="k">where</span> <span class="n">t2</span><span class="p">.</span><span class="n">id</span><span class="o">&lt;=</span><span class="mi">50</span><span class="p">;</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+----------------------------------------------------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">id</span> <span class="o">|</span> <span class="n">select_type</span> <span class="o">|</span> <span class="k">table</span> <span class="o">|</span> <span class="n">partitions</span> <span class="o">|</span> <span class="k">type</span>  <span class="o">|</span> <span class="n">possible_keys</span> <span class="o">|</span> <span class="k">key</span>     <span class="o">|</span> <span class="n">key_len</span> <span class="o">|</span> <span class="k">ref</span>  <span class="o">|</span> <span class="k">rows</span> <span class="o">|</span> <span class="n">filtered</span> <span class="o">|</span> <span class="n">Extra</span>                                              <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+----------------------------------------------------+
</span><span class="c1"></span><span class="o">|</span>  <span class="mi">1</span> <span class="o">|</span> <span class="k">SIMPLE</span>      <span class="o">|</span> <span class="n">t1</span>    <span class="o">|</span> <span class="k">NULL</span>       <span class="o">|</span> <span class="k">ALL</span>   <span class="o">|</span> <span class="k">NULL</span>          <span class="o">|</span> <span class="k">NULL</span>    <span class="o">|</span> <span class="k">NULL</span>    <span class="o">|</span> <span class="k">NULL</span> <span class="o">|</span>  <span class="mi">100</span> <span class="o">|</span>   <span class="mi">100</span><span class="p">.</span><span class="mi">00</span> <span class="o">|</span> <span class="k">NULL</span>                                               <span class="o">|</span>
<span class="o">|</span>  <span class="mi">1</span> <span class="o">|</span> <span class="k">SIMPLE</span>      <span class="o">|</span> <span class="n">t2</span>    <span class="o">|</span> <span class="k">NULL</span>       <span class="o">|</span> <span class="n">range</span> <span class="o">|</span> <span class="k">PRIMARY</span>       <span class="o">|</span> <span class="k">PRIMARY</span> <span class="o">|</span> <span class="mi">4</span>       <span class="o">|</span> <span class="k">NULL</span> <span class="o">|</span>   <span class="mi">50</span> <span class="o">|</span>    <span class="mi">10</span><span class="p">.</span><span class="mi">00</span> <span class="o">|</span> <span class="k">Using</span> <span class="k">where</span><span class="p">;</span> <span class="k">Using</span> <span class="k">join</span> <span class="n">buffer</span> <span class="p">(</span><span class="n">Block</span> <span class="n">Nested</span> <span class="n">Loop</span><span class="p">)</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+----------------------------------------------------+
</span><span class="c1"></span><span class="mi">2</span> <span class="k">rows</span> <span class="k">in</span> <span class="k">set</span><span class="p">,</span> <span class="mi">1</span> <span class="n">warning</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">01</span> <span class="n">sec</span><span class="p">)</span>

<span class="cm">/*Q2,此时放入join_buffer的数据是50行*/</span>
<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">explain</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">t2</span> <span class="n">straight_join</span> <span class="n">t1</span> <span class="k">on</span> <span class="n">t1</span><span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="n">t2</span><span class="p">.</span><span class="n">b</span> <span class="k">where</span> <span class="n">t2</span><span class="p">.</span><span class="n">id</span><span class="o">&lt;=</span><span class="mi">50</span><span class="p">;</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+----------------------------------------------------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">id</span> <span class="o">|</span> <span class="n">select_type</span> <span class="o">|</span> <span class="k">table</span> <span class="o">|</span> <span class="n">partitions</span> <span class="o">|</span> <span class="k">type</span>  <span class="o">|</span> <span class="n">possible_keys</span> <span class="o">|</span> <span class="k">key</span>     <span class="o">|</span> <span class="n">key_len</span> <span class="o">|</span> <span class="k">ref</span>  <span class="o">|</span> <span class="k">rows</span> <span class="o">|</span> <span class="n">filtered</span> <span class="o">|</span> <span class="n">Extra</span>                                              <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+----------------------------------------------------+
</span><span class="c1"></span><span class="o">|</span>  <span class="mi">1</span> <span class="o">|</span> <span class="k">SIMPLE</span>      <span class="o">|</span> <span class="n">t2</span>    <span class="o">|</span> <span class="k">NULL</span>       <span class="o">|</span> <span class="n">range</span> <span class="o">|</span> <span class="k">PRIMARY</span>       <span class="o">|</span> <span class="k">PRIMARY</span> <span class="o">|</span> <span class="mi">4</span>       <span class="o">|</span> <span class="k">NULL</span> <span class="o">|</span>   <span class="mi">50</span> <span class="o">|</span>   <span class="mi">100</span><span class="p">.</span><span class="mi">00</span> <span class="o">|</span> <span class="k">Using</span> <span class="k">where</span>                                        <span class="o">|</span>
<span class="o">|</span>  <span class="mi">1</span> <span class="o">|</span> <span class="k">SIMPLE</span>      <span class="o">|</span> <span class="n">t1</span>    <span class="o">|</span> <span class="k">NULL</span>       <span class="o">|</span> <span class="k">ALL</span>   <span class="o">|</span> <span class="k">NULL</span>          <span class="o">|</span> <span class="k">NULL</span>    <span class="o">|</span> <span class="k">NULL</span>    <span class="o">|</span> <span class="k">NULL</span> <span class="o">|</span>  <span class="mi">100</span> <span class="o">|</span>    <span class="mi">10</span><span class="p">.</span><span class="mi">00</span> <span class="o">|</span> <span class="k">Using</span> <span class="k">where</span><span class="p">;</span> <span class="k">Using</span> <span class="k">join</span> <span class="n">buffer</span> <span class="p">(</span><span class="n">Block</span> <span class="n">Nested</span> <span class="n">Loop</span><span class="p">)</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+----------------------------------------------------+
</span><span class="c1"></span><span class="mi">2</span> <span class="k">rows</span> <span class="k">in</span> <span class="k">set</span><span class="p">,</span> <span class="mi">1</span> <span class="n">warning</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>

<span class="cm">/*Q3,此时放入join_buffer的数据是100行,但只需包含t1.b这一个字段*/</span>
<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">explain</span> <span class="k">select</span> <span class="n">t1</span><span class="p">.</span><span class="n">b</span><span class="p">,</span><span class="n">t2</span><span class="p">.</span><span class="o">*</span> <span class="k">from</span> <span class="n">t1</span> <span class="n">straight_join</span> <span class="n">t2</span> <span class="k">on</span> <span class="n">t1</span><span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="n">t2</span><span class="p">.</span><span class="n">b</span> <span class="k">where</span> <span class="n">t2</span><span class="p">.</span><span class="n">id</span><span class="o">&lt;=</span><span class="mi">100</span><span class="p">;</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+----------------------------------------------------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">id</span> <span class="o">|</span> <span class="n">select_type</span> <span class="o">|</span> <span class="k">table</span> <span class="o">|</span> <span class="n">partitions</span> <span class="o">|</span> <span class="k">type</span>  <span class="o">|</span> <span class="n">possible_keys</span> <span class="o">|</span> <span class="k">key</span>     <span class="o">|</span> <span class="n">key_len</span> <span class="o">|</span> <span class="k">ref</span>  <span class="o">|</span> <span class="k">rows</span> <span class="o">|</span> <span class="n">filtered</span> <span class="o">|</span> <span class="n">Extra</span>                                              <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+----------------------------------------------------+
</span><span class="c1"></span><span class="o">|</span>  <span class="mi">1</span> <span class="o">|</span> <span class="k">SIMPLE</span>      <span class="o">|</span> <span class="n">t1</span>    <span class="o">|</span> <span class="k">NULL</span>       <span class="o">|</span> <span class="k">ALL</span>   <span class="o">|</span> <span class="k">NULL</span>          <span class="o">|</span> <span class="k">NULL</span>    <span class="o">|</span> <span class="k">NULL</span>    <span class="o">|</span> <span class="k">NULL</span> <span class="o">|</span>  <span class="mi">100</span> <span class="o">|</span>   <span class="mi">100</span><span class="p">.</span><span class="mi">00</span> <span class="o">|</span> <span class="k">NULL</span>                                               <span class="o">|</span>
<span class="o">|</span>  <span class="mi">1</span> <span class="o">|</span> <span class="k">SIMPLE</span>      <span class="o">|</span> <span class="n">t2</span>    <span class="o">|</span> <span class="k">NULL</span>       <span class="o">|</span> <span class="n">range</span> <span class="o">|</span> <span class="k">PRIMARY</span>       <span class="o">|</span> <span class="k">PRIMARY</span> <span class="o">|</span> <span class="mi">4</span>       <span class="o">|</span> <span class="k">NULL</span> <span class="o">|</span>  <span class="mi">100</span> <span class="o">|</span>    <span class="mi">10</span><span class="p">.</span><span class="mi">00</span> <span class="o">|</span> <span class="k">Using</span> <span class="k">where</span><span class="p">;</span> <span class="k">Using</span> <span class="k">join</span> <span class="n">buffer</span> <span class="p">(</span><span class="n">Block</span> <span class="n">Nested</span> <span class="n">Loop</span><span class="p">)</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+----------------------------------------------------+
</span><span class="c1"></span><span class="mi">2</span> <span class="k">rows</span> <span class="k">in</span> <span class="k">set</span><span class="p">,</span> <span class="mi">1</span> <span class="n">warning</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>

<span class="cm">/*Q4,此时放入join_buffer的数据是100行,但需包含表t2的所有字段*/</span>
<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">explain</span> <span class="k">select</span> <span class="n">t1</span><span class="p">.</span><span class="n">b</span><span class="p">,</span><span class="n">t2</span><span class="p">.</span><span class="o">*</span> <span class="k">from</span> <span class="n">t2</span> <span class="n">straight_join</span> <span class="n">t1</span> <span class="k">on</span> <span class="n">t1</span><span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="n">t2</span><span class="p">.</span><span class="n">b</span> <span class="k">where</span> <span class="n">t2</span><span class="p">.</span><span class="n">id</span><span class="o">&lt;=</span><span class="mi">100</span><span class="p">;</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+----------------------------------------------------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">id</span> <span class="o">|</span> <span class="n">select_type</span> <span class="o">|</span> <span class="k">table</span> <span class="o">|</span> <span class="n">partitions</span> <span class="o">|</span> <span class="k">type</span>  <span class="o">|</span> <span class="n">possible_keys</span> <span class="o">|</span> <span class="k">key</span>     <span class="o">|</span> <span class="n">key_len</span> <span class="o">|</span> <span class="k">ref</span>  <span class="o">|</span> <span class="k">rows</span> <span class="o">|</span> <span class="n">filtered</span> <span class="o">|</span> <span class="n">Extra</span>                                              <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+----------------------------------------------------+
</span><span class="c1"></span><span class="o">|</span>  <span class="mi">1</span> <span class="o">|</span> <span class="k">SIMPLE</span>      <span class="o">|</span> <span class="n">t2</span>    <span class="o">|</span> <span class="k">NULL</span>       <span class="o">|</span> <span class="n">range</span> <span class="o">|</span> <span class="k">PRIMARY</span>       <span class="o">|</span> <span class="k">PRIMARY</span> <span class="o">|</span> <span class="mi">4</span>       <span class="o">|</span> <span class="k">NULL</span> <span class="o">|</span>  <span class="mi">100</span> <span class="o">|</span>   <span class="mi">100</span><span class="p">.</span><span class="mi">00</span> <span class="o">|</span> <span class="k">Using</span> <span class="k">where</span>                                        <span class="o">|</span>
<span class="o">|</span>  <span class="mi">1</span> <span class="o">|</span> <span class="k">SIMPLE</span>      <span class="o">|</span> <span class="n">t1</span>    <span class="o">|</span> <span class="k">NULL</span>       <span class="o">|</span> <span class="k">ALL</span>   <span class="o">|</span> <span class="k">NULL</span>          <span class="o">|</span> <span class="k">NULL</span>    <span class="o">|</span> <span class="k">NULL</span>    <span class="o">|</span> <span class="k">NULL</span> <span class="o">|</span>  <span class="mi">100</span> <span class="o">|</span>    <span class="mi">10</span><span class="p">.</span><span class="mi">00</span> <span class="o">|</span> <span class="k">Using</span> <span class="k">where</span><span class="p">;</span> <span class="k">Using</span> <span class="k">join</span> <span class="n">buffer</span> <span class="p">(</span><span class="n">Block</span> <span class="n">Nested</span> <span class="n">Loop</span><span class="p">)</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+----------------------------------------------------+
</span><span class="c1"></span><span class="mi">2</span> <span class="k">rows</span> <span class="k">in</span> <span class="k">set</span><span class="p">,</span> <span class="mi">1</span> <span class="n">warning</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</code></pre></div><ul>
<li>针对语句Q1和Q2来说,Q2放入<code>join_buffer</code>的数据只有50行,相对来说此时t2是小表,应该为驱动表.</li>
<li>针对语句Q3和Q4来说,放入<code>join_buffer</code>的行数是一样的,但Q3只需要放入表t1的一个字段,相对来说此时t1是小表,应该为驱动表.</li>
</ul>
<p><strong>在决定哪个表为驱动表时,应该要两个表按照各自的条件过滤,然后计算参与join的各个字段的总数据量,数据量小的那个表就是小表,应该为驱动表.</strong></p>
<h2 id="优化">优化</h2>
<h3 id="multi-range-readmrr优化">Multi-Range Read(MRR)优化</h3>
<p>MRR优化的主要目的是使用顺序读盘.</p>
<p>在查询过程中使用非主键索引时需要进行回表操作去主键索引树中获取相关字段的值.在非主键索引树中获取的主键ID不是有序的,当循环回表时会触发主键索引树的磁盘随机读取,而这是最耗时的操作.</p>
<p>而MRR优化过程:</p>
<ol>
<li>从非主键索引中把符合的主键ID先全部读取出来,放入<code>read_rnd_buffer</code>中</li>
<li>把<code>read_rnd_buffer</code>中的主键ID排序</li>
<li>根据排序后的主键ID去主键索引树中查找记录</li>
</ol>
<p><code>read_rnd_buffer</code>是由参数<code>read_rnd_buffer_size</code>控制的,默认为256k</p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">show</span> <span class="n">variables</span> <span class="k">like</span> <span class="s1">&#39;read_rnd%&#39;</span><span class="p">;</span>
<span class="o">+</span><span class="c1">----------------------+--------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">Variable_name</span>        <span class="o">|</span> <span class="n">Value</span>  <span class="o">|</span>
<span class="o">+</span><span class="c1">----------------------+--------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">read_rnd_buffer_size</span> <span class="o">|</span> <span class="mi">262144</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----------------------+--------+
</span><span class="c1"></span><span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">01</span> <span class="n">sec</span><span class="p">)</span>
</code></pre></div><p>当<code>read_rnd_buffer</code>满时,就会执行步骤2和3,然后清空<code>read_rnd_buffer</code>,之后继续找非主键索引的下个记录,并继续循环.</p>
<p>MRR能提升性能的核心在于,在非主键索引上是一个范围查询,可以有足够的主键ID,这样排序后,再去主键索引查找数据,才能体现出顺序性的优势.</p>
<p>若想稳定地使用MRR优化,需要设置<code>set optimizer_switch=&quot;mrr_cost_based=off&quot;</code>(官方文档:优化器在判断消耗时,会更倾向不使用MRR,把mrr_cost_based设置为off,就是固定使用MRR).</p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="cm">/*开启MRR*/</span>
<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">set</span> <span class="n">optimizer_switch</span><span class="o">=</span><span class="s2">&#34;mrr_cost_based=off&#34;</span><span class="p">;</span>
<span class="n">Query</span> <span class="n">OK</span><span class="p">,</span> <span class="mi">0</span> <span class="k">rows</span> <span class="n">affected</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>

<span class="cm">/*使用了MRR*/</span>
<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">explain</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">t2</span> <span class="k">where</span> <span class="n">a</span> <span class="o">&gt;=</span> <span class="mi">100</span> <span class="k">and</span> <span class="n">a</span> <span class="o">&lt;=</span> <span class="mi">200</span><span class="p">;</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+----------------------------------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">id</span> <span class="o">|</span> <span class="n">select_type</span> <span class="o">|</span> <span class="k">table</span> <span class="o">|</span> <span class="n">partitions</span> <span class="o">|</span> <span class="k">type</span>  <span class="o">|</span> <span class="n">possible_keys</span> <span class="o">|</span> <span class="k">key</span>  <span class="o">|</span> <span class="n">key_len</span> <span class="o">|</span> <span class="k">ref</span>  <span class="o">|</span> <span class="k">rows</span> <span class="o">|</span> <span class="n">filtered</span> <span class="o">|</span> <span class="n">Extra</span>                            <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+----------------------------------+
</span><span class="c1"></span><span class="o">|</span>  <span class="mi">1</span> <span class="o">|</span> <span class="k">SIMPLE</span>      <span class="o">|</span> <span class="n">t2</span>    <span class="o">|</span> <span class="k">NULL</span>       <span class="o">|</span> <span class="n">range</span> <span class="o">|</span> <span class="n">a</span>             <span class="o">|</span> <span class="n">a</span>    <span class="o">|</span> <span class="mi">5</span>       <span class="o">|</span> <span class="k">NULL</span> <span class="o">|</span>  <span class="mi">101</span> <span class="o">|</span>   <span class="mi">100</span><span class="p">.</span><span class="mi">00</span> <span class="o">|</span> <span class="k">Using</span> <span class="k">index</span> <span class="n">condition</span><span class="p">;</span> <span class="k">Using</span> <span class="n">MRR</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+----------------------------------+
</span><span class="c1"></span><span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span><span class="p">,</span> <span class="mi">1</span> <span class="n">warning</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">04</span> <span class="n">sec</span><span class="p">)</span>
</code></pre></div><p><em><strong>需要注意,当未使用MRR优化时,查询返回的记录是按照索引<code>a</code>来排序的,但使用了MRR优化时,返回的记录若<code>read_rnd_buffer</code>未满时是按照主键ID来排序的;若满记录就不是有序的了.</strong></em></p>
<h3 id="batched-key-accessbka">Batched Key Access(BKA)</h3>
<p>BKA算法是基于MRR对NLJ算法做的优化.</p>
<p>从驱动表中取出数据放入到<code>join_buffer</code>中,然后按照被驱动表的索引键排序,顺序去被驱动表查找相关数据.相比于NLJ的过程,BKA使用了MRR优化的思路,在被驱动表中是顺序读取,避免随机读取.</p>
<p>要启用BKA,需要设置参数.</p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="cm">/*启动BKA,要先启动MRR*/</span>
<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">set</span> <span class="n">optimizer_switch</span><span class="o">=</span><span class="s1">&#39;mrr=on,mrr_cost_based=off,batched_key_access=on&#39;</span><span class="p">;</span>
<span class="n">Query</span> <span class="n">OK</span><span class="p">,</span> <span class="mi">0</span> <span class="k">rows</span> <span class="n">affected</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>

<span class="cm">/*NLJ已被优化为BKA*/</span>
<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">explain</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">t1</span> <span class="k">join</span> <span class="n">t2</span> <span class="k">on</span> <span class="n">t1</span><span class="p">.</span><span class="n">a</span><span class="o">=</span><span class="n">t2</span><span class="p">.</span><span class="n">a</span><span class="p">;</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+------+---------------+------+---------+----------+------+----------+----------------------------------------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">id</span> <span class="o">|</span> <span class="n">select_type</span> <span class="o">|</span> <span class="k">table</span> <span class="o">|</span> <span class="n">partitions</span> <span class="o">|</span> <span class="k">type</span> <span class="o">|</span> <span class="n">possible_keys</span> <span class="o">|</span> <span class="k">key</span>  <span class="o">|</span> <span class="n">key_len</span> <span class="o">|</span> <span class="k">ref</span>      <span class="o">|</span> <span class="k">rows</span> <span class="o">|</span> <span class="n">filtered</span> <span class="o">|</span> <span class="n">Extra</span>                                  <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+------+---------------+------+---------+----------+------+----------+----------------------------------------+
</span><span class="c1"></span><span class="o">|</span>  <span class="mi">1</span> <span class="o">|</span> <span class="k">SIMPLE</span>      <span class="o">|</span> <span class="n">t1</span>    <span class="o">|</span> <span class="k">NULL</span>       <span class="o">|</span> <span class="k">ALL</span>  <span class="o">|</span> <span class="n">a</span>             <span class="o">|</span> <span class="k">NULL</span> <span class="o">|</span> <span class="k">NULL</span>    <span class="o">|</span> <span class="k">NULL</span>     <span class="o">|</span>  <span class="mi">100</span> <span class="o">|</span>   <span class="mi">100</span><span class="p">.</span><span class="mi">00</span> <span class="o">|</span> <span class="k">Using</span> <span class="k">where</span>                            <span class="o">|</span>
<span class="o">|</span>  <span class="mi">1</span> <span class="o">|</span> <span class="k">SIMPLE</span>      <span class="o">|</span> <span class="n">t2</span>    <span class="o">|</span> <span class="k">NULL</span>       <span class="o">|</span> <span class="k">ref</span>  <span class="o">|</span> <span class="n">a</span>             <span class="o">|</span> <span class="n">a</span>    <span class="o">|</span> <span class="mi">5</span>       <span class="o">|</span> <span class="n">web</span><span class="p">.</span><span class="n">t1</span><span class="p">.</span><span class="n">a</span> <span class="o">|</span>    <span class="mi">1</span> <span class="o">|</span>   <span class="mi">100</span><span class="p">.</span><span class="mi">00</span> <span class="o">|</span> <span class="k">Using</span> <span class="k">join</span> <span class="n">buffer</span> <span class="p">(</span><span class="n">Batched</span> <span class="k">Key</span> <span class="k">Access</span><span class="p">)</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+------+---------------+------+---------+----------+------+----------+----------------------------------------+
</span><span class="c1"></span><span class="mi">2</span> <span class="k">rows</span> <span class="k">in</span> <span class="k">set</span><span class="p">,</span> <span class="mi">1</span> <span class="n">warning</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</code></pre></div><h3 id="bnl算法的性能问题">BNL算法的性能问题</h3>
<p>基于BNL算法时,由于<code>join_buffer</code>容量有限,如果驱动表是大表时需要进行分段处理,这样会导致被驱动表进行多次扫描,如果被驱动表是一个大的冷数据库,除了导致IO压力大外,还有什么其它影响?</p>
<p>从磁盘读取数据后是放入到<code>Buffer Pool</code>里的,而<code>Buffer Pool</code>的容量也是有限的,当空间不够时会淘汰一些老数据页来容纳新的数据页,淘汰算法InnoDB引擎使用的是变种LRU算法.</p>
<p>把<code>Buffer Pool</code>按照3:5的比例划分为old和young区域,从磁盘读取的数据先放入到old区域,如果超过1秒该数据页还在old区域且还有被访问就会被移入到young区域,在old和young区域都是LRU算法来淘汰老数据的.</p>
<p>若被驱动表的数据量小于old区域(即整个表能全部放入到old区域),由于需要多次扫描被驱动表,而时间间隔可能超过1秒,这会导致这部分数据会被移入到young区域.</p>
<p>若被驱动表的数据量超过了old区域,在遍历的过程中会涉及到淘汰old区域的数据来存放该表的数据,这样会导致业务正常访问的数据没有机会放入到young区域(没有超过1秒就被淘汰出old了).</p>
<p>以上两种情况都会对<code>Buffer Pool</code>的正常运作产生影响.</p>
<p>BNL算法对系统的影响主要包括:</p>
<ul>
<li>可能会多次扫描被驱动表,占用磁盘IO.</li>
<li>判断join条件需要执行M*N次对比,如果大表就会占用CPU资源.</li>
<li>可能会导致<code>Buffer Pool</code>的热数据被淘汰,影响内存命中率.</li>
</ul>
<p>优化策略:</p>
<ul>
<li>在被驱动表建索引,把BNL转化为BKA.</li>
<li>若被驱动表不适合加索引,可使用临时表(<code>create temporary</code>),把被驱动表满足条件的记录放入临时表,给临时表加索引,仍然转化为BKA.</li>
<li>hash join,但目前MySQL不支持,在<code>join_buffer</code>中支持hash,被驱动表的数据可以通过hash查找能快速定位,而不用再去执行M*N次比对了.</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>MySQL索引(InnoDB引擎)</title>
			<link>https://shenbaise9527.com/db/mysql%E4%B9%8Binnodb%E7%B4%A2%E5%BC%95/</link>
			<pubDate>Tue, 24 Nov 2020 20:43:33 +0800</pubDate>
			
			<guid>https://shenbaise9527.com/db/mysql%E4%B9%8Binnodb%E7%B4%A2%E5%BC%95/</guid>
			<description>B+树 基于N叉树(每个父节点有N个子节点,子节点的值从左到右按照从小到大的顺序排列),非叶子节点只存储索引值,叶子节点储存索引值和数据,所有</description>
			<content type="html"><![CDATA[<h2 id="b树">B+树</h2>
<p>基于N叉树(每个父节点有N个子节点,子节点的值从左到右按照从小到大的顺序排列),非叶子节点只存储索引值,叶子节点储存索引值和数据,所有叶子节点采用链表串起来.</p>
<p>InnoDB采用的就是B+树,表的数据都是以索引的形式存放的,称为索引组织表.针对每个InnoDB引擎的表,都必须存在索引,当建表时没有显示声明索引,InnoDB会默认创建,如下<code>表t1</code>.</p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="cm">/*mysql版本*/</span>
<span class="n">Server</span> <span class="k">version</span><span class="p">:</span> <span class="mi">5</span><span class="p">.</span><span class="mi">7</span><span class="p">.</span><span class="mi">27</span><span class="o">-</span><span class="n">log</span> <span class="n">MySQL</span> <span class="n">Community</span> <span class="n">Server</span> <span class="p">(</span><span class="n">GPL</span><span class="p">)</span>

<span class="cm">/*创建表t,没有显示声明索引*/</span>
<span class="k">CREATE</span> <span class="k">TABLE</span> <span class="o">`</span><span class="n">t</span><span class="o">`</span> <span class="p">(</span>
  <span class="o">`</span><span class="n">id</span><span class="o">`</span> <span class="nb">int</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="o">`</span><span class="n">city</span><span class="o">`</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="o">`</span><span class="n">name</span><span class="o">`</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="o">`</span><span class="n">age</span><span class="o">`</span> <span class="nb">int</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="o">`</span><span class="n">addr</span><span class="o">`</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">128</span><span class="p">)</span> <span class="k">DEFAULT</span> <span class="k">NULL</span>
<span class="p">)</span> <span class="n">ENGINE</span><span class="o">=</span><span class="n">InnoDB</span><span class="p">;</span>
</code></pre></div><p>由于数据全部存储在叶子节点上,则每次查询都必须到叶子节点,其查找时间复杂度稳定,只和树高有关.
假如树高为4,N为1200,则这棵B+树能存储17亿多的数据量,整棵树的高度能维持在非常小的范围内,同时在内存里缓存前面若干层的节点,则极大的降低访问磁盘的次数,提高查询效率.</p>
<p>B+树的树高是由数据页大小和索引列的大小来决定的,而数据页大小是由参数<code>innodb_page_size</code>(默认为16k)的值决定;比如以一个<code>bigint</code>类型的字段为主键,则索引的大小为8字节(<code>bigint</code>大小)+6字节(指针大小,mysql里指针占6字节).则N的大小为16k/14字节,大约为1170.索引字段越小一个数据页能存放的数据就越多,N就会越大.</p>
<h2 id="索引分类">索引分类</h2>
<h3 id="主键索引">主键索引</h3>
<p>也被称为聚簇索引(clustered index),每个表都必须有且仅有一个主键索引(当没有显示声明主键索引时,InnoDB会默认创建一个以rowid为主键的索引),索引对应的字段的值唯一且不允许有空值.</p>
<p>主键索引的B+树的叶子节点的数据页里存放的是整行数据,且只有在主键索引的B+树中才有完整的数据.</p>
<h3 id="非主键索引">非主键索引</h3>
<p>又叫二级索引(secondary index),可以有多个,可分为唯一索引(索引对应的字段的值必须是唯一的,但允许为空值)和普通索引(对字段没什么限制,可重复可为空),对应的B+树的叶子节点的数据页里存放的是对应的主键值.</p>
<p>需要注意:当使用二级索引查询时只能获取到主键值和索引所对应列的值,要获取其它字段的值就只能根据主键值再去主键索引中查找,这个操作称为回表.</p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="cm">/*mysql版本*/</span>
<span class="n">Server</span> <span class="k">version</span><span class="p">:</span> <span class="mi">5</span><span class="p">.</span><span class="mi">7</span><span class="p">.</span><span class="mi">27</span><span class="o">-</span><span class="n">log</span> <span class="n">MySQL</span> <span class="n">Community</span> <span class="n">Server</span> <span class="p">(</span><span class="n">GPL</span><span class="p">)</span>

<span class="cm">/*创建表t*/</span>
<span class="k">CREATE</span> <span class="k">TABLE</span> <span class="o">`</span><span class="n">t</span><span class="o">`</span> <span class="p">(</span>
  <span class="o">`</span><span class="n">id</span><span class="o">`</span> <span class="nb">int</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="n">AUTO_INCREMENT</span><span class="p">,</span>
  <span class="o">`</span><span class="n">city</span><span class="o">`</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="o">`</span><span class="n">name</span><span class="o">`</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="o">`</span><span class="n">age</span><span class="o">`</span> <span class="nb">int</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="o">`</span><span class="n">addr</span><span class="o">`</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">128</span><span class="p">),</span>
  <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="p">(</span><span class="o">`</span><span class="n">id</span><span class="o">`</span><span class="p">),</span>
  <span class="k">KEY</span> <span class="o">`</span><span class="n">city</span><span class="o">`</span> <span class="p">(</span><span class="o">`</span><span class="n">city</span><span class="o">`</span><span class="p">)</span>
<span class="p">)</span> <span class="n">ENGINE</span><span class="o">=</span><span class="n">InnoDB</span>

<span class="cm">/*根据普通索引city来查询,此时需要进行回表操作,来获取其它字段的值*/</span>
<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">t1</span> <span class="k">where</span> <span class="n">city</span><span class="o">=</span><span class="s1">&#39;hangzhou&#39;</span><span class="p">;</span>

<span class="cm">/*根据主键索引来查询,直接在主键索引B+树上查找*/</span>
<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">t1</span> <span class="k">where</span> <span class="n">id</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
</code></pre></div><h2 id="索引维护">索引维护</h2>
<p>索引必然是有序的.当做增删改操作时,必须要进行必要的维护操作,来保持索引的有序性.在InnoDB中,读写都是以数据页为单位的(默认为16k),数据都是存放在数据页里的,当插入新值时为了保持索引的有序性,可能要把新值插入到数据页的中间位置,但如果此时数据页已满时会怎么样?</p>
<p>页分裂:当数据页已满时,引擎会申请一个新的数据页,然后挪动原数据页的一部分数据到新的数据页中.在这种情况下,插入性能是会受到影响的.另外数据页的空间利用率也会降低大约50%.</p>
<p>同理在删除数据时,有可能引发页合并(有分裂就有合并,是分裂的逆过程).</p>
<p>注意:</p>
<ul>
<li>当新数据要插入到某个数据页的首位置,而此时该数据页已满,为了避免页分裂,会优先去找前一个数据页是否还有空余,若有就把新数据插入到前一个数据页的末尾位置.</li>
<li>当新数据要插入到某个数据页的尾位置,而此时该数据页已满,为了避免页分裂,会优先去找后一个数据页是否还有空余,若有就把新数据插入到后一个数据页的首位置.</li>
</ul>
<p>为什么一般建议采用自增ID为主键?</p>
<ul>
<li>自增ID自带有序性,每次插入都是追加操作,不涉及到挪动其它记录,也不会触发叶子节点的分裂.</li>
<li>每个二级索引的叶子节点上都是主键的值,而自增ID若是整型(int)为4字节,若是长整型(bigint)为8字节,主键长度越小,二级索引的叶子节点就越小,占用的空间也就越小.</li>
</ul>
<h2 id="索引优化">索引优化</h2>
<h3 id="覆盖索引">覆盖索引</h3>
<p>为什么需要回表,是因为要去主键索引树中获取相应字段的值.但如果想要查询的字段是索引列的一部分列?</p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="cm">/*仍以表t为例,先新加个索引,包含city和name字段*/</span>
<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">alter</span> <span class="k">table</span> <span class="n">t</span> <span class="k">add</span> <span class="k">index</span> <span class="n">city_name</span><span class="p">(</span><span class="n">city</span><span class="p">,</span> <span class="n">name</span><span class="p">);</span>

<span class="cm">/*通过city来查询name*/</span>
<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">explain</span> <span class="k">select</span> <span class="n">name</span> <span class="k">from</span> <span class="n">t</span> <span class="k">where</span> <span class="n">city</span> <span class="o">=</span> <span class="s1">&#39;hangzhou&#39;</span><span class="p">;</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+------+----------------+-----------+---------+-------+------+----------+-------------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">id</span> <span class="o">|</span> <span class="n">select_type</span> <span class="o">|</span> <span class="k">table</span> <span class="o">|</span> <span class="n">partitions</span> <span class="o">|</span> <span class="k">type</span> <span class="o">|</span> <span class="n">possible_keys</span>  <span class="o">|</span> <span class="k">key</span>       <span class="o">|</span> <span class="n">key_len</span> <span class="o">|</span> <span class="k">ref</span>   <span class="o">|</span> <span class="k">rows</span> <span class="o">|</span> <span class="n">filtered</span> <span class="o">|</span> <span class="n">Extra</span>       <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+------+----------------+-----------+---------+-------+------+----------+-------------+
</span><span class="c1"></span><span class="o">|</span>  <span class="mi">1</span> <span class="o">|</span> <span class="k">SIMPLE</span>      <span class="o">|</span> <span class="n">t</span>     <span class="o">|</span> <span class="k">NULL</span>       <span class="o">|</span> <span class="k">ref</span>  <span class="o">|</span> <span class="n">city</span><span class="p">,</span><span class="n">city_name</span> <span class="o">|</span> <span class="n">city_name</span> <span class="o">|</span> <span class="mi">50</span>      <span class="o">|</span> <span class="n">const</span> <span class="o">|</span> <span class="mi">5505</span> <span class="o">|</span>   <span class="mi">100</span><span class="p">.</span><span class="mi">00</span> <span class="o">|</span> <span class="k">Using</span> <span class="k">index</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+------+----------------+-----------+---------+-------+------+----------+-------------+
</span><span class="c1"></span><span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span><span class="p">,</span> <span class="mi">1</span> <span class="n">warning</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>

<span class="cm">/*通过city来查询name和age*/</span>
<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">explain</span> <span class="k">select</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span> <span class="k">from</span> <span class="n">t</span> <span class="k">where</span> <span class="n">city</span> <span class="o">=</span> <span class="s1">&#39;hangzhou&#39;</span><span class="p">;</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+------+----------------+------+---------+-------+------+----------+-------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">id</span> <span class="o">|</span> <span class="n">select_type</span> <span class="o">|</span> <span class="k">table</span> <span class="o">|</span> <span class="n">partitions</span> <span class="o">|</span> <span class="k">type</span> <span class="o">|</span> <span class="n">possible_keys</span>  <span class="o">|</span> <span class="k">key</span>  <span class="o">|</span> <span class="n">key_len</span> <span class="o">|</span> <span class="k">ref</span>   <span class="o">|</span> <span class="k">rows</span> <span class="o">|</span> <span class="n">filtered</span> <span class="o">|</span> <span class="n">Extra</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+------+----------------+------+---------+-------+------+----------+-------+
</span><span class="c1"></span><span class="o">|</span>  <span class="mi">1</span> <span class="o">|</span> <span class="k">SIMPLE</span>      <span class="o">|</span> <span class="n">t</span>     <span class="o">|</span> <span class="k">NULL</span>       <span class="o">|</span> <span class="k">ref</span>  <span class="o">|</span> <span class="n">city</span><span class="p">,</span><span class="n">city_name</span> <span class="o">|</span> <span class="n">city</span> <span class="o">|</span> <span class="mi">50</span>      <span class="o">|</span> <span class="n">const</span> <span class="o">|</span> <span class="mi">5505</span> <span class="o">|</span>   <span class="mi">100</span><span class="p">.</span><span class="mi">00</span> <span class="o">|</span> <span class="k">NULL</span>  <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+------+----------------+------+---------+-------+------+----------+-------+
</span><span class="c1"></span><span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span><span class="p">,</span> <span class="mi">1</span> <span class="n">warning</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</code></pre></div><p>第一个查询采用的是索引city_name,Extra为<code>Using index</code>,表示是覆盖索引,需要查询的字段已包含在索引列中,不需要回表.</p>
<p>第二个查询采用的是索引city,Extra为<code>NULL</code>,则需要进行回表,去主键索引中获取相应字段的值.</p>
<p>覆盖索引能减少回表次数,即减少树的搜索次数,可显著提升性能.</p>
<h3 id="前缀索引">前缀索引</h3>
<ul>
<li>联合索引的最左N个字段.</li>
<li>字符串索引的最左M个字符.</li>
</ul>
<p>联合索引的值是按照索引定义里出现的字段顺序来排列的,比如表<code>t</code>的索引<code>city_name</code>是按照字段<code>city</code>和<code>name</code>的顺序排列的.
还是以表<code>t</code>为例,创建由字段<code>city</code>、<code>name</code>和<code>age</code>组成的联合索引.</p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="cm">/*创建索引*/</span>
<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">alter</span> <span class="k">table</span> <span class="n">t</span> <span class="k">add</span> <span class="k">index</span> <span class="n">city_name_age</span><span class="p">(</span><span class="n">city</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">);</span>

<span class="cm">/*根据字段city和name来查询,使用了索引city_name_age*/</span>
<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">explain</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">t</span> <span class="k">where</span> <span class="n">city</span> <span class="o">=</span> <span class="s1">&#39;hangzhou&#39;</span> <span class="k">and</span> <span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;zhou&#39;</span><span class="p">;</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+------+---------------+---------------+---------+-------------+------+----------+-------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">id</span> <span class="o">|</span> <span class="n">select_type</span> <span class="o">|</span> <span class="k">table</span> <span class="o">|</span> <span class="n">partitions</span> <span class="o">|</span> <span class="k">type</span> <span class="o">|</span> <span class="n">possible_keys</span> <span class="o">|</span> <span class="k">key</span>           <span class="o">|</span> <span class="n">key_len</span> <span class="o">|</span> <span class="k">ref</span>         <span class="o">|</span> <span class="k">rows</span> <span class="o">|</span> <span class="n">filtered</span> <span class="o">|</span> <span class="n">Extra</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+------+---------------+---------------+---------+-------------+------+----------+-------+
</span><span class="c1"></span><span class="o">|</span>  <span class="mi">1</span> <span class="o">|</span> <span class="k">SIMPLE</span>      <span class="o">|</span> <span class="n">t</span>     <span class="o">|</span> <span class="k">NULL</span>       <span class="o">|</span> <span class="k">ref</span>  <span class="o">|</span> <span class="n">city_name_age</span> <span class="o">|</span> <span class="n">city_name_age</span> <span class="o">|</span> <span class="mi">100</span>     <span class="o">|</span> <span class="n">const</span><span class="p">,</span><span class="n">const</span> <span class="o">|</span>    <span class="mi">1</span> <span class="o">|</span>   <span class="mi">100</span><span class="p">.</span><span class="mi">00</span> <span class="o">|</span> <span class="k">NULL</span>  <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+------+---------------+---------------+---------+-------------+------+----------+-------+
</span><span class="c1"></span><span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span><span class="p">,</span> <span class="mi">1</span> <span class="n">warning</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</code></pre></div><p>联合索引的字段顺序如何安排?</p>
<ul>
<li>如果通过调整顺序,可以少维护一个索引,则这个顺序是需要优先考虑的.</li>
<li>索引空间的大小.比如表t对<code>name</code>和<code>age</code>字段添加索引,基于空间考虑,应该增加一个(name,age)的联合索引和一个(age)的单索引,这时因为字段name比字段age大.</li>
</ul>
<p>字符串索引,适用于模糊查询.</p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="cm">/*在字符串字段city上新建索引*/</span>
<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">alter</span> <span class="k">table</span> <span class="n">t</span> <span class="k">add</span> <span class="k">index</span> <span class="n">city</span><span class="p">(</span><span class="n">city</span><span class="p">);</span>

<span class="cm">/*模糊查询*/</span>
<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">explain</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">t</span> <span class="k">where</span> <span class="n">city</span> <span class="k">like</span> <span class="s1">&#39;h%&#39;</span><span class="p">;</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-----------------------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">id</span> <span class="o">|</span> <span class="n">select_type</span> <span class="o">|</span> <span class="k">table</span> <span class="o">|</span> <span class="n">partitions</span> <span class="o">|</span> <span class="k">type</span>  <span class="o">|</span> <span class="n">possible_keys</span> <span class="o">|</span> <span class="k">key</span>  <span class="o">|</span> <span class="n">key_len</span> <span class="o">|</span> <span class="k">ref</span>  <span class="o">|</span> <span class="k">rows</span> <span class="o">|</span> <span class="n">filtered</span> <span class="o">|</span> <span class="n">Extra</span>                 <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-----------------------+
</span><span class="c1"></span><span class="o">|</span>  <span class="mi">1</span> <span class="o">|</span> <span class="k">SIMPLE</span>      <span class="o">|</span> <span class="n">t</span>     <span class="o">|</span> <span class="k">NULL</span>       <span class="o">|</span> <span class="n">range</span> <span class="o">|</span> <span class="n">city</span>          <span class="o">|</span> <span class="n">city</span> <span class="o">|</span> <span class="mi">50</span>      <span class="o">|</span> <span class="k">NULL</span> <span class="o">|</span> <span class="mi">5505</span> <span class="o">|</span>   <span class="mi">100</span><span class="p">.</span><span class="mi">00</span> <span class="o">|</span> <span class="k">Using</span> <span class="k">index</span> <span class="n">condition</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-----------------------+
</span><span class="c1"></span><span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span><span class="p">,</span> <span class="mi">1</span> <span class="n">warning</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</code></pre></div><p>可以看出<code>like 'h%'</code>模糊查询使用了索引<code>city</code>来快速查找.但如果是针对<code>like '%h%'</code>之类的模糊查询列?</p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="cm">/*使用前后都模糊匹配模式,查询所有字段*/</span>
<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">explain</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">t</span> <span class="k">where</span> <span class="n">city</span> <span class="k">like</span> <span class="s1">&#39;%h%&#39;</span><span class="p">;</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+------+---------------+------+---------+------+-------+----------+-------------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">id</span> <span class="o">|</span> <span class="n">select_type</span> <span class="o">|</span> <span class="k">table</span> <span class="o">|</span> <span class="n">partitions</span> <span class="o">|</span> <span class="k">type</span> <span class="o">|</span> <span class="n">possible_keys</span> <span class="o">|</span> <span class="k">key</span>  <span class="o">|</span> <span class="n">key_len</span> <span class="o">|</span> <span class="k">ref</span>  <span class="o">|</span> <span class="k">rows</span>  <span class="o">|</span> <span class="n">filtered</span> <span class="o">|</span> <span class="n">Extra</span>       <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+------+---------------+------+---------+------+-------+----------+-------------+
</span><span class="c1"></span><span class="o">|</span>  <span class="mi">1</span> <span class="o">|</span> <span class="k">SIMPLE</span>      <span class="o">|</span> <span class="n">t</span>     <span class="o">|</span> <span class="k">NULL</span>       <span class="o">|</span> <span class="k">ALL</span>  <span class="o">|</span> <span class="k">NULL</span>          <span class="o">|</span> <span class="k">NULL</span> <span class="o">|</span> <span class="k">NULL</span>    <span class="o">|</span> <span class="k">NULL</span> <span class="o">|</span> <span class="mi">43868</span> <span class="o">|</span>    <span class="mi">11</span><span class="p">.</span><span class="mi">11</span> <span class="o">|</span> <span class="k">Using</span> <span class="k">where</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+------+---------------+------+---------+------+-------+----------+-------------+
</span><span class="c1"></span><span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span><span class="p">,</span> <span class="mi">1</span> <span class="n">warning</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>

<span class="cm">/*使用前后都模糊匹配模式,查询id字段*/</span>
<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">explain</span> <span class="k">select</span> <span class="n">id</span> <span class="k">from</span> <span class="n">t</span> <span class="k">where</span> <span class="n">city</span> <span class="k">like</span> <span class="s1">&#39;%h%&#39;</span><span class="p">;</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+-------+---------------+------+---------+------+-------+----------+--------------------------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">id</span> <span class="o">|</span> <span class="n">select_type</span> <span class="o">|</span> <span class="k">table</span> <span class="o">|</span> <span class="n">partitions</span> <span class="o">|</span> <span class="k">type</span>  <span class="o">|</span> <span class="n">possible_keys</span> <span class="o">|</span> <span class="k">key</span>  <span class="o">|</span> <span class="n">key_len</span> <span class="o">|</span> <span class="k">ref</span>  <span class="o">|</span> <span class="k">rows</span>  <span class="o">|</span> <span class="n">filtered</span> <span class="o">|</span> <span class="n">Extra</span>                    <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+-------+---------------+------+---------+------+-------+----------+--------------------------+
</span><span class="c1"></span><span class="o">|</span>  <span class="mi">1</span> <span class="o">|</span> <span class="k">SIMPLE</span>      <span class="o">|</span> <span class="n">t</span>     <span class="o">|</span> <span class="k">NULL</span>       <span class="o">|</span> <span class="k">index</span> <span class="o">|</span> <span class="k">NULL</span>          <span class="o">|</span> <span class="n">city</span> <span class="o">|</span> <span class="mi">50</span>      <span class="o">|</span> <span class="k">NULL</span> <span class="o">|</span> <span class="mi">43868</span> <span class="o">|</span>    <span class="mi">11</span><span class="p">.</span><span class="mi">11</span> <span class="o">|</span> <span class="k">Using</span> <span class="k">where</span><span class="p">;</span> <span class="k">Using</span> <span class="k">index</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+-------+---------------+------+---------+------+-------+----------+--------------------------+
</span><span class="c1"></span><span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span><span class="p">,</span> <span class="mi">1</span> <span class="n">warning</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</code></pre></div><p>针对查询<code>select * from t where city like '%h%'</code>,使用的是全表扫描.</p>
<p>针对查询<code>select id from t where city like '%h%'</code>,使用的索引<code>city</code>,看rows字段也是全索引扫描,由于只需要获取字段<code>id</code>,故优化器认为顺序扫描索引<code>city</code>比主键索引的代价小.</p>
<p><em><strong>针对索引,一种是通过索引来快速查找,而另一种是通过索引来顺序遍历.</strong></em></p>
<p>**注意:**针对字段<code>city</code>和<code>age</code>的联合索引,也是适用于<code>city like 'h%'</code>的模糊查询.</p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="cm">/*在字段city和age上新建联合索引*/</span>
<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">alter</span> <span class="k">table</span> <span class="n">t</span> <span class="k">add</span> <span class="k">index</span> <span class="n">city_age</span><span class="p">(</span><span class="n">city</span><span class="p">,</span> <span class="n">age</span><span class="p">);</span>

<span class="cm">/*利用联合索引的最左字段city的最左M个字符*/</span>
<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">explain</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">t</span> <span class="k">where</span> <span class="n">city</span> <span class="k">like</span> <span class="s1">&#39;hang%&#39;</span><span class="p">;</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+-------+---------------+----------+---------+------+------+----------+-----------------------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">id</span> <span class="o">|</span> <span class="n">select_type</span> <span class="o">|</span> <span class="k">table</span> <span class="o">|</span> <span class="n">partitions</span> <span class="o">|</span> <span class="k">type</span>  <span class="o">|</span> <span class="n">possible_keys</span> <span class="o">|</span> <span class="k">key</span>      <span class="o">|</span> <span class="n">key_len</span> <span class="o">|</span> <span class="k">ref</span>  <span class="o">|</span> <span class="k">rows</span> <span class="o">|</span> <span class="n">filtered</span> <span class="o">|</span> <span class="n">Extra</span>                 <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+-------+---------------+----------+---------+------+------+----------+-----------------------+
</span><span class="c1"></span><span class="o">|</span>  <span class="mi">1</span> <span class="o">|</span> <span class="k">SIMPLE</span>      <span class="o">|</span> <span class="n">t</span>     <span class="o">|</span> <span class="k">NULL</span>       <span class="o">|</span> <span class="n">range</span> <span class="o">|</span> <span class="n">city_age</span>      <span class="o">|</span> <span class="n">city_age</span> <span class="o">|</span> <span class="mi">50</span>      <span class="o">|</span> <span class="k">NULL</span> <span class="o">|</span> <span class="mi">5505</span> <span class="o">|</span>   <span class="mi">100</span><span class="p">.</span><span class="mi">00</span> <span class="o">|</span> <span class="k">Using</span> <span class="k">index</span> <span class="n">condition</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+-------+---------------+----------+---------+------+------+----------+-----------------------+
</span><span class="c1"></span><span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span><span class="p">,</span> <span class="mi">1</span> <span class="n">warning</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</code></pre></div><p>联合索引(非主键索引)中的字段和主键索引所包含的字段有重复时,在非主键索引树中该字段不会出现多次.</p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="cm">/*新建表geek*/</span>
<span class="k">CREATE</span> <span class="k">TABLE</span> <span class="o">`</span><span class="n">geek</span><span class="o">`</span> <span class="p">(</span>
  <span class="o">`</span><span class="n">a</span><span class="o">`</span> <span class="nb">int</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="o">`</span><span class="n">b</span><span class="o">`</span> <span class="nb">int</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="o">`</span><span class="k">c</span><span class="o">`</span> <span class="nb">int</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="o">`</span><span class="n">d</span><span class="o">`</span> <span class="nb">int</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="p">(</span><span class="o">`</span><span class="n">a</span><span class="o">`</span><span class="p">,</span><span class="o">`</span><span class="n">b</span><span class="o">`</span><span class="p">),</span>
  <span class="k">KEY</span> <span class="o">`</span><span class="n">ca</span><span class="o">`</span> <span class="p">(</span><span class="o">`</span><span class="k">c</span><span class="o">`</span><span class="p">,</span><span class="o">`</span><span class="n">a</span><span class="o">`</span><span class="p">),</span>
  <span class="k">KEY</span> <span class="o">`</span><span class="n">cb</span><span class="o">`</span> <span class="p">(</span><span class="o">`</span><span class="k">c</span><span class="o">`</span><span class="p">,</span><span class="o">`</span><span class="n">b</span><span class="o">`</span><span class="p">)</span>
<span class="p">)</span> <span class="n">ENGINE</span><span class="o">=</span><span class="n">InnoDB</span>
</code></pre></div><p>如上<code>geek</code>表中有3个索引,字段<code>a</code>和<code>b</code>组成的主键索引、字段<code>c</code>和<code>a</code>组成的普通索引、字段<code>c</code>和<code>b</code>组成的普通索引.</p>
<ul>
<li>在<code>ca</code>索引树中,叶子节点包含的字段顺序为<code>c</code>、<code>a</code>和<code>b</code>.并不是<code>c</code>、<code>a</code>、<code>a</code>和<code>b</code>.</li>
<li>在<code>cb</code>索引树中,叶子节点包含的字段顺序为<code>c</code>、<code>b</code>和<code>a</code>.并不是<code>c</code>、<code>b</code>、<code>a</code>和<code>b</code>.</li>
</ul>
<h3 id="索引下推">索引下推</h3>
<p>针对前缀索引中的联合索引(<code>city</code>和<code>age</code>),适用于<code>city</code>的模糊查询,那如果查询条件再加上<code>age</code>会如何?</p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="cm">/*在city字段上模糊匹配,在age上精确匹配*/</span>
<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">explain</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">t</span> <span class="k">where</span> <span class="n">city</span> <span class="k">like</span> <span class="s1">&#39;hang%&#39;</span> <span class="k">and</span> <span class="n">age</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+-------+---------------+----------+---------+------+------+----------+-----------------------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">id</span> <span class="o">|</span> <span class="n">select_type</span> <span class="o">|</span> <span class="k">table</span> <span class="o">|</span> <span class="n">partitions</span> <span class="o">|</span> <span class="k">type</span>  <span class="o">|</span> <span class="n">possible_keys</span> <span class="o">|</span> <span class="k">key</span>      <span class="o">|</span> <span class="n">key_len</span> <span class="o">|</span> <span class="k">ref</span>  <span class="o">|</span> <span class="k">rows</span> <span class="o">|</span> <span class="n">filtered</span> <span class="o">|</span> <span class="n">Extra</span>                 <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+-------+---------------+----------+---------+------+------+----------+-----------------------+
</span><span class="c1"></span><span class="o">|</span>  <span class="mi">1</span> <span class="o">|</span> <span class="k">SIMPLE</span>      <span class="o">|</span> <span class="n">t</span>     <span class="o">|</span> <span class="k">NULL</span>       <span class="o">|</span> <span class="n">range</span> <span class="o">|</span> <span class="n">city_age</span>      <span class="o">|</span> <span class="n">city_age</span> <span class="o">|</span> <span class="mi">54</span>      <span class="o">|</span> <span class="k">NULL</span> <span class="o">|</span> <span class="mi">5505</span> <span class="o">|</span>    <span class="mi">10</span><span class="p">.</span><span class="mi">00</span> <span class="o">|</span> <span class="k">Using</span> <span class="k">index</span> <span class="n">condition</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+-------+---------------+----------+---------+------+------+----------+-----------------------+
</span><span class="c1"></span><span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span><span class="p">,</span> <span class="mi">1</span> <span class="n">warning</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</code></pre></div><p>可以看到仍然会使用索引<code>city_age</code>,Extra字段里的<code>Using index condition</code>表示使用了索引下推.通过字段<code>city</code>快速定位记录后,再直接利用索引中age字段的值来进行过滤.</p>
<p>这是MySQL5.6版本引入的<strong>索引下推优化(index condition pushdown)</strong>,可以在索引查找过程中,对索引包含的字段先做判断,直接过滤不满足条件的记录,减少回表次数,提高性能.</p>
<h2 id="索引选择">索引选择</h2>
<p>主要是针对普通索引和唯一索引的选择.</p>
<p>在选择的前提是要能满足业务的需求,比如业务上需要保证唯一性,但应用层并不一定能保证,需要数据库层面来保证,就必须选择唯一索引.
又比如身份证号,在业务应用层面已经保证了唯一性,并不需要数据库层面来保证,就可以选择普通索引,当然也可以选择唯一索引.</p>
<p>在普通索引和唯一索引都能保证业务正确的前提下,如何评估该选择普通索引还是唯一索引列?下面主要从查询和更新两方面来进行评估.</p>
<h3 id="查询">查询</h3>
<p>仍然以表<code>t</code>为例,针对字段<code>name</code>,分别创建唯一索引和普通索引时,其查找过程是如何的?针对查询语句:<code>select * from t where name='guanguan';</code>.</p>
<ul>
<li>对于普通索引而言,查找到第一条满足条件的记录后,需要继续查找下一条记录,直到碰到第一个不满足条件的记录.</li>
<li>对于唯一索引而言,由于索引定义了唯一性,查找到第一个满足条件的记录后,就会停止继续检索.</li>
</ul>
<p>上述两个查找过程的性能差异,几乎微乎其微.InnoDB读写都是基于数据页的,当要去磁盘查找某一记录时,是会把该记录所在的数据页整体读入内存的.对于普通索引的继续查找只是一次指针寻找和一次判断,对于现代CPU来说,影响微乎其微.</p>
<p>可见对于查询来说,普通索引和唯一索引之间的差异几乎微乎其微.</p>
<h3 id="更新">更新</h3>
<p>在比较更新的差异之前，先引入概念<code>change buffer</code>,这也是InnoDB对更新操作所作出的优化.</p>
<p>当需要更新一个数据页时,如果该数据页在内存中,就直接更新内存的数据.但如果该数据页不在内存中,在不影响数据一致性的前提下,引擎会把这些更新操作缓存到<code>change buffer</code>中,这样就暂时不需要把磁盘数据读入到内存中,减少了磁盘随机读取,提升了更新性能.</p>
<p>在必要时,会把<code>change buffer</code>中的数据应用到原始数据页中,得到新的数据页,这个过程称为<code>merge</code>.</p>
<p>那<code>change buffer</code>中的数据什么时候应用到原始数据页中列?</p>
<ul>
<li>当原始数据页被加载到Buffer pool时,会执行<code>merge</code>.</li>
<li>后台有线程定期会执行<code>merge</code>.</li>
<li>当MySQL正常关闭时,也会执行<code>merge</code>.</li>
</ul>
<p><code>change buffer</code>优化的前提是要不影响数据一致性,而对于唯一索引,由于需要判断是否唯一,就必须先把磁盘数据加载到内存中来进行判断,由于数据页已经在内存中了,直接更新内存就行了,所以该优化对唯一索引是不起作用的.因此<code>change buffer</code>优化只是对普通索引有效.</p>
<p><code>change buffer</code>优化实际上是延迟了更新操作,当一个数据页上对应的更新操作在<code>change buffer</code>中越多,其收益是越大的.但如果针对先更新然后马上就查询的场景,这个优化可能会起到反作用.该场景下随机IO的次数不会少,反而增加了<code>change buffer</code>的维护代价.</p>
<p><code>change buffer</code>用的是buffer pool里的内存,其大小可以通过参数<code>innodb_change_buffer_max_size</code>来动态设置,表示<code>change buffer</code>的大小最多只能占用buffer pool的比例.</p>
<p>另外是否启用<code>change buffer</code>或对哪些操作启用,是通过参数<code>innodb_change_buffering</code>来控制的,该参数默认是<code>all</code>,有以下几种选择:</p>
<ul>
<li>all: 默认值.开启buffer inserts、delete-marking operations、purges</li>
<li>nono: 不开启</li>
<li>inserts: 只对buffer insert操作(对insert和update有效)开启</li>
<li>deletes: 只对delete-marking操作开启</li>
<li>changes: 只对buffer insert和delete-marking操作开启</li>
<li>purges: 只对在后台执行的物理删除操作开启.</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">show</span> <span class="n">variables</span> <span class="k">like</span> <span class="s1">&#39;%innodb_change_buffer%&#39;</span><span class="p">;</span>
<span class="o">+</span><span class="c1">-------------------------------+-------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">Variable_name</span>                 <span class="o">|</span> <span class="n">Value</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">-------------------------------+-------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">innodb_change_buffer_max_size</span> <span class="o">|</span> <span class="mi">25</span>    <span class="o">|</span>
<span class="o">|</span> <span class="n">innodb_change_buffering</span>       <span class="o">|</span> <span class="k">all</span>   <span class="o">|</span>
<span class="o">+</span><span class="c1">-------------------------------+-------+
</span><span class="c1"></span><span class="mi">2</span> <span class="k">rows</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</code></pre></div><p><code>change buffer</code>是会持久化的,保存在系统表空间(<code>ibdata1</code>)</p>
<ul>
<li>数据库空闲时,后台有线程定时持久化</li>
<li>当数据库缓冲池空间不够时</li>
<li>当数据库正常关闭时</li>
<li>redo log写满时</li>
</ul>
<p>注意:</p>
<ul>
<li><code>change buffer</code>也是通过B+树来存储的,键是表空间ID.</li>
<li><code>change buffer</code>的变更也是会记录redo日志的(<strong>既然记录到redo中了,为什么还要持久化到系统表空间?</strong>).</li>
<li><code>change buffer</code>节省的主要是随机读磁盘的IO消耗.</li>
</ul>
<p>再来谈谈更新时,普通索引和唯一索引的差异:</p>
<ul>
<li>当数据页在内存中时,唯一索引会校验下唯一性,通过后再更新内存;而普通索引直接更新内存即可.</li>
<li>当数据页不在内存中时,唯一索引会先通过磁盘随机读把数据加载到内存中,然后再校验唯一性,通过后再更新内存;而普通索引是直接把更新操作记录到<code>change buffer</code>中.</li>
</ul>
<p>从更新来说,普通索引更具有优势.</p>
<h2 id="为什么会选错索引">为什么会选错索引?</h2>
<h3 id="现象分析">现象分析</h3>
<p>当一个表有多个索引,查询究竟走哪个索引?优化器是通过什么因素来决定使用哪个索引的?先看个例子.</p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="cm">/*创建表t1*/</span>
<span class="k">CREATE</span> <span class="k">TABLE</span> <span class="o">`</span><span class="n">t1</span><span class="o">`</span> <span class="p">(</span>
  <span class="o">`</span><span class="n">id</span><span class="o">`</span> <span class="nb">int</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="n">AUTO_INCREMENT</span><span class="p">,</span>
  <span class="o">`</span><span class="n">a</span><span class="o">`</span> <span class="nb">int</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="k">DEFAULT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="o">`</span><span class="n">b</span><span class="o">`</span> <span class="nb">int</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="k">DEFAULT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="p">(</span><span class="o">`</span><span class="n">id</span><span class="o">`</span><span class="p">),</span>
  <span class="k">KEY</span> <span class="o">`</span><span class="n">a</span><span class="o">`</span> <span class="p">(</span><span class="o">`</span><span class="n">a</span><span class="o">`</span><span class="p">),</span>
  <span class="k">KEY</span> <span class="o">`</span><span class="n">b</span><span class="o">`</span> <span class="p">(</span><span class="o">`</span><span class="n">b</span><span class="o">`</span><span class="p">)</span>
<span class="p">)</span> <span class="n">ENGINE</span><span class="o">=</span><span class="n">InnoDB</span><span class="p">;</span>

<span class="cm">/*创建存储过程插入数据*/</span>
<span class="k">delimiter</span> <span class="p">;;</span>
<span class="k">create</span> <span class="k">procedure</span> <span class="n">idata</span><span class="p">()</span> 
<span class="k">begin</span>
  <span class="k">declare</span> <span class="n">i</span> <span class="nb">int</span><span class="p">;</span>
  <span class="k">declare</span> <span class="n">j</span> <span class="nb">int</span><span class="p">;</span>
  <span class="k">set</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="n">while</span><span class="p">(</span><span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">10</span><span class="p">)</span> <span class="k">do</span> 
    <span class="k">set</span> <span class="n">j</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
    <span class="k">start</span> <span class="k">transaction</span><span class="p">;</span>
    <span class="n">while</span><span class="p">(</span><span class="n">j</span><span class="o">&lt;=</span><span class="mi">10000</span><span class="p">)</span> <span class="k">do</span> 
      <span class="k">insert</span> <span class="k">into</span> <span class="n">t1</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span> <span class="k">values</span><span class="p">(</span><span class="n">j</span><span class="o">+</span><span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="mi">10000</span><span class="p">,</span> <span class="n">j</span><span class="o">+</span><span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="mi">10000</span><span class="p">);</span> 
      <span class="k">set</span> <span class="n">j</span><span class="o">=</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span> 
    <span class="k">end</span> <span class="n">while</span><span class="p">;</span>
    <span class="k">commit</span><span class="p">;</span>
    <span class="k">set</span> <span class="n">i</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
  <span class="k">end</span> <span class="n">while</span><span class="p">;</span>
  <span class="k">end</span><span class="p">;;</span>
<span class="k">delimiter</span> <span class="p">;</span>

<span class="cm">/*调用存储过程,插入数据到表中*/</span>
<span class="k">call</span> <span class="n">idata</span><span class="p">();</span>

<span class="cm">/*查询使用索引a,符合预期*/</span>
<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">explain</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">t1</span> <span class="k">where</span> <span class="n">a</span> <span class="k">between</span> <span class="mi">10000</span> <span class="k">and</span> <span class="mi">20000</span><span class="p">;</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+-------+---------------+------+---------+------+-------+----------+-----------------------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">id</span> <span class="o">|</span> <span class="n">select_type</span> <span class="o">|</span> <span class="k">table</span> <span class="o">|</span> <span class="n">partitions</span> <span class="o">|</span> <span class="k">type</span>  <span class="o">|</span> <span class="n">possible_keys</span> <span class="o">|</span> <span class="k">key</span>  <span class="o">|</span> <span class="n">key_len</span> <span class="o">|</span> <span class="k">ref</span>  <span class="o">|</span> <span class="k">rows</span>  <span class="o">|</span> <span class="n">filtered</span> <span class="o">|</span> <span class="n">Extra</span>                 <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+-------+---------------+------+---------+------+-------+----------+-----------------------+
</span><span class="c1"></span><span class="o">|</span>  <span class="mi">1</span> <span class="o">|</span> <span class="k">SIMPLE</span>      <span class="o">|</span> <span class="n">t1</span>    <span class="o">|</span> <span class="k">NULL</span>       <span class="o">|</span> <span class="n">range</span> <span class="o">|</span> <span class="n">a</span>             <span class="o">|</span> <span class="n">a</span>    <span class="o">|</span> <span class="mi">5</span>       <span class="o">|</span> <span class="k">NULL</span> <span class="o">|</span> <span class="mi">10001</span> <span class="o">|</span>   <span class="mi">100</span><span class="p">.</span><span class="mi">00</span> <span class="o">|</span> <span class="k">Using</span> <span class="k">index</span> <span class="n">condition</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+-------+---------------+------+---------+------+-------+----------+-----------------------+
</span><span class="c1"></span><span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span><span class="p">,</span> <span class="mi">1</span> <span class="n">warning</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</code></pre></div><p>上面例子中,查询使用索引<code>a</code>,符合预期,说明优化器选择了正确的索引.</p>
<p>再来看看另一种场景,事务隔离级别为<code>REPEATABLE-READ</code>.</p>
<table>
<thead>
<tr>
<th>session A</th>
<th>session B</th>
</tr>
</thead>
<tbody>
<tr>
<td>start transaction with consistent snapshot;</td>
<td></td>
</tr>
<tr>
<td></td>
<td>delete from t1; call idata();</td>
</tr>
<tr>
<td></td>
<td>explain select * from t1 where a between 10000 and 20000;</td>
</tr>
<tr>
<td>commit;</td>
<td></td>
</tr>
</tbody>
</table>
<p>session A:</p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">explain</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">t1</span> <span class="k">where</span> <span class="n">a</span> <span class="k">between</span> <span class="mi">10000</span> <span class="k">and</span> <span class="mi">20000</span><span class="p">;</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+-------+---------------+------+---------+------+-------+----------+-----------------------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">id</span> <span class="o">|</span> <span class="n">select_type</span> <span class="o">|</span> <span class="k">table</span> <span class="o">|</span> <span class="n">partitions</span> <span class="o">|</span> <span class="k">type</span>  <span class="o">|</span> <span class="n">possible_keys</span> <span class="o">|</span> <span class="k">key</span>  <span class="o">|</span> <span class="n">key_len</span> <span class="o">|</span> <span class="k">ref</span>  <span class="o">|</span> <span class="k">rows</span>  <span class="o">|</span> <span class="n">filtered</span> <span class="o">|</span> <span class="n">Extra</span>                 <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+-------+---------------+------+---------+------+-------+----------+-----------------------+
</span><span class="c1"></span><span class="o">|</span>  <span class="mi">1</span> <span class="o">|</span> <span class="k">SIMPLE</span>      <span class="o">|</span> <span class="n">t1</span>    <span class="o">|</span> <span class="k">NULL</span>       <span class="o">|</span> <span class="n">range</span> <span class="o">|</span> <span class="n">a</span>             <span class="o">|</span> <span class="n">a</span>    <span class="o">|</span> <span class="mi">5</span>       <span class="o">|</span> <span class="k">NULL</span> <span class="o">|</span> <span class="mi">10001</span> <span class="o">|</span>   <span class="mi">100</span><span class="p">.</span><span class="mi">00</span> <span class="o">|</span> <span class="k">Using</span> <span class="k">index</span> <span class="n">condition</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+-------+---------------+------+---------+------+-------+----------+-----------------------+
</span><span class="c1"></span><span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span><span class="p">,</span> <span class="mi">1</span> <span class="n">warning</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>

<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">start</span> <span class="k">transaction</span> <span class="k">with</span> <span class="n">consistent</span> <span class="n">snapshot</span><span class="p">;</span>
<span class="n">Query</span> <span class="n">OK</span><span class="p">,</span> <span class="mi">0</span> <span class="k">rows</span> <span class="n">affected</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</code></pre></div><p>session B:</p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">delete</span> <span class="k">from</span> <span class="n">t1</span><span class="p">;</span>
<span class="n">Query</span> <span class="n">OK</span><span class="p">,</span> <span class="mi">100000</span> <span class="k">rows</span> <span class="n">affected</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">72</span> <span class="n">sec</span><span class="p">)</span>

<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">call</span> <span class="n">idata</span><span class="p">();</span>
<span class="n">Query</span> <span class="n">OK</span><span class="p">,</span> <span class="mi">0</span> <span class="k">rows</span> <span class="n">affected</span> <span class="p">(</span><span class="mi">2</span><span class="p">.</span><span class="mi">93</span> <span class="n">sec</span><span class="p">)</span>

<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">explain</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">t1</span> <span class="k">where</span> <span class="n">a</span> <span class="k">between</span> <span class="mi">10000</span> <span class="k">and</span> <span class="mi">20000</span><span class="p">;</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+------+---------------+------+---------+------+--------+----------+-------------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">id</span> <span class="o">|</span> <span class="n">select_type</span> <span class="o">|</span> <span class="k">table</span> <span class="o">|</span> <span class="n">partitions</span> <span class="o">|</span> <span class="k">type</span> <span class="o">|</span> <span class="n">possible_keys</span> <span class="o">|</span> <span class="k">key</span>  <span class="o">|</span> <span class="n">key_len</span> <span class="o">|</span> <span class="k">ref</span>  <span class="o">|</span> <span class="k">rows</span>   <span class="o">|</span> <span class="n">filtered</span> <span class="o">|</span> <span class="n">Extra</span>       <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+------+---------------+------+---------+------+--------+----------+-------------+
</span><span class="c1"></span><span class="o">|</span>  <span class="mi">1</span> <span class="o">|</span> <span class="k">SIMPLE</span>      <span class="o">|</span> <span class="n">t1</span>    <span class="o">|</span> <span class="k">NULL</span>       <span class="o">|</span> <span class="k">ALL</span>  <span class="o">|</span> <span class="n">a</span>             <span class="o">|</span> <span class="k">NULL</span> <span class="o">|</span> <span class="k">NULL</span>    <span class="o">|</span> <span class="k">NULL</span> <span class="o">|</span> <span class="mi">100015</span> <span class="o">|</span>    <span class="mi">37</span><span class="p">.</span><span class="mi">11</span> <span class="o">|</span> <span class="k">Using</span> <span class="k">where</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+------+---------------+------+---------+------+--------+----------+-------------+
</span><span class="c1"></span><span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span><span class="p">,</span> <span class="mi">1</span> <span class="n">warning</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</code></pre></div><p>session B此时选择的是全表扫描,开启慢查询日志,再来看看查询的具体信息.</p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">set</span> <span class="n">long_query_time</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
<span class="n">Query</span> <span class="n">OK</span><span class="p">,</span> <span class="mi">0</span> <span class="k">rows</span> <span class="n">affected</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>

<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">t1</span> <span class="k">where</span> <span class="n">a</span> <span class="k">between</span> <span class="mi">10000</span> <span class="k">and</span> <span class="mi">20000</span><span class="p">;</span>
<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">t1</span> <span class="k">force</span> <span class="k">index</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="k">where</span> <span class="n">a</span> <span class="k">between</span> <span class="mi">10000</span> <span class="k">and</span> <span class="mi">20000</span><span class="p">;</span>

<span class="cm">/*慢查询日志,设置慢查询时间为0秒,即打印所有语句*/</span>
<span class="k">set</span> <span class="n">long_query_time</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
<span class="o">#</span> <span class="n">Time</span><span class="p">:</span> <span class="mi">2020</span><span class="o">-</span><span class="mi">06</span><span class="o">-</span><span class="mi">16</span><span class="n">T06</span><span class="p">:</span><span class="mi">28</span><span class="p">:</span><span class="mi">51</span><span class="p">.</span><span class="mi">528132</span><span class="n">Z</span>
<span class="o">#</span> <span class="k">User</span><span class="o">@</span><span class="k">Host</span><span class="p">:</span> <span class="n">web</span><span class="p">[</span><span class="n">web</span><span class="p">]</span> <span class="o">@</span> <span class="n">localhost</span> <span class="p">[]</span>  <span class="n">Id</span><span class="p">:</span>    <span class="mi">57</span>
<span class="o">#</span> <span class="n">Query_time</span><span class="p">:</span> <span class="mi">0</span><span class="p">.</span><span class="mi">038091</span>  <span class="n">Lock_time</span><span class="p">:</span> <span class="mi">0</span><span class="p">.</span><span class="mi">000289</span> <span class="n">Rows_sent</span><span class="p">:</span> <span class="mi">10001</span>  <span class="n">Rows_examined</span><span class="p">:</span> <span class="mi">100000</span>
<span class="k">SET</span> <span class="k">timestamp</span><span class="o">=</span><span class="mi">1592288931</span><span class="p">;</span>
<span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">t1</span> <span class="k">where</span> <span class="n">a</span> <span class="k">between</span> <span class="mi">10000</span> <span class="k">and</span> <span class="mi">20000</span><span class="p">;</span>
<span class="o">#</span> <span class="n">Time</span><span class="p">:</span> <span class="mi">2020</span><span class="o">-</span><span class="mi">06</span><span class="o">-</span><span class="mi">16</span><span class="n">T06</span><span class="p">:</span><span class="mi">29</span><span class="p">:</span><span class="mi">01</span><span class="p">.</span><span class="mi">998170</span><span class="n">Z</span>
<span class="o">#</span> <span class="k">User</span><span class="o">@</span><span class="k">Host</span><span class="p">:</span> <span class="n">web</span><span class="p">[</span><span class="n">web</span><span class="p">]</span> <span class="o">@</span> <span class="n">localhost</span> <span class="p">[]</span>  <span class="n">Id</span><span class="p">:</span>    <span class="mi">57</span>
<span class="o">#</span> <span class="n">Query_time</span><span class="p">:</span> <span class="mi">0</span><span class="p">.</span><span class="mi">015590</span>  <span class="n">Lock_time</span><span class="p">:</span> <span class="mi">0</span><span class="p">.</span><span class="mi">000345</span> <span class="n">Rows_sent</span><span class="p">:</span> <span class="mi">10001</span>  <span class="n">Rows_examined</span><span class="p">:</span> <span class="mi">10001</span>
<span class="k">SET</span> <span class="k">timestamp</span><span class="o">=</span><span class="mi">1592288941</span><span class="p">;</span>
<span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">t1</span> <span class="k">force</span> <span class="k">index</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="k">where</span> <span class="n">a</span> <span class="k">between</span> <span class="mi">10000</span> <span class="k">and</span> <span class="mi">20000</span><span class="p">;</span>
</code></pre></div><ul>
<li>第一个查询语句的Rows_examined为100000行,走的是全表扫描,耗时38毫秒.</li>
<li>第二个查询语句的Rows_examined为10001行,走的是索引a,耗时15毫秒.
很显然,针对第一个查询语句,优化器选错了索引.</li>
</ul>
<p>那么到底优化器选择索引的逻辑是什么列?</p>
<p><em><strong>优化器选择索引的目的,是找到一个最优执行方案,用最小的代价去执行语句.</strong></em></p>
<p>在数据库里面,扫描行数是影响执行代价的因素之一.扫描行数越少,意味这访问磁盘数据的次数越少,消耗CPU资源越少.但扫描行数并不是唯一的判断标准,优化器还会结合是否使用临时表、是否排序等因素进行综合判断.</p>
<p><strong>那扫描行数是怎么判断的?</strong>
在执行语句之前,数据库并不能直到满足条件的记录到底有多少条?只能根据统计信息来估算.这个统计信息就是索引的区分度.一个索引上不同的值越多,这个索引的区分度就越好.一个索引上不同的值得个数,称之为基数(cardinality),基数越大,说明索引的区分度越好.</p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="cm">/*查看索引基数*/</span>
<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">show</span> <span class="k">index</span> <span class="k">from</span> <span class="n">t1</span><span class="p">;</span>
<span class="o">+</span><span class="c1">-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
</span><span class="c1"></span><span class="o">|</span> <span class="k">Table</span> <span class="o">|</span> <span class="n">Non_unique</span> <span class="o">|</span> <span class="n">Key_name</span> <span class="o">|</span> <span class="n">Seq_in_index</span> <span class="o">|</span> <span class="k">Column_name</span> <span class="o">|</span> <span class="k">Collation</span> <span class="o">|</span> <span class="k">Cardinality</span> <span class="o">|</span> <span class="n">Sub_part</span> <span class="o">|</span> <span class="n">Packed</span> <span class="o">|</span> <span class="k">Null</span> <span class="o">|</span> <span class="n">Index_type</span> <span class="o">|</span> <span class="k">Comment</span> <span class="o">|</span> <span class="n">Index_comment</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">t1</span>    <span class="o">|</span>          <span class="mi">0</span> <span class="o">|</span> <span class="k">PRIMARY</span>  <span class="o">|</span>            <span class="mi">1</span> <span class="o">|</span> <span class="n">id</span>          <span class="o">|</span> <span class="n">A</span>         <span class="o">|</span>      <span class="mi">100015</span> <span class="o">|</span>     <span class="k">NULL</span> <span class="o">|</span> <span class="k">NULL</span>   <span class="o">|</span>      <span class="o">|</span> <span class="n">BTREE</span>      <span class="o">|</span>         <span class="o">|</span>               <span class="o">|</span>
<span class="o">|</span> <span class="n">t1</span>    <span class="o">|</span>          <span class="mi">1</span> <span class="o">|</span> <span class="n">a</span>        <span class="o">|</span>            <span class="mi">1</span> <span class="o">|</span> <span class="n">a</span>           <span class="o">|</span> <span class="n">A</span>         <span class="o">|</span>      <span class="mi">100015</span> <span class="o">|</span>     <span class="k">NULL</span> <span class="o">|</span> <span class="k">NULL</span>   <span class="o">|</span> <span class="n">YES</span>  <span class="o">|</span> <span class="n">BTREE</span>      <span class="o">|</span>         <span class="o">|</span>               <span class="o">|</span>
<span class="o">|</span> <span class="n">t1</span>    <span class="o">|</span>          <span class="mi">1</span> <span class="o">|</span> <span class="n">b</span>        <span class="o">|</span>            <span class="mi">1</span> <span class="o">|</span> <span class="n">b</span>           <span class="o">|</span> <span class="n">A</span>         <span class="o">|</span>      <span class="mi">100015</span> <span class="o">|</span>     <span class="k">NULL</span> <span class="o">|</span> <span class="k">NULL</span>   <span class="o">|</span> <span class="n">YES</span>  <span class="o">|</span> <span class="n">BTREE</span>      <span class="o">|</span>         <span class="o">|</span>               <span class="o">|</span>
<span class="o">+</span><span class="c1">-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
</span><span class="c1"></span><span class="mi">3</span> <span class="k">rows</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</code></pre></div><p>索引的基数都是通过采样统计得来的,针对表做精确统计代价太大,只能是采样统计了.默认选择N个数据页,统计这些页面上的不同值,得到一个平均值,然后乘以这个索引的页面数,就得到了索引的基数.而数据表是会持续更新的,当变更的行数超过1/M时,会自动触发重新做一次索引统计.</p>
<p>InnoDB有两种存储索引统计的方式,通过参数<code>innodb_stats_persistent</code>的值来选择:</p>
<ul>
<li>设置为on的时候,统计信息会持久化存储,默认的N是20,M是10</li>
<li>设置为off的时候,统计信息存储在内存中,默认的N是8,M是16</li>
</ul>
<p>从<code>show index</code>结果可以看到,索引基数都是一样的,优化器还要判断这个语句本身要扫描多少行?</p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">explain</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">t1</span> <span class="k">where</span> <span class="n">a</span> <span class="k">between</span> <span class="mi">10000</span> <span class="k">and</span> <span class="mi">20000</span><span class="p">;</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+------+---------------+------+---------+------+--------+----------+-------------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">id</span> <span class="o">|</span> <span class="n">select_type</span> <span class="o">|</span> <span class="k">table</span> <span class="o">|</span> <span class="n">partitions</span> <span class="o">|</span> <span class="k">type</span> <span class="o">|</span> <span class="n">possible_keys</span> <span class="o">|</span> <span class="k">key</span>  <span class="o">|</span> <span class="n">key_len</span> <span class="o">|</span> <span class="k">ref</span>  <span class="o">|</span> <span class="k">rows</span>   <span class="o">|</span> <span class="n">filtered</span> <span class="o">|</span> <span class="n">Extra</span>       <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+------+---------------+------+---------+------+--------+----------+-------------+
</span><span class="c1"></span><span class="o">|</span>  <span class="mi">1</span> <span class="o">|</span> <span class="k">SIMPLE</span>      <span class="o">|</span> <span class="n">t1</span>    <span class="o">|</span> <span class="k">NULL</span>       <span class="o">|</span> <span class="k">ALL</span>  <span class="o">|</span> <span class="n">a</span>             <span class="o">|</span> <span class="k">NULL</span> <span class="o">|</span> <span class="k">NULL</span>    <span class="o">|</span> <span class="k">NULL</span> <span class="o">|</span> <span class="mi">100015</span> <span class="o">|</span>    <span class="mi">37</span><span class="p">.</span><span class="mi">11</span> <span class="o">|</span> <span class="k">Using</span> <span class="k">where</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+------+---------------+------+---------+------+--------+----------+-------------+
</span><span class="c1"></span><span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span><span class="p">,</span> <span class="mi">1</span> <span class="n">warning</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>

<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">explain</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">t1</span> <span class="k">force</span> <span class="k">index</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="k">where</span> <span class="n">a</span> <span class="k">between</span> <span class="mi">10000</span> <span class="k">and</span> <span class="mi">20000</span><span class="p">;</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+-------+---------------+------+---------+------+-------+----------+-----------------------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">id</span> <span class="o">|</span> <span class="n">select_type</span> <span class="o">|</span> <span class="k">table</span> <span class="o">|</span> <span class="n">partitions</span> <span class="o">|</span> <span class="k">type</span>  <span class="o">|</span> <span class="n">possible_keys</span> <span class="o">|</span> <span class="k">key</span>  <span class="o">|</span> <span class="n">key_len</span> <span class="o">|</span> <span class="k">ref</span>  <span class="o">|</span> <span class="k">rows</span>  <span class="o">|</span> <span class="n">filtered</span> <span class="o">|</span> <span class="n">Extra</span>                 <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+-------+---------------+------+---------+------+-------+----------+-----------------------+
</span><span class="c1"></span><span class="o">|</span>  <span class="mi">1</span> <span class="o">|</span> <span class="k">SIMPLE</span>      <span class="o">|</span> <span class="n">t1</span>    <span class="o">|</span> <span class="k">NULL</span>       <span class="o">|</span> <span class="n">range</span> <span class="o">|</span> <span class="n">a</span>             <span class="o">|</span> <span class="n">a</span>    <span class="o">|</span> <span class="mi">5</span>       <span class="o">|</span> <span class="k">NULL</span> <span class="o">|</span> <span class="mi">37116</span> <span class="o">|</span>   <span class="mi">100</span><span class="p">.</span><span class="mi">00</span> <span class="o">|</span> <span class="k">Using</span> <span class="k">index</span> <span class="n">condition</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+-------+---------------+------+---------+------+-------+----------+-----------------------+
</span><span class="c1"></span><span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span><span class="p">,</span> <span class="mi">1</span> <span class="n">warning</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</code></pre></div><p>可以看到两个查询语句预计的扫描行数(rows字段),第一个语句的预估是正确的,rows的值是100015;但第二个语句的rows值是37116,偏差就大了(实际上rows应该是10001行).是这个偏差误导了优化器的判断.</p>
<p>第一个语句走的是主键索引,不需要回表;而第二个语句走的是普通索引,是需要回表查询的,回表的代价也是优化器需要考虑的.优化器认为直接扫描主键索引更快.</p>
<p>既然是统计信息不准确,那就需要修正,使用命令<code>analyze table t1</code>.可以看到修正之后,索引就选择正确了.</p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">analyze</span> <span class="k">table</span> <span class="n">t1</span><span class="p">;</span>
<span class="o">+</span><span class="c1">--------+---------+----------+----------+
</span><span class="c1"></span><span class="o">|</span> <span class="k">Table</span>  <span class="o">|</span> <span class="n">Op</span>      <span class="o">|</span> <span class="n">Msg_type</span> <span class="o">|</span> <span class="n">Msg_text</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">--------+---------+----------+----------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">web</span><span class="p">.</span><span class="n">t1</span> <span class="o">|</span> <span class="k">analyze</span> <span class="o">|</span> <span class="n">status</span>   <span class="o">|</span> <span class="n">OK</span>       <span class="o">|</span>
<span class="o">+</span><span class="c1">--------+---------+----------+----------+
</span><span class="c1"></span><span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">01</span> <span class="n">sec</span><span class="p">)</span>

<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">explain</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">t1</span> <span class="k">where</span> <span class="n">a</span> <span class="k">between</span> <span class="mi">10000</span> <span class="k">and</span> <span class="mi">20000</span><span class="p">;</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+-------+---------------+------+---------+------+-------+----------+-----------------------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">id</span> <span class="o">|</span> <span class="n">select_type</span> <span class="o">|</span> <span class="k">table</span> <span class="o">|</span> <span class="n">partitions</span> <span class="o">|</span> <span class="k">type</span>  <span class="o">|</span> <span class="n">possible_keys</span> <span class="o">|</span> <span class="k">key</span>  <span class="o">|</span> <span class="n">key_len</span> <span class="o">|</span> <span class="k">ref</span>  <span class="o">|</span> <span class="k">rows</span>  <span class="o">|</span> <span class="n">filtered</span> <span class="o">|</span> <span class="n">Extra</span>                 <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+-------+---------------+------+---------+------+-------+----------+-----------------------+
</span><span class="c1"></span><span class="o">|</span>  <span class="mi">1</span> <span class="o">|</span> <span class="k">SIMPLE</span>      <span class="o">|</span> <span class="n">t1</span>    <span class="o">|</span> <span class="k">NULL</span>       <span class="o">|</span> <span class="n">range</span> <span class="o">|</span> <span class="n">a</span>             <span class="o">|</span> <span class="n">a</span>    <span class="o">|</span> <span class="mi">5</span>       <span class="o">|</span> <span class="k">NULL</span> <span class="o">|</span> <span class="mi">10001</span> <span class="o">|</span>   <span class="mi">100</span><span class="p">.</span><span class="mi">00</span> <span class="o">|</span> <span class="k">Using</span> <span class="k">index</span> <span class="n">condition</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+-------+---------------+------+---------+------+-------+----------+-----------------------+
</span><span class="c1"></span><span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span><span class="p">,</span> <span class="mi">1</span> <span class="n">warning</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">01</span> <span class="n">sec</span><span class="p">)</span>
</code></pre></div><p>再来看看另外一个语句:</p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">explain</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">t1</span> <span class="k">where</span> <span class="p">(</span><span class="n">a</span> <span class="k">between</span> <span class="mi">1</span> <span class="k">and</span> <span class="mi">1000</span><span class="p">)</span> <span class="k">and</span> <span class="p">(</span><span class="n">b</span> <span class="k">between</span> <span class="mi">50000</span> <span class="k">and</span> <span class="mi">100000</span><span class="p">)</span> <span class="k">order</span> <span class="k">by</span> <span class="n">b</span> <span class="k">limit</span> <span class="mi">1</span><span class="p">;</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+-------+---------------+------+---------+------+-------+----------+------------------------------------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">id</span> <span class="o">|</span> <span class="n">select_type</span> <span class="o">|</span> <span class="k">table</span> <span class="o">|</span> <span class="n">partitions</span> <span class="o">|</span> <span class="k">type</span>  <span class="o">|</span> <span class="n">possible_keys</span> <span class="o">|</span> <span class="k">key</span>  <span class="o">|</span> <span class="n">key_len</span> <span class="o">|</span> <span class="k">ref</span>  <span class="o">|</span> <span class="k">rows</span>  <span class="o">|</span> <span class="n">filtered</span> <span class="o">|</span> <span class="n">Extra</span>                              <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+-------+---------------+------+---------+------+-------+----------+------------------------------------+
</span><span class="c1"></span><span class="o">|</span>  <span class="mi">1</span> <span class="o">|</span> <span class="k">SIMPLE</span>      <span class="o">|</span> <span class="n">t1</span>    <span class="o">|</span> <span class="k">NULL</span>       <span class="o">|</span> <span class="n">range</span> <span class="o">|</span> <span class="n">a</span><span class="p">,</span><span class="n">b</span>           <span class="o">|</span> <span class="n">b</span>    <span class="o">|</span> <span class="mi">5</span>       <span class="o">|</span> <span class="k">NULL</span> <span class="o">|</span> <span class="mi">50007</span> <span class="o">|</span>     <span class="mi">1</span><span class="p">.</span><span class="mi">00</span> <span class="o">|</span> <span class="k">Using</span> <span class="k">index</span> <span class="n">condition</span><span class="p">;</span> <span class="k">Using</span> <span class="k">where</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+-------+---------------+------+---------+------+-------+----------+------------------------------------+
</span><span class="c1"></span><span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span><span class="p">,</span> <span class="mi">1</span> <span class="n">warning</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">01</span> <span class="n">sec</span><span class="p">)</span>
</code></pre></div><p>优化器选择了索引b,rows为50007行,扫描行数的估计值不准确,有选错了索引.</p>
<h3 id="选择异常的处理">选择异常的处理</h3>
<ol>
<li>在语句中使用<code>force index</code>强制选择一个索引.</li>
<li>考虑修改语句,引导MySQL使用我们期望的索引,把上面例子中的<code>order by b limit 1</code>换成<code>order by b, a limit 1</code>试试,看执行计划是怎样的.</li>
<li>在某些场景下,可以新建一个更适合的索引来供优化器选择,或者删掉误用的索引.</li>
</ol>
<h3 id="思考">思考</h3>
<p>第一个例子中是通过session A和session B的配合,来复现选错了索引的情况,如果单独执行session B的语句,会出现什么情况?</p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">delete</span> <span class="k">from</span> <span class="n">t1</span><span class="p">;</span>
<span class="n">Query</span> <span class="n">OK</span><span class="p">,</span> <span class="mi">100000</span> <span class="k">rows</span> <span class="n">affected</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">55</span> <span class="n">sec</span><span class="p">)</span>

<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">call</span> <span class="n">idata</span><span class="p">();</span>
<span class="n">Query</span> <span class="n">OK</span><span class="p">,</span> <span class="mi">0</span> <span class="k">rows</span> <span class="n">affected</span> <span class="p">(</span><span class="mi">2</span><span class="p">.</span><span class="mi">41</span> <span class="n">sec</span><span class="p">)</span>

<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">explain</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">t1</span> <span class="k">where</span> <span class="n">a</span> <span class="k">between</span> <span class="mi">10000</span> <span class="k">and</span> <span class="mi">20000</span><span class="p">;</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+-------+---------------+------+---------+------+-------+----------+-----------------------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">id</span> <span class="o">|</span> <span class="n">select_type</span> <span class="o">|</span> <span class="k">table</span> <span class="o">|</span> <span class="n">partitions</span> <span class="o">|</span> <span class="k">type</span>  <span class="o">|</span> <span class="n">possible_keys</span> <span class="o">|</span> <span class="k">key</span>  <span class="o">|</span> <span class="n">key_len</span> <span class="o">|</span> <span class="k">ref</span>  <span class="o">|</span> <span class="k">rows</span>  <span class="o">|</span> <span class="n">filtered</span> <span class="o">|</span> <span class="n">Extra</span>                 <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+-------+---------------+------+---------+------+-------+----------+-----------------------+
</span><span class="c1"></span><span class="o">|</span>  <span class="mi">1</span> <span class="o">|</span> <span class="k">SIMPLE</span>      <span class="o">|</span> <span class="n">t1</span>    <span class="o">|</span> <span class="k">NULL</span>       <span class="o">|</span> <span class="n">range</span> <span class="o">|</span> <span class="n">a</span>             <span class="o">|</span> <span class="n">a</span>    <span class="o">|</span> <span class="mi">5</span>       <span class="o">|</span> <span class="k">NULL</span> <span class="o">|</span> <span class="mi">10001</span> <span class="o">|</span>   <span class="mi">100</span><span class="p">.</span><span class="mi">00</span> <span class="o">|</span> <span class="k">Using</span> <span class="k">index</span> <span class="n">condition</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+-------+---------------+------+---------+------+-------+----------+-----------------------+
</span><span class="c1"></span><span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span><span class="p">,</span> <span class="mi">1</span> <span class="n">warning</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</code></pre></div><p>索引选择正确,为什么会出现这种差异?session A是马上开启一个一致性读视图,并没有其它操作,是因为什么造成了统计信息的错误?</p>
<p>当session A开启了一致性视图之后,session B的删除是不能直接把数据删除的.这样每一行数据会存在两个版本(<code>MVCC机制</code>),索引a上的数据其实是有两份的.但对于使用主键索引时,rows是直接按照表的行数来估计的,而表的行数,优化器是直接用<code>show table status</code>中的Rows值.</p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">show</span> <span class="k">table</span> <span class="n">status</span> <span class="k">like</span> <span class="s1">&#39;t1&#39;</span><span class="err">\</span><span class="k">G</span>
<span class="o">***************************</span> <span class="mi">1</span><span class="p">.</span> <span class="k">row</span> <span class="o">***************************</span>
           <span class="n">Name</span><span class="p">:</span> <span class="n">t1</span>
         <span class="n">Engine</span><span class="p">:</span> <span class="n">InnoDB</span>
        <span class="k">Version</span><span class="p">:</span> <span class="mi">10</span>
     <span class="n">Row_format</span><span class="p">:</span> <span class="k">Dynamic</span>
           <span class="k">Rows</span><span class="p">:</span> <span class="mi">100256</span>
 <span class="n">Avg_row_length</span><span class="p">:</span> <span class="mi">36</span>
    <span class="n">Data_length</span><span class="p">:</span> <span class="mi">3686400</span>
<span class="n">Max_data_length</span><span class="p">:</span> <span class="mi">0</span>
   <span class="n">Index_length</span><span class="p">:</span> <span class="mi">3178496</span>
      <span class="n">Data_free</span><span class="p">:</span> <span class="mi">15728640</span>
 <span class="n">Auto_increment</span><span class="p">:</span> <span class="mi">300001</span>
    <span class="n">Create_time</span><span class="p">:</span> <span class="mi">2020</span><span class="o">-</span><span class="mi">06</span><span class="o">-</span><span class="mi">16</span> <span class="mi">14</span><span class="p">:</span><span class="mi">24</span><span class="p">:</span><span class="mi">46</span>
    <span class="n">Update_time</span><span class="p">:</span> <span class="mi">2020</span><span class="o">-</span><span class="mi">06</span><span class="o">-</span><span class="mi">16</span> <span class="mi">15</span><span class="p">:</span><span class="mi">10</span><span class="p">:</span><span class="mi">39</span>
     <span class="n">Check_time</span><span class="p">:</span> <span class="k">NULL</span>
      <span class="k">Collation</span><span class="p">:</span> <span class="n">utf8_unicode_ci</span>
       <span class="n">Checksum</span><span class="p">:</span> <span class="k">NULL</span>
 <span class="n">Create_options</span><span class="p">:</span> 
        <span class="k">Comment</span><span class="p">:</span> 
<span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</code></pre></div><h2 id="如何给字符串字段加索引">如何给字符串字段加索引?</h2>
<p>在字符串字段上加索引,是可以指定只取前几个字节的,如下:</p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="cm">/*city全字段加索引*/</span>
<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">alter</span> <span class="k">table</span> <span class="n">t</span> <span class="k">add</span> <span class="k">index</span> <span class="n">index1</span><span class="p">(</span><span class="n">name</span><span class="p">);</span>
<span class="n">Query</span> <span class="n">OK</span><span class="p">,</span> <span class="mi">0</span> <span class="k">rows</span> <span class="n">affected</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">48</span> <span class="n">sec</span><span class="p">)</span>
<span class="n">Records</span><span class="p">:</span> <span class="mi">0</span>  <span class="n">Duplicates</span><span class="p">:</span> <span class="mi">0</span>  <span class="n">Warnings</span><span class="p">:</span> <span class="mi">0</span>

<span class="cm">/*city字段前6个字节加索引*/</span>
<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">alter</span> <span class="k">table</span> <span class="n">t</span> <span class="k">add</span> <span class="k">index</span> <span class="n">index2</span><span class="p">(</span><span class="n">name</span><span class="p">(</span><span class="mi">5</span><span class="p">));</span>
<span class="n">Query</span> <span class="n">OK</span><span class="p">,</span> <span class="mi">0</span> <span class="k">rows</span> <span class="n">affected</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">48</span> <span class="n">sec</span><span class="p">)</span>
<span class="n">Records</span><span class="p">:</span> <span class="mi">0</span>  <span class="n">Duplicates</span><span class="p">:</span> <span class="mi">0</span>  <span class="n">Warnings</span><span class="p">:</span> <span class="mi">0</span>
</code></pre></div><p>针对索引index2,占用的空间更小,这是前缀索引的优势,但带来的损失是可能会增加额外的记录扫描次数.</p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="cm">/*先插入数据*/</span>
<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">insert</span> <span class="k">into</span> <span class="n">t</span> <span class="p">(</span><span class="n">city</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">)</span> <span class="k">values</span> <span class="p">(</span><span class="s1">&#39;hangzhou&#39;</span><span class="p">,</span> <span class="s1">&#39;zhangyi&#39;</span><span class="p">,</span> <span class="mi">20</span><span class="p">);</span>
<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">insert</span> <span class="k">into</span> <span class="n">t</span> <span class="p">(</span><span class="n">city</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">)</span> <span class="k">values</span> <span class="p">(</span><span class="s1">&#39;hangzhou&#39;</span><span class="p">,</span> <span class="s1">&#39;zhanger&#39;</span><span class="p">,</span> <span class="mi">20</span><span class="p">);</span>
<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">insert</span> <span class="k">into</span> <span class="n">t</span> <span class="p">(</span><span class="n">city</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">)</span> <span class="k">values</span> <span class="p">(</span><span class="s1">&#39;hangzhou&#39;</span><span class="p">,</span> <span class="s1">&#39;zhangsan&#39;</span><span class="p">,</span> <span class="mi">20</span><span class="p">);</span>
<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">insert</span> <span class="k">into</span> <span class="n">t</span> <span class="p">(</span><span class="n">city</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">)</span> <span class="k">values</span> <span class="p">(</span><span class="s1">&#39;hangzhou&#39;</span><span class="p">,</span> <span class="s1">&#39;zhangsi&#39;</span><span class="p">,</span> <span class="mi">20</span><span class="p">);</span>
<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">insert</span> <span class="k">into</span> <span class="n">t</span> <span class="p">(</span><span class="n">city</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">)</span> <span class="k">values</span> <span class="p">(</span><span class="s1">&#39;hangzhou&#39;</span><span class="p">,</span> <span class="s1">&#39;zhangwu&#39;</span><span class="p">,</span> <span class="mi">20</span><span class="p">);</span>

<span class="cm">/*查询*/</span>
<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">t</span> <span class="k">where</span> <span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;zhangsi&#39;</span><span class="p">;</span>
<span class="o">+</span><span class="c1">--------+----------+---------+-----+------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">id</span>     <span class="o">|</span> <span class="n">city</span>     <span class="o">|</span> <span class="n">name</span>    <span class="o">|</span> <span class="n">age</span> <span class="o">|</span> <span class="n">addr</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">--------+----------+---------+-----+------+
</span><span class="c1"></span><span class="o">|</span> <span class="mi">128004</span> <span class="o">|</span> <span class="n">hangzhou</span> <span class="o">|</span> <span class="n">zhangsi</span> <span class="o">|</span>  <span class="mi">20</span> <span class="o">|</span> <span class="k">NULL</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">--------+----------+---------+-----+------+
</span><span class="c1"></span><span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">07</span> <span class="n">sec</span><span class="p">)</span>
</code></pre></div><p>查询如果使用的是索引index1</p>
<ol>
<li>在索引树上能直接定位到索引值为<code>zhangsi</code>的记录,取得主键ID的值</li>
<li>然后回表查询整行记录</li>
<li>继续取下一个索引值,发现已不满足条件,循环结束.</li>
</ol>
<p>查询如果使用的是索引index2</p>
<ol>
<li>在索引树上先定位到<code>zhang</code>的记录,取主键ID的值</li>
<li>然后回表获取字段<code>name</code>的值发现不满足条件,丢弃</li>
<li>继续取下一个索引值,值仍为<code>zhang</code>,取出主键ID的值</li>
<li>重复步骤2,若满足条件就把行放入记录集中</li>
<li>直到索引值不为<code>zhang</code>,循环结束.</li>
</ol>
<p>使用索引index2,总共会有5次回表,扫描了5次.使用前缀索引,导致查询语句读数据的次数变多了.如果索引index2设置为<code>name(6)</code>列?此时只需要扫描2次了.</p>
<p><em><strong>使用前缀索引,定义好长度,就可以做到既节省空间,又不用额外增加太多的查询成本.</strong></em></p>
<p>建立索引时要关注索引的区分度,区分度越高越好.可以通过统计索引上有多少个不同的值来判断要使用多长的前缀.从如下sql可以看出,可以选用<code>name(4)</code>来作为索引.</p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="cm">/*统计各个长度的前缀数量*/</span>
<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">select</span> <span class="k">count</span><span class="p">(</span><span class="k">distinct</span> <span class="n">name</span><span class="p">)</span> <span class="k">as</span> <span class="n">L</span><span class="p">,</span> <span class="k">count</span><span class="p">(</span><span class="k">distinct</span> <span class="k">left</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="mi">4</span><span class="p">))</span> <span class="k">as</span> <span class="n">L4</span><span class="p">,</span> <span class="k">count</span><span class="p">(</span><span class="k">distinct</span> <span class="k">left</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span> <span class="k">as</span> <span class="n">L5</span><span class="p">,</span> <span class="k">count</span><span class="p">(</span><span class="k">distinct</span> <span class="k">left</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span> <span class="k">as</span> <span class="n">L6</span><span class="p">,</span> <span class="k">count</span><span class="p">(</span><span class="k">distinct</span> <span class="k">left</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="mi">7</span><span class="p">))</span> <span class="k">as</span> <span class="n">L7</span> <span class="n">f</span>
<span class="n">rom</span> <span class="n">t</span><span class="p">;</span><span class="o">+</span><span class="c1">-----+-----+-----+-----+-----+
</span><span class="c1"></span><span class="o">|</span> <span class="n">L</span>   <span class="o">|</span> <span class="n">L4</span>  <span class="o">|</span> <span class="n">L5</span>  <span class="o">|</span> <span class="n">L6</span>  <span class="o">|</span> <span class="n">L7</span>  <span class="o">|</span>
<span class="o">+</span><span class="c1">-----+-----+-----+-----+-----+
</span><span class="c1"></span><span class="o">|</span> <span class="mi">149</span> <span class="o">|</span> <span class="mi">145</span> <span class="o">|</span> <span class="mi">145</span> <span class="o">|</span> <span class="mi">148</span> <span class="o">|</span> <span class="mi">149</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">-----+-----+-----+-----+-----+
</span><span class="c1"></span><span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">52</span> <span class="n">sec</span><span class="p">)</span>
</code></pre></div><p><em><strong>当使用前缀索引时,会导致覆盖索引无效(无论前缀使用多少位).</strong></em></p>
<p>以<code>select id, name from t where name = 'zhangsi'</code>为例,如果使用索引index2(就算使用<code>name(16)</code>为索引),获取主键ID的值后还必须回表,然后判断name的值是否满足条件,这就导致覆盖索引无效了.</p>
<h2 id="索引失效">索引失效</h2>
<h3 id="条件字段函数操作">条件字段函数操作</h3>
<p>如果在<code>where</code>条件查询的字段上使用函数为如何?</p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="cm">/*创建交易流水表*/</span>
<span class="k">CREATE</span> <span class="k">TABLE</span> <span class="o">`</span><span class="n">tradelog</span><span class="o">`</span> <span class="p">(</span>
  <span class="o">`</span><span class="n">id</span><span class="o">`</span> <span class="nb">int</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="o">`</span><span class="n">tradeid</span><span class="o">`</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">32</span><span class="p">)</span> <span class="k">DEFAULT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="o">`</span><span class="k">operator</span><span class="o">`</span> <span class="nb">int</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="k">DEFAULT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="o">`</span><span class="n">t_modified</span><span class="o">`</span> <span class="n">datetime</span> <span class="k">DEFAULT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="p">(</span><span class="o">`</span><span class="n">id</span><span class="o">`</span><span class="p">),</span>
  <span class="k">KEY</span> <span class="o">`</span><span class="n">tradeid</span><span class="o">`</span> <span class="p">(</span><span class="o">`</span><span class="n">tradeid</span><span class="o">`</span><span class="p">),</span>
  <span class="k">KEY</span> <span class="o">`</span><span class="n">t_modified</span><span class="o">`</span> <span class="p">(</span><span class="o">`</span><span class="n">t_modified</span><span class="o">`</span><span class="p">)</span>
<span class="p">)</span> <span class="n">ENGINE</span><span class="o">=</span><span class="n">InnoDB</span> <span class="k">DEFAULT</span> <span class="n">CHARSET</span><span class="o">=</span><span class="n">utf8mb4</span>

<span class="cm">/*整个表模拟了10万行数据*/</span>
<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">select</span> <span class="k">count</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">from</span> <span class="n">tradelog</span><span class="p">;</span>
<span class="o">+</span><span class="c1">----------+
</span><span class="c1"></span><span class="o">|</span> <span class="k">count</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----------+
</span><span class="c1"></span><span class="o">|</span>   <span class="mi">100000</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----------+
</span><span class="c1"></span><span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">02</span> <span class="n">sec</span><span class="p">)</span>

<span class="cm">/*在字段t_modified使用month函数*/</span>
<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">explain</span> <span class="k">select</span> <span class="k">count</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">from</span> <span class="n">tradelog</span> <span class="k">where</span> <span class="k">month</span><span class="p">(</span><span class="n">t_modified</span><span class="p">)</span> <span class="o">=</span> <span class="mi">7</span><span class="p">;</span>
<span class="o">+</span><span class="c1">----+-------------+----------+------------+-------+---------------+------------+---------+------+--------+----------+--------------------------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">id</span> <span class="o">|</span> <span class="n">select_type</span> <span class="o">|</span> <span class="k">table</span>    <span class="o">|</span> <span class="n">partitions</span> <span class="o">|</span> <span class="k">type</span>  <span class="o">|</span> <span class="n">possible_keys</span> <span class="o">|</span> <span class="k">key</span>        <span class="o">|</span> <span class="n">key_len</span> <span class="o">|</span> <span class="k">ref</span>  <span class="o">|</span> <span class="k">rows</span>   <span class="o">|</span> <span class="n">filtered</span> <span class="o">|</span> <span class="n">Extra</span>                    <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+----------+------------+-------+---------------+------------+---------+------+--------+----------+--------------------------+
</span><span class="c1"></span><span class="o">|</span>  <span class="mi">1</span> <span class="o">|</span> <span class="k">SIMPLE</span>      <span class="o">|</span> <span class="n">tradelog</span> <span class="o">|</span> <span class="k">NULL</span>       <span class="o">|</span> <span class="k">index</span> <span class="o">|</span> <span class="k">NULL</span>          <span class="o">|</span> <span class="n">t_modified</span> <span class="o">|</span> <span class="mi">6</span>       <span class="o">|</span> <span class="k">NULL</span> <span class="o">|</span> <span class="mi">100194</span> <span class="o">|</span>   <span class="mi">100</span><span class="p">.</span><span class="mi">00</span> <span class="o">|</span> <span class="k">Using</span> <span class="k">where</span><span class="p">;</span> <span class="k">Using</span> <span class="k">index</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+----------+------------+-------+---------------+------------+---------+------+--------+----------+--------------------------+
</span><span class="c1"></span><span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span><span class="p">,</span> <span class="mi">1</span> <span class="n">warning</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</code></pre></div><p>查询语句是统计所有7月份的流水,从Extra可以看出是使用了索引<code>t_modified</code>,从rows看是索引全扫描.使用函数<code>month</code>之后,获取到的值并不是有序的,所以无法利用索引的有序性来快速查找,只能是全索引扫描.</p>
<p>为了能利用索引的快速定位能力,就需要把上面的sql改造成按照字段本身的范围查询</p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="cm">/*按照范围来查询,利用索引特性快速定位*/</span>
<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">explain</span> <span class="k">select</span> <span class="k">count</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">from</span> <span class="n">tradelog</span> <span class="k">where</span>
    <span class="o">-&gt;</span> <span class="p">(</span><span class="n">t_modified</span> <span class="o">&gt;=</span> <span class="s1">&#39;2016-07-01&#39;</span> <span class="k">and</span> <span class="n">t_modified</span> <span class="o">&lt;</span> <span class="s1">&#39;2016-08-01&#39;</span><span class="p">)</span> <span class="k">or</span>
    <span class="o">-&gt;</span> <span class="p">(</span><span class="n">t_modified</span> <span class="o">&gt;=</span> <span class="s1">&#39;2017-07-01&#39;</span> <span class="k">and</span> <span class="n">t_modified</span> <span class="o">&lt;</span> <span class="s1">&#39;2017-08-01&#39;</span><span class="p">)</span> <span class="k">or</span>
    <span class="o">-&gt;</span> <span class="p">(</span><span class="n">t_modified</span> <span class="o">&gt;=</span> <span class="s1">&#39;2018-07-01&#39;</span> <span class="k">and</span> <span class="n">t_modified</span> <span class="o">&lt;</span> <span class="s1">&#39;2018-08-01&#39;</span><span class="p">);</span>
<span class="o">+</span><span class="c1">----+-------------+----------+------------+-------+---------------+------------+---------+------+------+----------+--------------------------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">id</span> <span class="o">|</span> <span class="n">select_type</span> <span class="o">|</span> <span class="k">table</span>    <span class="o">|</span> <span class="n">partitions</span> <span class="o">|</span> <span class="k">type</span>  <span class="o">|</span> <span class="n">possible_keys</span> <span class="o">|</span> <span class="k">key</span>        <span class="o">|</span> <span class="n">key_len</span> <span class="o">|</span> <span class="k">ref</span>  <span class="o">|</span> <span class="k">rows</span> <span class="o">|</span> <span class="n">filtered</span> <span class="o">|</span> <span class="n">Extra</span>                    <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+----------+------------+-------+---------------+------------+---------+------+------+----------+--------------------------+
</span><span class="c1"></span><span class="o">|</span>  <span class="mi">1</span> <span class="o">|</span> <span class="k">SIMPLE</span>      <span class="o">|</span> <span class="n">tradelog</span> <span class="o">|</span> <span class="k">NULL</span>       <span class="o">|</span> <span class="n">range</span> <span class="o">|</span> <span class="n">t_modified</span>    <span class="o">|</span> <span class="n">t_modified</span> <span class="o">|</span> <span class="mi">6</span>       <span class="o">|</span> <span class="k">NULL</span> <span class="o">|</span> <span class="mi">5605</span> <span class="o">|</span>   <span class="mi">100</span><span class="p">.</span><span class="mi">00</span> <span class="o">|</span> <span class="k">Using</span> <span class="k">where</span><span class="p">;</span> <span class="k">Using</span> <span class="k">index</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+----------+------------+-------+---------------+------------+---------+------+------+----------+--------------------------+
</span><span class="c1"></span><span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span><span class="p">,</span> <span class="mi">1</span> <span class="n">warning</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</code></pre></div><p>再来看看一个非常简单的加法操作,也是全表扫描,无法利用主键索引.</p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">explain</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">tradelog</span> <span class="k">where</span> <span class="n">id</span><span class="o">+</span><span class="mi">1</span><span class="o">=</span><span class="mi">1000</span><span class="p">;</span>
<span class="o">+</span><span class="c1">----+-------------+----------+------------+------+---------------+------+---------+------+--------+----------+-------------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">id</span> <span class="o">|</span> <span class="n">select_type</span> <span class="o">|</span> <span class="k">table</span>    <span class="o">|</span> <span class="n">partitions</span> <span class="o">|</span> <span class="k">type</span> <span class="o">|</span> <span class="n">possible_keys</span> <span class="o">|</span> <span class="k">key</span>  <span class="o">|</span> <span class="n">key_len</span> <span class="o">|</span> <span class="k">ref</span>  <span class="o">|</span> <span class="k">rows</span>   <span class="o">|</span> <span class="n">filtered</span> <span class="o">|</span> <span class="n">Extra</span>       <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+----------+------------+------+---------------+------+---------+------+--------+----------+-------------+
</span><span class="c1"></span><span class="o">|</span>  <span class="mi">1</span> <span class="o">|</span> <span class="k">SIMPLE</span>      <span class="o">|</span> <span class="n">tradelog</span> <span class="o">|</span> <span class="k">NULL</span>       <span class="o">|</span> <span class="k">ALL</span>  <span class="o">|</span> <span class="k">NULL</span>          <span class="o">|</span> <span class="k">NULL</span> <span class="o">|</span> <span class="k">NULL</span>    <span class="o">|</span> <span class="k">NULL</span> <span class="o">|</span> <span class="mi">100194</span> <span class="o">|</span>   <span class="mi">100</span><span class="p">.</span><span class="mi">00</span> <span class="o">|</span> <span class="k">Using</span> <span class="k">where</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+----------+------------+------+---------------+------+---------+------+--------+----------+-------------+
</span><span class="c1"></span><span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span><span class="p">,</span> <span class="mi">1</span> <span class="n">warning</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</code></pre></div><p><em><strong>在索引字段上使用函数会导致无法利用索引的快速定位能力,不管是什么函数,都会导致优化器认为无法使用索引快速定位.</strong></em></p>
<h3 id="隐式类型转换">隐式类型转换</h3>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">explain</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">tradelog</span> <span class="k">where</span> <span class="n">tradeid</span> <span class="o">=</span> <span class="mi">6981747220</span><span class="p">;</span>
<span class="o">+</span><span class="c1">----+-------------+----------+------------+------+---------------+------+---------+------+--------+----------+-------------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">id</span> <span class="o">|</span> <span class="n">select_type</span> <span class="o">|</span> <span class="k">table</span>    <span class="o">|</span> <span class="n">partitions</span> <span class="o">|</span> <span class="k">type</span> <span class="o">|</span> <span class="n">possible_keys</span> <span class="o">|</span> <span class="k">key</span>  <span class="o">|</span> <span class="n">key_len</span> <span class="o">|</span> <span class="k">ref</span>  <span class="o">|</span> <span class="k">rows</span>   <span class="o">|</span> <span class="n">filtered</span> <span class="o">|</span> <span class="n">Extra</span>       <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+----------+------------+------+---------------+------+---------+------+--------+----------+-------------+
</span><span class="c1"></span><span class="o">|</span>  <span class="mi">1</span> <span class="o">|</span> <span class="k">SIMPLE</span>      <span class="o">|</span> <span class="n">tradelog</span> <span class="o">|</span> <span class="k">NULL</span>       <span class="o">|</span> <span class="k">ALL</span>  <span class="o">|</span> <span class="n">tradeid</span>       <span class="o">|</span> <span class="k">NULL</span> <span class="o">|</span> <span class="k">NULL</span>    <span class="o">|</span> <span class="k">NULL</span> <span class="o">|</span> <span class="mi">100194</span> <span class="o">|</span>    <span class="mi">10</span><span class="p">.</span><span class="mi">00</span> <span class="o">|</span> <span class="k">Using</span> <span class="k">where</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+----------+------------+------+---------------+------+---------+------+--------+----------+-------------+
</span><span class="c1"></span><span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span><span class="p">,</span> <span class="mi">3</span> <span class="n">warnings</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">01</span> <span class="n">sec</span><span class="p">)</span>
</code></pre></div><p>字段<code>tradeid</code>上是有索引的,而上面的语句直接走的主键全表扫描,为什么没有使用<code>tradeid</code>索引?</p>
<p>在表中字段<code>tradeid</code>的定义是<code>varchar(32)</code>,为字符串类型.而<code>where</code>里等号右边是个整数,当两边类型不一致时,MySQL是如何处理的?</p>
<p>当字符串与数字进行比较时,是把字符串转化为数字还是把数字转换为字符串?</p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">select</span> <span class="s2">&#34;10&#34;</span> <span class="o">&gt;</span> <span class="mi">9</span><span class="p">;</span>
<span class="o">+</span><span class="c1">----------+
</span><span class="c1"></span><span class="o">|</span> <span class="s2">&#34;10&#34;</span> <span class="o">&gt;</span> <span class="mi">9</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----------+
</span><span class="c1"></span><span class="o">|</span>        <span class="mi">1</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----------+
</span><span class="c1"></span><span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</code></pre></div><p>上面<code>select &quot;10&quot; &gt; 9</code>返回1,说明是把字符串转换为数字了.</p>
<p>实际上语句<code>select * from tradelog where tradeid = 6981747220</code>相当于被转化为了<code>select * from tradelog where CAST(tradeid AS signed int) = 6981747220</code>,这条语句就触发了上面说的:对索引字段做函数操作,优化器放弃走树搜索功能.</p>
<h3 id="隐式字符编码转换">隐式字符编码转换</h3>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="cm">/*新建交易明细表*/</span>
<span class="k">CREATE</span> <span class="k">TABLE</span> <span class="o">`</span><span class="n">trade_detail</span><span class="o">`</span> <span class="p">(</span>
  <span class="o">`</span><span class="n">id</span><span class="o">`</span> <span class="nb">int</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="o">`</span><span class="n">tradeid</span><span class="o">`</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">32</span><span class="p">)</span> <span class="k">DEFAULT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="o">`</span><span class="n">trade_step</span><span class="o">`</span> <span class="nb">int</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="k">DEFAULT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="o">`</span><span class="n">step_info</span><span class="o">`</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">32</span><span class="p">)</span> <span class="k">DEFAULT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="p">(</span><span class="o">`</span><span class="n">id</span><span class="o">`</span><span class="p">),</span>
  <span class="k">KEY</span> <span class="o">`</span><span class="n">tradeid</span><span class="o">`</span> <span class="p">(</span><span class="o">`</span><span class="n">tradeid</span><span class="o">`</span><span class="p">)</span>
<span class="p">)</span> <span class="n">ENGINE</span><span class="o">=</span><span class="n">InnoDB</span> <span class="k">DEFAULT</span> <span class="n">CHARSET</span><span class="o">=</span><span class="n">utf8</span>

<span class="cm">/*关联查询*/</span>
<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">explain</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">tradelog</span> <span class="n">l</span><span class="p">,</span> <span class="n">trade_detail</span> <span class="n">d</span> <span class="k">where</span> <span class="n">d</span><span class="p">.</span><span class="n">tradeid</span><span class="o">=</span><span class="n">l</span><span class="p">.</span><span class="n">tradeid</span> <span class="k">and</span> <span class="n">l</span><span class="p">.</span><span class="n">id</span><span class="o">=</span><span class="mi">100002</span><span class="p">;</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+-------+-----------------+---------+---------+-------+------+----------+-------------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">id</span> <span class="o">|</span> <span class="n">select_type</span> <span class="o">|</span> <span class="k">table</span> <span class="o">|</span> <span class="n">partitions</span> <span class="o">|</span> <span class="k">type</span>  <span class="o">|</span> <span class="n">possible_keys</span>   <span class="o">|</span> <span class="k">key</span>     <span class="o">|</span> <span class="n">key_len</span> <span class="o">|</span> <span class="k">ref</span>   <span class="o">|</span> <span class="k">rows</span> <span class="o">|</span> <span class="n">filtered</span> <span class="o">|</span> <span class="n">Extra</span>       <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+-------+-----------------+---------+---------+-------+------+----------+-------------+
</span><span class="c1"></span><span class="o">|</span>  <span class="mi">1</span> <span class="o">|</span> <span class="k">SIMPLE</span>      <span class="o">|</span> <span class="n">l</span>     <span class="o">|</span> <span class="k">NULL</span>       <span class="o">|</span> <span class="n">const</span> <span class="o">|</span> <span class="k">PRIMARY</span><span class="p">,</span><span class="n">tradeid</span> <span class="o">|</span> <span class="k">PRIMARY</span> <span class="o">|</span> <span class="mi">4</span>       <span class="o">|</span> <span class="n">const</span> <span class="o">|</span>    <span class="mi">1</span> <span class="o">|</span>   <span class="mi">100</span><span class="p">.</span><span class="mi">00</span> <span class="o">|</span> <span class="k">NULL</span>        <span class="o">|</span>
<span class="o">|</span>  <span class="mi">1</span> <span class="o">|</span> <span class="k">SIMPLE</span>      <span class="o">|</span> <span class="n">d</span>     <span class="o">|</span> <span class="k">NULL</span>       <span class="o">|</span> <span class="k">ALL</span>   <span class="o">|</span> <span class="k">NULL</span>            <span class="o">|</span> <span class="k">NULL</span>    <span class="o">|</span> <span class="k">NULL</span>    <span class="o">|</span> <span class="k">NULL</span>  <span class="o">|</span>   <span class="mi">11</span> <span class="o">|</span>   <span class="mi">100</span><span class="p">.</span><span class="mi">00</span> <span class="o">|</span> <span class="k">Using</span> <span class="k">where</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+-------+-----------------+---------+---------+-------+------+----------+-------------+
</span><span class="c1"></span><span class="mi">2</span> <span class="k">rows</span> <span class="k">in</span> <span class="k">set</span><span class="p">,</span> <span class="mi">1</span> <span class="n">warning</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</code></pre></div><p>驱动表为表<code>tradelog</code>,被驱动表为表<code>trade_detail</code>.查询对表<code>tradelog</code>是走的主键索引,但表<code>trade_detail</code>却是全表扫描,但在其字段<code>tradeid</code>是存在索引的,为何?</p>
<p>对比发现,表<code>tradelog</code>的字符集是<code>utf8mb4</code>,而表<code>trade_detail</code>的字符集是<code>utf8</code>,字符集不一样时查询时如何处理的?字符集<code>utf8mb4</code>是<code>utf8</code>的超集,MySQL会把<code>utf8</code>字符串转换为<code>utf8mb4</code>字符集,然后再做比较.查询语句会转化为如下:</p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">explain</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">tradelog</span> <span class="n">l</span><span class="p">,</span> <span class="n">trade_detail</span> <span class="n">d</span> <span class="k">where</span> <span class="k">convert</span><span class="p">(</span><span class="n">d</span><span class="p">.</span><span class="n">tradeid</span> <span class="k">USING</span> <span class="n">utf8mb4</span><span class="p">)</span><span class="o">=</span><span class="n">l</span><span class="p">.</span><span class="n">tradeid</span> <span class="k">and</span> <span class="n">l</span><span class="p">.</span><span class="n">id</span><span class="o">=</span><span class="mi">100002</span><span class="p">;</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+-------+-----------------+---------+---------+-------+------+----------+-------------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">id</span> <span class="o">|</span> <span class="n">select_type</span> <span class="o">|</span> <span class="k">table</span> <span class="o">|</span> <span class="n">partitions</span> <span class="o">|</span> <span class="k">type</span>  <span class="o">|</span> <span class="n">possible_keys</span>   <span class="o">|</span> <span class="k">key</span>     <span class="o">|</span> <span class="n">key_len</span> <span class="o">|</span> <span class="k">ref</span>   <span class="o">|</span> <span class="k">rows</span> <span class="o">|</span> <span class="n">filtered</span> <span class="o">|</span> <span class="n">Extra</span>       <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+-------+-----------------+---------+---------+-------+------+----------+-------------+
</span><span class="c1"></span><span class="o">|</span>  <span class="mi">1</span> <span class="o">|</span> <span class="k">SIMPLE</span>      <span class="o">|</span> <span class="n">l</span>     <span class="o">|</span> <span class="k">NULL</span>       <span class="o">|</span> <span class="n">const</span> <span class="o">|</span> <span class="k">PRIMARY</span><span class="p">,</span><span class="n">tradeid</span> <span class="o">|</span> <span class="k">PRIMARY</span> <span class="o">|</span> <span class="mi">4</span>       <span class="o">|</span> <span class="n">const</span> <span class="o">|</span>    <span class="mi">1</span> <span class="o">|</span>   <span class="mi">100</span><span class="p">.</span><span class="mi">00</span> <span class="o">|</span> <span class="k">NULL</span>        <span class="o">|</span>
<span class="o">|</span>  <span class="mi">1</span> <span class="o">|</span> <span class="k">SIMPLE</span>      <span class="o">|</span> <span class="n">d</span>     <span class="o">|</span> <span class="k">NULL</span>       <span class="o">|</span> <span class="k">ALL</span>   <span class="o">|</span> <span class="k">NULL</span>            <span class="o">|</span> <span class="k">NULL</span>    <span class="o">|</span> <span class="k">NULL</span>    <span class="o">|</span> <span class="k">NULL</span>  <span class="o">|</span>   <span class="mi">11</span> <span class="o">|</span>   <span class="mi">100</span><span class="p">.</span><span class="mi">00</span> <span class="o">|</span> <span class="k">Using</span> <span class="k">where</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+-------+-----------------+---------+---------+-------+------+----------+-------------+
</span><span class="c1"></span><span class="mi">2</span> <span class="k">rows</span> <span class="k">in</span> <span class="k">set</span><span class="p">,</span> <span class="mi">1</span> <span class="n">warning</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">01</span> <span class="n">sec</span><span class="p">)</span>
</code></pre></div><p>转化后的语句对表<code>trade_detail</code>的索引上的字段做了函数操作,此时优化器是会放弃树搜索功能的,就导致做了全表扫描.</p>
<p>再来看看如下语句:</p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">explain</span> <span class="k">select</span> <span class="n">l</span><span class="p">.</span><span class="k">operator</span> <span class="k">from</span> <span class="n">tradelog</span> <span class="n">l</span><span class="p">,</span> <span class="n">trade_detail</span> <span class="n">d</span> <span class="k">where</span> <span class="n">d</span><span class="p">.</span><span class="n">tradeid</span><span class="o">=</span><span class="n">l</span><span class="p">.</span><span class="n">tradeid</span> <span class="k">and</span> <span class="n">d</span><span class="p">.</span><span class="n">id</span><span class="o">=</span><span class="mi">4</span><span class="p">;</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+-------+---------------+---------+---------+-------+------+----------+-------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">id</span> <span class="o">|</span> <span class="n">select_type</span> <span class="o">|</span> <span class="k">table</span> <span class="o">|</span> <span class="n">partitions</span> <span class="o">|</span> <span class="k">type</span>  <span class="o">|</span> <span class="n">possible_keys</span> <span class="o">|</span> <span class="k">key</span>     <span class="o">|</span> <span class="n">key_len</span> <span class="o">|</span> <span class="k">ref</span>   <span class="o">|</span> <span class="k">rows</span> <span class="o">|</span> <span class="n">filtered</span> <span class="o">|</span> <span class="n">Extra</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+-------+---------------+---------+---------+-------+------+----------+-------+
</span><span class="c1"></span><span class="o">|</span>  <span class="mi">1</span> <span class="o">|</span> <span class="k">SIMPLE</span>      <span class="o">|</span> <span class="n">d</span>     <span class="o">|</span> <span class="k">NULL</span>       <span class="o">|</span> <span class="n">const</span> <span class="o">|</span> <span class="k">PRIMARY</span>       <span class="o">|</span> <span class="k">PRIMARY</span> <span class="o">|</span> <span class="mi">4</span>       <span class="o">|</span> <span class="n">const</span> <span class="o">|</span>    <span class="mi">1</span> <span class="o">|</span>   <span class="mi">100</span><span class="p">.</span><span class="mi">00</span> <span class="o">|</span> <span class="k">NULL</span>  <span class="o">|</span>
<span class="o">|</span>  <span class="mi">1</span> <span class="o">|</span> <span class="k">SIMPLE</span>      <span class="o">|</span> <span class="n">l</span>     <span class="o">|</span> <span class="k">NULL</span>       <span class="o">|</span> <span class="k">ref</span>   <span class="o">|</span> <span class="n">tradeid</span>       <span class="o">|</span> <span class="n">tradeid</span> <span class="o">|</span> <span class="mi">131</span>     <span class="o">|</span> <span class="n">const</span> <span class="o">|</span>    <span class="mi">1</span> <span class="o">|</span>   <span class="mi">100</span><span class="p">.</span><span class="mi">00</span> <span class="o">|</span> <span class="k">NULL</span>  <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+-------+---------------+---------+---------+-------+------+----------+-------+
</span><span class="c1"></span><span class="mi">2</span> <span class="k">rows</span> <span class="k">in</span> <span class="k">set</span><span class="p">,</span> <span class="mi">1</span> <span class="n">warning</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</code></pre></div><p>驱动表为表<code>trade_detail</code>,被驱动表为表<code>tradelog</code>.这个语句里两个表都有用到索引,但驱动表用的是主键索引,而被驱动表用的是索引<code>tradeid</code>.语句在转化时是针对驱动表的<code>tradeid</code>字段,所以被驱动表可以用上索引<code>tradeid</code>.</p>
<p>针对字符集不一样的情况下的优化:</p>
<ul>
<li>修改表结构,把字符集设置成一样.</li>
<li>修改sql语句,可以主动把驱动表的字符集修改为被驱动表的字符集,使得可以使用被驱动表的索引.</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">explain</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">tradelog</span> <span class="n">l</span><span class="p">,</span> <span class="n">trade_detail</span> <span class="n">d</span> <span class="k">where</span> <span class="n">d</span><span class="p">.</span><span class="n">tradeid</span><span class="o">=</span><span class="k">convert</span><span class="p">(</span><span class="n">l</span><span class="p">.</span><span class="n">tradeid</span> <span class="k">using</span> <span class="n">utf8</span><span class="p">)</span> <span class="k">and</span> <span class="n">l</span><span class="p">.</span><span class="n">id</span><span class="o">=</span><span class="mi">100002</span><span class="p">;</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+-------+---------------+---------+---------+-------+------+----------+-------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">id</span> <span class="o">|</span> <span class="n">select_type</span> <span class="o">|</span> <span class="k">table</span> <span class="o">|</span> <span class="n">partitions</span> <span class="o">|</span> <span class="k">type</span>  <span class="o">|</span> <span class="n">possible_keys</span> <span class="o">|</span> <span class="k">key</span>     <span class="o">|</span> <span class="n">key_len</span> <span class="o">|</span> <span class="k">ref</span>   <span class="o">|</span> <span class="k">rows</span> <span class="o">|</span> <span class="n">filtered</span> <span class="o">|</span> <span class="n">Extra</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+-------+---------------+---------+---------+-------+------+----------+-------+
</span><span class="c1"></span><span class="o">|</span>  <span class="mi">1</span> <span class="o">|</span> <span class="k">SIMPLE</span>      <span class="o">|</span> <span class="n">l</span>     <span class="o">|</span> <span class="k">NULL</span>       <span class="o">|</span> <span class="n">const</span> <span class="o">|</span> <span class="k">PRIMARY</span>       <span class="o">|</span> <span class="k">PRIMARY</span> <span class="o">|</span> <span class="mi">4</span>       <span class="o">|</span> <span class="n">const</span> <span class="o">|</span>    <span class="mi">1</span> <span class="o">|</span>   <span class="mi">100</span><span class="p">.</span><span class="mi">00</span> <span class="o">|</span> <span class="k">NULL</span>  <span class="o">|</span>
<span class="o">|</span>  <span class="mi">1</span> <span class="o">|</span> <span class="k">SIMPLE</span>      <span class="o">|</span> <span class="n">d</span>     <span class="o">|</span> <span class="k">NULL</span>       <span class="o">|</span> <span class="k">ref</span>   <span class="o">|</span> <span class="n">tradeid</span>       <span class="o">|</span> <span class="n">tradeid</span> <span class="o">|</span> <span class="mi">99</span>      <span class="o">|</span> <span class="n">const</span> <span class="o">|</span>    <span class="mi">4</span> <span class="o">|</span>   <span class="mi">100</span><span class="p">.</span><span class="mi">00</span> <span class="o">|</span> <span class="k">NULL</span>  <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+-------+------------+-------+---------------+---------+---------+-------+------+----------+-------+
</span><span class="c1"></span><span class="mi">2</span> <span class="k">rows</span> <span class="k">in</span> <span class="k">set</span><span class="p">,</span> <span class="mi">1</span> <span class="n">warning</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">01</span> <span class="n">sec</span><span class="p">)</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>MySQL基于GTID复制</title>
			<link>https://shenbaise9527.com/db/mysql%E5%9F%BA%E4%BA%8Egtid%E5%A4%8D%E5%88%B6/</link>
			<pubDate>Mon, 09 Nov 2020 21:27:12 +0800</pubDate>
			
			<guid>https://shenbaise9527.com/db/mysql%E5%9F%BA%E4%BA%8Egtid%E5%A4%8D%E5%88%B6/</guid>
			<description>开启GTID. # 启用gtid模式,每个事务有个唯一的id,全局事务ID,事务提交时分配,基于gtid来复制. gtid_mode=ON # 开启gtid的一些安全限制.</description>
			<content type="html"><![CDATA[<h2 id="开启gtid">开启GTID.</h2>
<pre><code># 启用gtid模式,每个事务有个唯一的id,全局事务ID,事务提交时分配,基于gtid来复制.
gtid_mode=ON

# 开启gtid的一些安全限制.
enforce_gtid_consistency=ON

# gtid生成方式,默认为自动.
# gtid_next=AUTOMATIC

# 从库启动复制,master_auto_position=1表示开启基于GTID的复制.
CHANGE MASTER TO MASTER_HOST='xxx', MASTER_PORT=3306, MASTER_USER='user_name', MASTER_PASSWORD='password', MASTER_AUTO_POSITION=1;
start slave;
</code></pre><h2 id="并行复制参数">并行复制参数.</h2>
<pre><code># 并行复制类型,默认值为DATABASE,即按库来并行复制,LOGICAL_CLOCK为根据同时进入prepare和commit来并行复制.
slave_parallel_type=LOGICAL_CLOCK

# 并行复制线程数.
slave_parallel_workers=8

# 并行复制策略,默认值为COMMIT_ORDER,即按照上面的prepare和commit来并行;
# WRITESET对事务中的每一行计算hash,组合成writeset,如果两个事务没有更新相同行,writeset会没有交集可并行.
# WRITESET直接记录在binlog,不需要解析event,对binlog的格式没要求,5.7.22版本的新功能,binlog协议不向上兼容.
# WRITESET_SESSION,即在WRITESET基础上多了个约束,主库上同一线程先后执行的事务,在备库也要保证相同的顺序.
binlog_transaction_dependency_tracking=WRITESET
transaction_write_set_extraction=XXHASH64

# 记录writeset的容量,不需要修改,复制时可以并发的事务数大概为该值的一半.
#binlog_transaction_dependency_history_size=25000

# slave把从master接收到的binlog记录到自己的binlog中,主要用于级联复制的场景.
log_slave_updates=ON
</code></pre><h2 id="gtid的限制">GTID的限制.</h2>
<ol>
<li>从复制时报错,error: 1032
<code>select * from performance_schema.replication_applier_status_by_worker</code>可以查询从复制时的错误.
error: 1032,主删除数据,但从没有相应的记录.遇到错误主从复制会停止.</li>
</ol>
<p>解决方案是在从库上跳过主库的这个事务:</p>
<pre><code>-- 设置从库上的gtid_next为报错事务的gtid.
set gtid_next=&quot;af299bf7-dc7c-11ea-8417-0242ac170002:22805&quot;;
begin;
commit;
start slave;
</code></pre><ol start="2">
<li>create function报错,error: 1418
[Err] 1418 - This function has none of DETERMINISTIC, NO SQL, or READS SQL DATA in its declaration and binary logging is enabled (you might want to use the less safe log_bin_trust_function_creators variable)</li>
</ol>
<p>解决方案:</p>
<pre><code>DELIMITER ;;
CREATE FUNCTION `xxxx`(user_id INT) RETURNS varchar(4000) CHARSET utf8 COLLATE utf8_unicode_ci
-- 添加关键字DETERMINISTIC.
DETERMINISTIC
BEGIN
</code></pre><ol start="3">
<li>create table报错,error: 1786
[Err] 1786 - Statement violates GTID consistency: CREATE TABLE &hellip; SELECT.</li>
</ol>
<p>解决方案,需要拆分成两部分,create语句和insert语句:</p>
<pre><code>CREATE TABLE xxxx LIKE t;
INSERT INTO xxxx SELECT * FROM t;
</code></pre><ol start="4">
<li>create temporary报错,error: 1787
[Err] 1787 - Statement violates GTID consistency: CREATE TEMPORARY TABLE and DROP TEMPORARY TABLE can only be executed outside transactional context.  These statements are also not allowed in a function or trigger because functions and triggers are also considered to be multi-statement transactions.</li>
</ol>
<p>解决方案:
在<code>autocommit=1</code>的情况下可以创建临时表,主库创建临时表时不产生GTID信息,所以不会同步到从库,但在删除临时表时会产生GTID,从在处理时会报错,导致复制中断.</p>
<h2 id="查看gtid">查看GTID</h2>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="c1">-- 主库上执行,Executed_Gtid_Set表示已执行过的GTID集合.
</span><span class="c1"></span><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">show</span> <span class="n">master</span> <span class="n">status</span><span class="err">\</span><span class="k">G</span>
<span class="o">***************************</span> <span class="mi">1</span><span class="p">.</span> <span class="k">row</span> <span class="o">***************************</span>
             <span class="n">File</span><span class="p">:</span> <span class="n">bin</span><span class="p">.</span><span class="mi">000005</span>
         <span class="k">Position</span><span class="p">:</span> <span class="mi">194</span>
     <span class="n">Binlog_Do_DB</span><span class="p">:</span> 
 <span class="n">Binlog_Ignore_DB</span><span class="p">:</span> 
<span class="n">Executed_Gtid_Set</span><span class="p">:</span> <span class="n">af299bf7</span><span class="o">-</span><span class="n">dc7c</span><span class="o">-</span><span class="mi">11</span><span class="n">ea</span><span class="o">-</span><span class="mi">8417</span><span class="o">-</span><span class="mi">0242</span><span class="n">ac170002</span><span class="p">:</span><span class="mi">1</span><span class="o">-</span><span class="mi">22805</span>
<span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>

<span class="c1">-- 在从库上执行,Executed_Gtid_Set表示从库已经执行过的GTID集合.
</span><span class="c1">-- Retrieved_Gtid_Set,从库会扫描最后一个relay log,显示当前扫描所得的GTID集合.
</span><span class="c1"></span><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">show</span> <span class="n">slave</span> <span class="n">status</span><span class="err">\</span><span class="k">G</span>
<span class="o">***************************</span> <span class="mi">1</span><span class="p">.</span> <span class="k">row</span> <span class="o">***************************</span>
               <span class="n">Slave_IO_State</span><span class="p">:</span> <span class="n">Waiting</span> <span class="k">for</span> <span class="n">master</span> <span class="k">to</span> <span class="n">send</span> <span class="n">event</span>
                  <span class="n">Master_Host</span><span class="p">:</span> <span class="mi">192</span><span class="p">.</span><span class="mi">168</span><span class="p">.</span><span class="mi">20</span><span class="p">.</span><span class="mi">151</span>
                  <span class="n">Master_User</span><span class="p">:</span> <span class="n">mtp2</span>
                  <span class="n">Master_Port</span><span class="p">:</span> <span class="mi">3406</span>
                <span class="n">Connect_Retry</span><span class="p">:</span> <span class="mi">60</span>
              <span class="n">Master_Log_File</span><span class="p">:</span> <span class="n">bin</span><span class="p">.</span><span class="mi">000005</span>
          <span class="n">Read_Master_Log_Pos</span><span class="p">:</span> <span class="mi">194</span>
               <span class="n">Relay_Log_File</span><span class="p">:</span> <span class="n">relay_log</span><span class="p">.</span><span class="mi">000007</span>
                <span class="n">Relay_Log_Pos</span><span class="p">:</span> <span class="mi">355</span>
        <span class="n">Relay_Master_Log_File</span><span class="p">:</span> <span class="n">bin</span><span class="p">.</span><span class="mi">000005</span>
             <span class="n">Slave_IO_Running</span><span class="p">:</span> <span class="n">Yes</span>
            <span class="n">Slave_SQL_Running</span><span class="p">:</span> <span class="n">Yes</span>
              <span class="n">Replicate_Do_DB</span><span class="p">:</span> 
          <span class="n">Replicate_Ignore_DB</span><span class="p">:</span> 
           <span class="n">Replicate_Do_Table</span><span class="p">:</span> 
       <span class="n">Replicate_Ignore_Table</span><span class="p">:</span> 
      <span class="n">Replicate_Wild_Do_Table</span><span class="p">:</span> 
  <span class="n">Replicate_Wild_Ignore_Table</span><span class="p">:</span> 
                   <span class="n">Last_Errno</span><span class="p">:</span> <span class="mi">0</span>
                   <span class="n">Last_Error</span><span class="p">:</span> 
                 <span class="n">Skip_Counter</span><span class="p">:</span> <span class="mi">0</span>
          <span class="n">Exec_Master_Log_Pos</span><span class="p">:</span> <span class="mi">194</span>
              <span class="n">Relay_Log_Space</span><span class="p">:</span> <span class="mi">556</span>
              <span class="n">Until_Condition</span><span class="p">:</span> <span class="k">None</span>
               <span class="n">Until_Log_File</span><span class="p">:</span> 
                <span class="n">Until_Log_Pos</span><span class="p">:</span> <span class="mi">0</span>
           <span class="n">Master_SSL_Allowed</span><span class="p">:</span> <span class="k">No</span>
           <span class="n">Master_SSL_CA_File</span><span class="p">:</span> 
           <span class="n">Master_SSL_CA_Path</span><span class="p">:</span> 
              <span class="n">Master_SSL_Cert</span><span class="p">:</span> 
            <span class="n">Master_SSL_Cipher</span><span class="p">:</span> 
               <span class="n">Master_SSL_Key</span><span class="p">:</span> 
        <span class="n">Seconds_Behind_Master</span><span class="p">:</span> <span class="mi">0</span>
<span class="n">Master_SSL_Verify_Server_Cert</span><span class="p">:</span> <span class="k">No</span>
                <span class="n">Last_IO_Errno</span><span class="p">:</span> <span class="mi">0</span>
                <span class="n">Last_IO_Error</span><span class="p">:</span> 
               <span class="n">Last_SQL_Errno</span><span class="p">:</span> <span class="mi">0</span>
               <span class="n">Last_SQL_Error</span><span class="p">:</span> 
  <span class="n">Replicate_Ignore_Server_Ids</span><span class="p">:</span> 
             <span class="n">Master_Server_Id</span><span class="p">:</span> <span class="mi">1</span>
                  <span class="n">Master_UUID</span><span class="p">:</span> <span class="n">af299bf7</span><span class="o">-</span><span class="n">dc7c</span><span class="o">-</span><span class="mi">11</span><span class="n">ea</span><span class="o">-</span><span class="mi">8417</span><span class="o">-</span><span class="mi">0242</span><span class="n">ac170002</span>
             <span class="n">Master_Info_File</span><span class="p">:</span> <span class="n">mysql</span><span class="p">.</span><span class="n">slave_master_info</span>
                    <span class="n">SQL_Delay</span><span class="p">:</span> <span class="mi">0</span>
          <span class="n">SQL_Remaining_Delay</span><span class="p">:</span> <span class="k">NULL</span>
      <span class="n">Slave_SQL_Running_State</span><span class="p">:</span> <span class="n">Slave</span> <span class="n">has</span> <span class="k">read</span> <span class="k">all</span> <span class="n">relay</span> <span class="n">log</span><span class="p">;</span> <span class="n">waiting</span> <span class="k">for</span> <span class="k">more</span> <span class="n">updates</span>
           <span class="n">Master_Retry_Count</span><span class="p">:</span> <span class="mi">86400</span>
                  <span class="n">Master_Bind</span><span class="p">:</span> 
      <span class="n">Last_IO_Error_Timestamp</span><span class="p">:</span> 
     <span class="n">Last_SQL_Error_Timestamp</span><span class="p">:</span> 
               <span class="n">Master_SSL_Crl</span><span class="p">:</span> 
           <span class="n">Master_SSL_Crlpath</span><span class="p">:</span> 
           <span class="n">Retrieved_Gtid_Set</span><span class="p">:</span> 
            <span class="n">Executed_Gtid_Set</span><span class="p">:</span> <span class="mi">60012</span><span class="n">ca6</span><span class="o">-</span><span class="n">dc7d</span><span class="o">-</span><span class="mi">11</span><span class="n">ea</span><span class="o">-</span><span class="mi">8</span><span class="n">f34</span><span class="o">-</span><span class="mi">0242</span><span class="n">ac180002</span><span class="p">:</span><span class="mi">1</span><span class="o">-</span><span class="mi">5</span><span class="p">,</span>
<span class="n">af299bf7</span><span class="o">-</span><span class="n">dc7c</span><span class="o">-</span><span class="mi">11</span><span class="n">ea</span><span class="o">-</span><span class="mi">8417</span><span class="o">-</span><span class="mi">0242</span><span class="n">ac170002</span><span class="p">:</span><span class="mi">1</span><span class="o">-</span><span class="mi">22805</span>
                <span class="n">Auto_Position</span><span class="p">:</span> <span class="mi">1</span>
         <span class="n">Replicate_Rewrite_DB</span><span class="p">:</span> 
                 <span class="n">Channel_Name</span><span class="p">:</span> 
           <span class="n">Master_TLS_Version</span><span class="p">:</span> 
<span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>

<span class="c1">-- 查看binlog event.在语句前后都会设置GTID_NEXT
</span><span class="c1">-- SHOW BINLOG EVENTS [IN &#39;log_name&#39;] [FROM pos] [LIMIT [offset,] row_count]
</span><span class="c1"></span><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">show</span> <span class="n">binlog</span> <span class="n">events</span> <span class="k">in</span> <span class="s1">&#39;bin.000003&#39;</span> <span class="k">limit</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">5</span><span class="p">;</span>
<span class="o">+</span><span class="c1">------------+-----+----------------+-----------+-------------+-------------------------------------------------------------------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">Log_name</span>   <span class="o">|</span> <span class="n">Pos</span> <span class="o">|</span> <span class="n">Event_type</span>     <span class="o">|</span> <span class="n">Server_id</span> <span class="o">|</span> <span class="n">End_log_pos</span> <span class="o">|</span> <span class="n">Info</span>                                                              <span class="o">|</span>
<span class="o">+</span><span class="c1">------------+-----+----------------+-----------+-------------+-------------------------------------------------------------------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">bin</span><span class="p">.</span><span class="mi">000003</span> <span class="o">|</span>   <span class="mi">4</span> <span class="o">|</span> <span class="n">Format_desc</span>    <span class="o">|</span>         <span class="mi">1</span> <span class="o">|</span>         <span class="mi">123</span> <span class="o">|</span> <span class="n">Server</span> <span class="n">ver</span><span class="p">:</span> <span class="mi">5</span><span class="p">.</span><span class="mi">7</span><span class="p">.</span><span class="mi">31</span><span class="o">-</span><span class="n">log</span><span class="p">,</span> <span class="n">Binlog</span> <span class="n">ver</span><span class="p">:</span> <span class="mi">4</span>                             <span class="o">|</span>
<span class="o">|</span> <span class="n">bin</span><span class="p">.</span><span class="mi">000003</span> <span class="o">|</span> <span class="mi">123</span> <span class="o">|</span> <span class="n">Previous_gtids</span> <span class="o">|</span>         <span class="mi">1</span> <span class="o">|</span>         <span class="mi">194</span> <span class="o">|</span> <span class="n">af299bf7</span><span class="o">-</span><span class="n">dc7c</span><span class="o">-</span><span class="mi">11</span><span class="n">ea</span><span class="o">-</span><span class="mi">8417</span><span class="o">-</span><span class="mi">0242</span><span class="n">ac170002</span><span class="p">:</span><span class="mi">1</span><span class="o">-</span><span class="mi">5</span>                          <span class="o">|</span>
<span class="o">|</span> <span class="n">bin</span><span class="p">.</span><span class="mi">000003</span> <span class="o">|</span> <span class="mi">194</span> <span class="o">|</span> <span class="n">Gtid</span>           <span class="o">|</span>         <span class="mi">1</span> <span class="o">|</span>         <span class="mi">259</span> <span class="o">|</span> <span class="k">SET</span> <span class="o">@@</span><span class="k">SESSION</span><span class="p">.</span><span class="n">GTID_NEXT</span><span class="o">=</span> <span class="s1">&#39;af299bf7-dc7c-11ea-8417-0242ac170002:6&#39;</span> <span class="o">|</span>
<span class="o">|</span> <span class="n">bin</span><span class="p">.</span><span class="mi">000003</span> <span class="o">|</span> <span class="mi">259</span> <span class="o">|</span> <span class="n">Query</span>          <span class="o">|</span>         <span class="mi">1</span> <span class="o">|</span>         <span class="mi">398</span> <span class="o">|</span> <span class="k">create</span> <span class="k">database</span> <span class="n">mtp2</span> <span class="k">default</span> <span class="n">charset</span> <span class="n">utf8</span> <span class="k">collate</span> <span class="n">utf8_unicode_ci</span> <span class="o">|</span>
<span class="o">|</span> <span class="n">bin</span><span class="p">.</span><span class="mi">000003</span> <span class="o">|</span> <span class="mi">398</span> <span class="o">|</span> <span class="n">Gtid</span>           <span class="o">|</span>         <span class="mi">1</span> <span class="o">|</span>         <span class="mi">463</span> <span class="o">|</span> <span class="k">SET</span> <span class="o">@@</span><span class="k">SESSION</span><span class="p">.</span><span class="n">GTID_NEXT</span><span class="o">=</span> <span class="s1">&#39;af299bf7-dc7c-11ea-8417-0242ac170002:7&#39;</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">------------+-----+----------------+-----------+-------------+-------------------------------------------------------------------+
</span><span class="c1"></span><span class="mi">5</span> <span class="k">rows</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>

<span class="c1">-- 解析binlog.
</span><span class="c1"></span><span class="n">root</span><span class="o">@</span><span class="n">baecf53ab2f8</span><span class="p">:</span><span class="o">/</span><span class="n">var</span><span class="o">/</span><span class="n">log</span><span class="o">/</span><span class="n">mysql</span><span class="o">#</span> <span class="n">mysqlbinlog</span> <span class="o">-</span><span class="n">vv</span> <span class="n">bin</span><span class="p">.</span><span class="mi">000003</span> <span class="c1">--include-gtids=&#39;af299bf7-dc7c-11ea-8417-0242ac170002:6&#39;
</span><span class="c1"></span><span class="cm">/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=1*/</span><span class="p">;</span>
<span class="cm">/*!50003 SET @OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0*/</span><span class="p">;</span>
<span class="k">DELIMITER</span> <span class="cm">/*!*/</span><span class="p">;</span>
<span class="o">#</span> <span class="k">at</span> <span class="mi">4</span>
<span class="o">#</span><span class="mi">200812</span> <span class="mi">17</span><span class="p">:</span><span class="mi">17</span><span class="p">:</span><span class="mi">57</span> <span class="n">server</span> <span class="n">id</span> <span class="mi">1</span>  <span class="n">end_log_pos</span> <span class="mi">123</span> <span class="n">CRC32</span> <span class="mi">0</span><span class="n">x815f99b3</span> 	<span class="k">Start</span><span class="p">:</span> <span class="n">binlog</span> <span class="n">v</span> <span class="mi">4</span><span class="p">,</span> <span class="n">server</span> <span class="n">v</span> <span class="mi">5</span><span class="p">.</span><span class="mi">7</span><span class="p">.</span><span class="mi">31</span><span class="o">-</span><span class="n">log</span> <span class="n">created</span> <span class="mi">200812</span> <span class="mi">17</span><span class="p">:</span><span class="mi">17</span><span class="p">:</span><span class="mi">57</span> <span class="k">at</span> <span class="n">startup</span>
<span class="k">ROLLBACK</span><span class="cm">/*!*/</span><span class="p">;</span>
<span class="n">BINLOG</span> <span class="s1">&#39;
</span><span class="s1">xbMzXw8BAAAAdwAAAHsAAAAAAAQANS43LjMxLWxvZwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
</span><span class="s1">AAAAAAAAAAAAAAAAAADFszNfEzgNAAgAEgAEBAQEEgAAXwAEGggAAAAICAgCAAAACgoKKioAEjQA
</span><span class="s1">AbOZX4E=
</span><span class="s1">&#39;</span><span class="cm">/*!*/</span><span class="p">;</span>
<span class="o">#</span> <span class="k">at</span> <span class="mi">123</span>
<span class="o">#</span><span class="mi">200812</span> <span class="mi">17</span><span class="p">:</span><span class="mi">17</span><span class="p">:</span><span class="mi">57</span> <span class="n">server</span> <span class="n">id</span> <span class="mi">1</span>  <span class="n">end_log_pos</span> <span class="mi">194</span> <span class="n">CRC32</span> <span class="mi">0</span><span class="n">x5856cea2</span> 	<span class="n">Previous</span><span class="o">-</span><span class="n">GTIDs</span>
<span class="o">#</span> <span class="n">af299bf7</span><span class="o">-</span><span class="n">dc7c</span><span class="o">-</span><span class="mi">11</span><span class="n">ea</span><span class="o">-</span><span class="mi">8417</span><span class="o">-</span><span class="mi">0242</span><span class="n">ac170002</span><span class="p">:</span><span class="mi">1</span><span class="o">-</span><span class="mi">5</span>
<span class="o">#</span> <span class="k">at</span> <span class="mi">194</span>
<span class="o">#</span><span class="mi">200812</span> <span class="mi">17</span><span class="p">:</span><span class="mi">19</span><span class="p">:</span><span class="mi">17</span> <span class="n">server</span> <span class="n">id</span> <span class="mi">1</span>  <span class="n">end_log_pos</span> <span class="mi">259</span> <span class="n">CRC32</span> <span class="mi">0</span><span class="n">xf56e199c</span> 	<span class="n">GTID</span>	<span class="n">last_committed</span><span class="o">=</span><span class="mi">0</span>	<span class="n">sequence_number</span><span class="o">=</span><span class="mi">1</span>	<span class="n">rbr_only</span><span class="o">=</span><span class="k">no</span>
<span class="k">SET</span> <span class="o">@@</span><span class="k">SESSION</span><span class="p">.</span><span class="n">GTID_NEXT</span><span class="o">=</span> <span class="s1">&#39;af299bf7-dc7c-11ea-8417-0242ac170002:6&#39;</span><span class="cm">/*!*/</span><span class="p">;</span>
<span class="o">#</span> <span class="k">at</span> <span class="mi">259</span>
<span class="o">#</span><span class="mi">200812</span> <span class="mi">17</span><span class="p">:</span><span class="mi">19</span><span class="p">:</span><span class="mi">17</span> <span class="n">server</span> <span class="n">id</span> <span class="mi">1</span>  <span class="n">end_log_pos</span> <span class="mi">398</span> <span class="n">CRC32</span> <span class="mi">0</span><span class="n">x010ed0fb</span> 	<span class="n">Query</span>	<span class="n">thread_id</span><span class="o">=</span><span class="mi">2</span>	<span class="n">exec_time</span><span class="o">=</span><span class="mi">0</span>	<span class="n">error_code</span><span class="o">=</span><span class="mi">0</span>
<span class="k">SET</span> <span class="k">TIMESTAMP</span><span class="o">=</span><span class="mi">1597223957</span><span class="cm">/*!*/</span><span class="p">;</span>
<span class="k">SET</span> <span class="o">@@</span><span class="k">session</span><span class="p">.</span><span class="n">pseudo_thread_id</span><span class="o">=</span><span class="mi">2</span><span class="cm">/*!*/</span><span class="p">;</span>
<span class="k">SET</span> <span class="o">@@</span><span class="k">session</span><span class="p">.</span><span class="n">foreign_key_checks</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="o">@@</span><span class="k">session</span><span class="p">.</span><span class="n">sql_auto_is_null</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="o">@@</span><span class="k">session</span><span class="p">.</span><span class="n">unique_checks</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="o">@@</span><span class="k">session</span><span class="p">.</span><span class="n">autocommit</span><span class="o">=</span><span class="mi">1</span><span class="cm">/*!*/</span><span class="p">;</span>
<span class="k">SET</span> <span class="o">@@</span><span class="k">session</span><span class="p">.</span><span class="n">sql_mode</span><span class="o">=</span><span class="mi">1436549152</span><span class="cm">/*!*/</span><span class="p">;</span>
<span class="k">SET</span> <span class="o">@@</span><span class="k">session</span><span class="p">.</span><span class="n">auto_increment_increment</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="o">@@</span><span class="k">session</span><span class="p">.</span><span class="n">auto_increment_offset</span><span class="o">=</span><span class="mi">1</span><span class="cm">/*!*/</span><span class="p">;</span>
<span class="cm">/*!\C latin1 *//*!*/</span><span class="p">;</span>
<span class="k">SET</span> <span class="o">@@</span><span class="k">session</span><span class="p">.</span><span class="n">character_set_client</span><span class="o">=</span><span class="mi">8</span><span class="p">,</span><span class="o">@@</span><span class="k">session</span><span class="p">.</span><span class="n">collation_connection</span><span class="o">=</span><span class="mi">8</span><span class="p">,</span><span class="o">@@</span><span class="k">session</span><span class="p">.</span><span class="n">collation_server</span><span class="o">=</span><span class="mi">192</span><span class="cm">/*!*/</span><span class="p">;</span>
<span class="k">SET</span> <span class="o">@@</span><span class="k">session</span><span class="p">.</span><span class="n">lc_time_names</span><span class="o">=</span><span class="mi">0</span><span class="cm">/*!*/</span><span class="p">;</span>
<span class="k">SET</span> <span class="o">@@</span><span class="k">session</span><span class="p">.</span><span class="n">collation_database</span><span class="o">=</span><span class="k">DEFAULT</span><span class="cm">/*!*/</span><span class="p">;</span>
<span class="k">create</span> <span class="k">database</span> <span class="n">mtp2</span> <span class="k">default</span> <span class="n">charset</span> <span class="n">utf8</span> <span class="k">collate</span> <span class="n">utf8_unicode_ci</span>
<span class="cm">/*!*/</span><span class="p">;</span>
<span class="k">SET</span> <span class="o">@@</span><span class="k">SESSION</span><span class="p">.</span><span class="n">GTID_NEXT</span><span class="o">=</span> <span class="s1">&#39;AUTOMATIC&#39;</span> <span class="cm">/* added by mysqlbinlog */</span> <span class="cm">/*!*/</span><span class="p">;</span>
<span class="k">DELIMITER</span> <span class="p">;</span>
<span class="o">#</span> <span class="k">End</span> <span class="k">of</span> <span class="n">log</span> <span class="n">file</span>
<span class="cm">/*!50003 SET COMPLETION_TYPE=@OLD_COMPLETION_TYPE*/</span><span class="p">;</span>
<span class="cm">/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=0*/</span><span class="p">;</span>
</code></pre></div>]]></content>
		</item>
		
	</channel>
</rss>
