<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on 深白色9527</title>
		<link>https://shenbaise9527.com/posts/</link>
		<description>Recent content in Posts on 深白色9527</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Sat, 28 Nov 2020 20:06:39 +0800</lastBuildDate>
		<atom:link href="https://shenbaise9527.com/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>CMake语法说明</title>
			<link>https://shenbaise9527.com/posts/cmake%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/</link>
			<pubDate>Sat, 28 Nov 2020 20:06:39 +0800</pubDate>
			
			<guid>https://shenbaise9527.com/posts/cmake%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/</guid>
			<description>预定义变量 PROJECT_SOURCE_DIR 工程的根目录 PROJECT_BINARY_DIR 运行cmake命令的目录,通常是${PROJECT_SOURCE_DIR}/build CMAKE_INCLUDE_PATH 环境变量,非CMake变量</description>
			<content type="html"><![CDATA[<h2 id="预定义变量">预定义变量</h2>
<ul>
<li>PROJECT_SOURCE_DIR 工程的根目录</li>
<li>PROJECT_BINARY_DIR 运行cmake命令的目录,通常是${PROJECT_SOURCE_DIR}/build</li>
<li>CMAKE_INCLUDE_PATH 环境变量,非CMake变量</li>
<li>CMAKE_LIBRARY_PATH 环境变量</li>
<li>CMAKE_CURRENCT_SOURCE_DIR 当前处理的CMakeLists.txt所在的路径</li>
<li>CMAKE_CURRENT_BINARY_DIR target编译目录
<ul>
<li>使用ADD_SUBDIRECTORY(src bin)可以更改此变量的值</li>
<li>使用SET(EXECUTABLE_OUTPUT_PATH &lt;新路径&gt;)并不会对此变量有影响,只改变最终目标文件的存储路径</li>
</ul>
</li>
<li>CMAKE_CURRENT_LIST_FILE 输出调用这个变量的CMakeLists.txt的完整路径</li>
<li>CMAKE_CURRENT_LIST_LINE 输出这个变量所在的行</li>
<li>CMAKE_MODULE_PATH 定义自己的cmake模块所在的路径</li>
<li>EXECUTABLE_OUTPUT_PATH 重新定义目标二进制可执行文件的存储路径</li>
<li>LIBRARY_OUTPUT_PATH 重新定义链接库的存储路径</li>
<li>PROJECT_NAME 返回通过PROJECT指令定义的项目名称</li>
<li>CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS  用来控制</li>
</ul>
<h2 id="系统信息">系统信息</h2>
<ul>
<li>CMAKE_MAJOR_VERSION cmake的主版本号,如2.8.6中的2</li>
<li>CMAKE_MINOR_VERSION cmake的次版本号,如2.8.6中的8</li>
<li>CMAKE_PATCH_VERSION cmake的补丁等级,如2.8.6中的6</li>
<li>CMAKE_SYSTEM 系统名称,如Linux-2.6.22</li>
<li>CMAKE_SYSTEM_NAME 不包含版本的系统名,如Linux</li>
<li>CMAKE_SYSTEM_VERSION 系统版本,如2.6.22</li>
<li>CMAKE_SYSTEM_PROCESSOR 处理器名称,如i386</li>
<li>UNIX 在所有的类UNIX平台为TRUE,包括OS x和cygwin</li>
<li>WIN32 在所有的win32平台为TRUE,包括cygwin</li>
</ul>
<h2 id="常用命令">常用命令</h2>
<ul>
<li>
<p>PROJECT 指定工程名称,PROJECT(projectname)</p>
</li>
<li>
<p>SET 定义变量,SET(VAR [VALUE]),可以定义多个value,空格分隔</p>
</li>
<li>
<p>MESSAGE 向终端输出用户定义的信息或变量的值,MESSAGE([SEND_ERROR|STAUTS|FATAL_ERROR] &ldquo;display&rdquo;)</p>
<ul>
<li>SEND_ERROR 产生错误,生成过程被跳过</li>
<li>STATUS 输出前缀为&ndash;的信息</li>
<li>FATAL_ERROR 立即终止所有cmake过程</li>
</ul>
</li>
<li>
<p>ADD_EXECUTABLE 生成可执行文件,ADD_EXECUTABLE(bin_file_name SRC_LIST)</p>
</li>
<li>
<p>ADD_LIBRARY 生成动态库或静态库,ADD_LIBRARY(libname [SHARED|STATIC|MODULE] [EXCLUED_FROM_ALL] SRC_LIST)</p>
<ul>
<li>SHARED 动态库</li>
<li>STATIC 静态库</li>
<li>MODULE 在使用dyld的系统有效,否则等同于SHARED</li>
<li>EXCLUED_FROM_ALL 表示该库不会被默认构建</li>
</ul>
</li>
<li>
<p>SET_TARGET_PROPERTIES 设置输出的名称,设置动态库的版本和API的版本</p>
</li>
<li>
<p>CMAKE_MINIMUN_REQUIRED 声明CMake的版本要求</p>
</li>
<li>
<p>ADD_SUBDIRECTORY 添加子目录,ADD_SUBDIRECTORY(dir [binary_dir][EXCLUDE_FROM_ALL])</p>
<ul>
<li>binary_dir 指定中间二进制和目标二进制文件的存储位置</li>
<li>EXCLUDE_FROM_ALL 将这个目录中编译过程中排除</li>
</ul>
</li>
<li>
<p>INCLUDE_DIRECTORIES 向工程添加多个特定的头文件搜索路径,路径之间用空格分隔</p>
</li>
<li>
<p>LINK_DIRECTORIES 添加非标准的共享库搜索路径</p>
</li>
<li>
<p>TARGET_LINK_LIBRARIES 为target添加需要链接的共享库</p>
</li>
<li>
<p>ADD_DEFINITIONS 向C/C++编译器添加-D定义,参数之间用空格分隔</p>
</li>
<li>
<p>ADD_DEPENDENCIES 定义target依赖的其它target,确保target在构建之前,其依赖的target已构建完毕</p>
</li>
<li>
<p>AUX_SOURCE_DERICTORY 发现一个目录下的所有源代码文件并将列表存储在一个变量中</p>
</li>
<li>
<p>EXEC_PROGRAM 用于在指定目录运行某个程序(默认为当前CMakeLists.txt目录)</p>
</li>
<li>
<p>INCLUDE 用来载入CMakeLists.txt或预定义的cmake模块</p>
</li>
<li>
<p>FIND_FILE 查找文件,FIND_FILE(<!-- raw HTML omitted --> name path1 path2 &hellip;),VAR表示找到的文件全路径,包括文件名</p>
</li>
<li>
<p>FIND_LIBRARY 查找库</p>
</li>
<li>
<p>FIND_PATH 查找路径</p>
</li>
<li>
<p>FIND_FILE</p>
</li>
<li>
<p>IF 语法</p>
<blockquote>
<p>IF (expression) 判断条件是否为真
IF (not exp) 与上面相反
IF (var1 and var2) 判断2个条件是否都为真
IF (var1 or var2) 判断2个条件是否至少有1个为真
IF (COMMAND cmd) 判断cmd是否为命令并可调用
IF (EXISTS dir) 判断dir目录是否存在
IF (EXISTS file) 判断file文件是否存在
IF (file1 IS_NEWER_THAN file2) 当file1比file2新,或file1/file2中有一个不存在时为真,使用全路径
IF (IS_DIRECTORY dir) 当dir时路径时为真
IF (DEFINED var) 若var被定义,为真
IF (var MATCHES regex) 当变量var匹配正则表达式regex时,为真</p>
</blockquote>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="nf">IF</span> <span class="p">(</span><span class="s">&#34;hello&#34;</span> <span class="nx">MATCHES</span> <span class="s">&#34;ell&#34;</span><span class="p">)</span>
    <span class="nf">MESSAGE</span><span class="p">(</span><span class="s">&#34;true&#34;</span><span class="p">)</span>
<span class="nf">ENDIF</span> <span class="p">(</span><span class="s">&#34;hello&#34;</span> <span class="nx">MATCHES</span> <span class="s">&#34;ell&#34;</span><span class="p">)</span>
</code></pre></div></li>
<li>
<p>WHILE</p>
</li>
<li>
<p>FOREACH
列表格式</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="nf">FOREACH</span><span class="p">(</span><span class="nx">loop_var</span> <span class="nx">arg1</span> <span class="nx">arg2</span> <span class="o">...</span><span class="p">)</span>
  <span class="nf">COMMAND1</span><span class="p">(</span><span class="nx">ARGS</span> <span class="o">...</span><span class="p">)</span>
  <span class="nf">COMMAND2</span><span class="p">(</span><span class="nx">ARGS</span> <span class="o">...</span><span class="p">)</span>
<span class="nf">ENDFOREACH</span><span class="p">(</span><span class="nx">loop_var</span><span class="p">)</span>
  
<span class="nf">AUX_SOURCE_DERICTORY</span><span class="p">(.</span> <span class="nx">SRC_LIST</span><span class="p">)</span>
<span class="nf">FOREACH</span><span class="p">(</span><span class="nx">F</span> <span class="err">$</span><span class="p">{</span><span class="nx">SRC_LIST</span><span class="p">})</span>
  <span class="nf">MESSAGE</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="nx">F</span><span class="p">})</span>
<span class="nf">ENDFOREACH</span><span class="p">(</span><span class="nx">F</span><span class="p">)</span>
</code></pre></div><p>范围格式</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="nf">FOREACH</span><span class="p">(</span><span class="nx">loop_var</span> <span class="nx">RANGE</span> <span class="nx">total</span><span class="p">)</span>
  <span class="nf">COMMAND1</span><span class="p">(</span><span class="nx">ARGS</span> <span class="o">...</span><span class="p">)</span>
  <span class="nf">COMMAND2</span><span class="p">(</span><span class="nx">ARGS</span> <span class="o">...</span><span class="p">)</span>
<span class="nf">ENDFOREACH</span><span class="p">(</span><span class="nx">loop_var</span><span class="p">)</span>
  
<span class="nf">FOREACH</span><span class="p">(</span><span class="nx">VAR</span> <span class="nx">RANGE</span> <span class="mi">10</span><span class="p">)</span>
  <span class="nf">MESSAGE</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="nx">VAR</span><span class="p">})</span>
<span class="nf">ENDFOREACH</span><span class="p">(</span><span class="nx">VAR</span><span class="p">)</span>
</code></pre></div><p>范围和步进格式</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="nf">FOREACH</span><span class="p">(</span><span class="nx">loop_var</span> <span class="nx">RANGE</span> <span class="nx">start</span> <span class="nx">stop</span> <span class="p">[</span><span class="nx">step</span><span class="p">])</span>
  <span class="nf">COMMAND1</span><span class="p">(</span><span class="nx">ARGS</span> <span class="o">...</span><span class="p">)</span>
  <span class="nf">COMMAND2</span><span class="p">(</span><span class="nx">ARGS</span> <span class="o">...</span><span class="p">)</span>
<span class="nf">ENDFOREACH</span><span class="p">(</span><span class="nx">loop_var</span><span class="p">)</span>
  
<span class="nf">FOREACH</span><span class="p">(</span><span class="nx">A</span> <span class="nx">RANGE</span> <span class="mi">5</span> <span class="mi">15</span> <span class="mi">3</span><span class="p">)</span>
  <span class="nf">MESSAGE</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="nx">A</span><span class="p">})</span>
<span class="nf">ENDFOREACH</span><span class="p">(</span><span class="nx">A</span><span class="p">)</span>
</code></pre></div></li>
</ul>
<h2 id="开关选项">开关选项</h2>
<ul>
<li>BUILD_SHARED_LIBS 控制默认的库编译方式.若未设置,使用ADD_LIBRARY时又没有指定库类型,默认编译生成的都是静态库</li>
<li>CMAKE_C_FLAGS 设置C编译选项</li>
<li>CMAKE_CXX_FLAGS 设置C++编译选项</li>
</ul>
<h2 id="添加子文件夹">添加子文件夹</h2>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="err">#</span> <span class="nx">设置查找目录</span>
<span class="nf">set</span><span class="p">(</span><span class="nx">plugins_dir</span> <span class="err">$</span><span class="p">{</span><span class="nx">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span><span class="o">/</span><span class="nx">plugins</span><span class="o">/</span><span class="p">)</span>

<span class="err">#</span> <span class="nx">运行脚本查找对应的子目录</span><span class="p">,</span><span class="nx">并存放到变量dirs中</span>
<span class="nf">execute_process</span><span class="p">(</span>
    <span class="nx">COMMAND</span> <span class="nx">sh</span> <span class="err">$</span><span class="p">{</span><span class="nx">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span><span class="o">/</span><span class="nx">findplugin</span><span class="p">.</span><span class="nx">sh</span> <span class="err">$</span><span class="p">{</span><span class="nx">plugins_dir</span><span class="p">}</span>
    <span class="nx">OUTPUT_VARIABLE</span> <span class="nx">dirs</span><span class="p">)</span>

<span class="err">#</span> <span class="nx">把字符串变量转换为列表RPLACE_LIST</span>
<span class="nb">string</span><span class="p">(</span><span class="nx">REPLACE</span> <span class="s">&#34;\n&#34;</span> <span class="s">&#34;;&#34;</span> <span class="nx">RPLACE_LIST</span> <span class="err">$</span><span class="p">{</span><span class="nx">dirs</span><span class="p">})</span>

<span class="err">#</span> <span class="nx">循环</span><span class="p">,</span><span class="nx">把每个plugin加入到编译中</span>
<span class="nf">foreach</span> <span class="p">(</span><span class="nx">miapi</span> <span class="err">$</span><span class="p">{</span><span class="nx">RPLACE_LIST</span><span class="p">})</span>
    <span class="nf">ADD_SUBDIRECTORY</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="nx">plugins_dr</span><span class="p">}</span><span class="err">$</span><span class="p">{</span><span class="nx">miapi</span><span class="p">}</span> <span class="err">$</span><span class="p">{</span><span class="nx">CMAKE_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="nx">miapi</span><span class="p">})</span>
<span class="nf">endforeach</span><span class="p">(</span><span class="nx">miapi</span><span class="p">)</span>
</code></pre></div><h2 id="add_custom_command">add_custom_command</h2>
<p>增加定制化的构建规则到构建系统中,有两种使用方式</p>
<h3 id="增加一个定制化命令来产生一个输出">增加一个定制化命令来产生一个输出</h3>
<p>语法格式</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="nf">ADD_CUSTOM_COMMAND</span><span class="p">(</span><span class="nx">OUTPUT</span> <span class="nx">output1</span> <span class="p">[</span><span class="nx">output2</span> <span class="o">...</span><span class="p">]</span>
    <span class="nx">COMMAND</span> <span class="nx">command1</span> <span class="p">[</span><span class="nx">ARGS</span><span class="p">]</span> <span class="p">[</span><span class="nx">arg1</span> <span class="o">...</span><span class="p">]</span>
    <span class="p">[</span><span class="nx">COMMAND</span> <span class="nx">command2</span> <span class="p">[</span><span class="nx">ARGS</span><span class="p">]</span> <span class="p">[</span><span class="nx">arg2</span> <span class="o">...</span><span class="p">]</span><span class="o">...</span><span class="p">]</span>
    <span class="p">[</span><span class="nx">MAIN_DEPENDENCY</span> <span class="nx">depend</span><span class="p">]</span>
    <span class="p">[</span><span class="nx">DEPENDS</span> <span class="p">[</span><span class="nx">depends</span> <span class="o">...</span><span class="p">]]</span>
    <span class="p">[</span><span class="nx">IMPLICIT_DEPENDS</span> <span class="p">&lt;</span><span class="nx">lang1</span><span class="p">&gt;</span> <span class="nx">depend1</span> <span class="o">...</span><span class="p">]</span>
    <span class="p">[</span><span class="nx">WORKING_DIRECTORY</span> <span class="nx">dir</span><span class="p">]</span>
    <span class="p">[</span><span class="nx">COMMENT</span> <span class="nx">comment</span><span class="p">]</span> <span class="p">[</span><span class="nx">VERBATIM</span><span class="p">]</span> <span class="p">[</span><span class="nx">APPEND</span><span class="p">])</span>
<span class="err">#</span> <span class="nx">不要同时在多个相互独立的目标中执行上述命令产生相同的文件</span><span class="p">,</span><span class="nx">主要是为了防止产生冲突</span><span class="p">.</span>
<span class="err">#</span> <span class="nx">如果有多条命令</span><span class="p">,</span><span class="nx">会按顺序执行</span><span class="p">.</span>
<span class="err">#</span> <span class="nx">ARGS是为了向后兼容</span><span class="p">,</span><span class="nx">使用过程中可以忽略</span>
<span class="err">#</span> <span class="nx">MAIN_DEPENDENCY完全是可选的</span><span class="p">,</span><span class="nx">是针对VS给出的一个建议</span>

<span class="err">#</span> <span class="nx">例子</span><span class="p">,</span><span class="nx">copy复制文件</span><span class="p">.</span>
<span class="nf">ADD_CUSTOM_COMMAND</span><span class="p">(</span><span class="nx">OUTPUT</span> <span class="err">$</span><span class="p">{</span><span class="nx">dst_sql_xml</span><span class="p">}</span>
    <span class="nx">COMMAND</span> <span class="err">$</span><span class="p">{</span><span class="nx">CMAKE_COMMAND</span><span class="p">}</span> <span class="o">-</span><span class="nx">E</span> <span class="nx">copy</span> <span class="err">$</span><span class="p">{</span><span class="nx">src_sql_xml</span><span class="p">}</span> <span class="err">$</span><span class="p">{</span><span class="nx">dst_sql_xml</span><span class="p">}</span>
    <span class="nx">COMMENT</span> <span class="s">&#34;copy ${src_sql_xml} \nto ${dst_sql_xml}&#34;</span>
    <span class="nx">DEPENDS</span> <span class="err">$</span><span class="p">{</span><span class="nx">src_sql_xml</span><span class="p">})</span>
<span class="nf">ADD_CUSTOM_TARGET</span><span class="p">(</span><span class="nx">syncxml</span> <span class="nx">ALL</span> <span class="nx">DEPENDS</span> <span class="err">$</span><span class="p">{</span><span class="nx">dst_sql_xml</span><span class="p">})</span>

<span class="err">#</span> <span class="nx">例子</span><span class="p">,</span><span class="nx">copy_directory复制文件夹</span><span class="p">.</span>
<span class="nf">ADD_CUSTOM_COMMAND</span><span class="p">(</span><span class="nx">OUTPUT</span> <span class="err">$</span><span class="p">{</span><span class="nx">dst_sql_xml</span><span class="p">}</span>
    <span class="nx">COMMAND</span> <span class="err">$</span><span class="p">{</span><span class="nx">CMAKE_COMMAND</span><span class="p">}</span> <span class="o">-</span><span class="nx">E</span> <span class="nx">copy_directory</span> <span class="err">$</span><span class="p">{</span><span class="nx">src_sql_xml</span><span class="p">}</span> <span class="err">$</span><span class="p">{</span><span class="nx">dst_sql_xml</span><span class="p">}</span>
    <span class="nx">COMMENT</span> <span class="s">&#34;copy_directory ${src_sql_xml} \nto ${dst_sql_xml}&#34;</span>
    <span class="nx">DEPENDS</span> <span class="err">$</span><span class="p">{</span><span class="nx">src_sql_xml</span><span class="p">})</span>
<span class="nf">ADD_CUSTOM_TARGET</span><span class="p">(</span><span class="nx">syncxml</span> <span class="nx">ALL</span> <span class="nx">DEPENDS</span> <span class="err">$</span><span class="p">{</span><span class="nx">dst_sql_xml</span><span class="p">})</span>
</code></pre></div><h3 id="标记在什么时候执行命令编译前编译后链接前">标记在什么时候执行命令:编译前、编译后、链接前</h3>
<p>语法格式</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="nf">ADD_CUSTOM_COMMAND</span><span class="p">(</span><span class="nx">TARGET</span> <span class="nx">target</span>
    <span class="nx">PRE_BUILD</span> <span class="p">|</span> <span class="nx">PRE_LINK</span> <span class="p">|</span> <span class="nx">POST_BUILD</span>
    <span class="nx">COMMAND</span> <span class="nx">command1</span> <span class="p">[</span><span class="nx">ARGS</span><span class="p">]</span> <span class="p">[</span><span class="nx">args1</span> <span class="o">...</span><span class="p">]</span>
    <span class="p">[</span><span class="nx">COMMAND</span> <span class="nx">command2</span> <span class="p">[</span><span class="nx">ARGS</span><span class="p">]</span> <span class="p">[</span><span class="nx">args2</span> <span class="o">...</span><span class="p">]</span><span class="o">...</span><span class="p">]</span>
    <span class="p">[</span><span class="nx">WORKINGDIRECTORY</span> <span class="nx">dir</span><span class="p">]</span>
    <span class="p">[</span><span class="nx">COMMENT</span> <span class="nx">comment</span><span class="p">]</span> <span class="p">[</span><span class="nx">VERBATIM</span><span class="p">])</span>
<span class="err">#</span> <span class="nx">PRE_BUILD</span> <span class="nx">命令将会在其它依赖项执行前执行</span><span class="p">,</span><span class="nx">只被VS7及之后的版本支持</span><span class="p">,</span><span class="nx">其它会将其等同于PRE_LINK</span>
<span class="err">#</span> <span class="nx">PRE_LINK</span> <span class="nx">命令将会在其它依赖项执行完后执行</span>
<span class="err">#</span> <span class="nx">POST_BUILD</span> <span class="nx">命令将会在目标构建完后执行</span>
<span class="err">#</span> <span class="nx">如果指定了WORKINGDIRECTORY</span><span class="p">,</span><span class="nx">命令将会在指定目录运行</span>
<span class="err">#</span> <span class="nx">如果指定了COMMENT</span><span class="p">,</span><span class="nx">命令执行前会把COMMENT的内容当做信息输出</span>
<span class="err">#</span> <span class="nx">如果指定了APPEND</span><span class="p">,</span><span class="nx">COMMANDS和DEPENDS的值会追加到第一个指定的命令中</span>
<span class="err">#</span> <span class="nx">如果指定了APPEND</span><span class="p">,</span><span class="nx">COMMENT</span><span class="err">、</span><span class="nx">WORKINGDIRECTORY和MAIN_DEPENDENCY将会被忽略</span>
<span class="err">#</span> <span class="nx">如果指定了VERBATIM</span><span class="p">,</span><span class="nx">所传递的命令参数会被适当地转义</span>
<span class="err">#</span> <span class="nx">如果指定命令的输出不是创建一个存储在磁盘上的文件</span><span class="p">,</span><span class="nx">需使用SET_SOURCE_FILE_PROPERTIES把它标记为SYMBOLIC</span>
<span class="err">#</span> <span class="nx">如果COMMAND指定了一个可执行的目标</span><span class="p">(</span><span class="nx">由ADD_EXECUTABLE创建</span><span class="p">),</span><span class="nx">则会</span>
<span class="err">#</span> <span class="nx">DEPENDS指定了该命令依赖的文件</span>
</code></pre></div><h3 id="add_custom_target">add_custom_target</h3>
<p>使用该命令增加一个没有输出的目标,使得它总是被构建</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="nf">ADD_CUSTOM_TARGET</span><span class="p">(</span><span class="nx">Name</span> <span class="p">[</span><span class="nx">ALL</span><span class="p">]</span>
    <span class="nx">COMMAND</span> <span class="nx">command1</span> <span class="p">[</span><span class="nx">ARGS</span><span class="p">]</span> <span class="p">[</span><span class="nx">args1</span> <span class="o">...</span><span class="p">]</span>
    <span class="p">[</span><span class="nx">DEPENDS</span> <span class="nx">depend</span> <span class="nx">depend</span> <span class="o">...</span><span class="p">]</span>
    <span class="p">[</span><span class="nx">WORKINGDIRECTORY</span> <span class="nx">dir</span><span class="p">]</span>
    <span class="p">[</span><span class="nx">COMMENT</span> <span class="nx">comment</span><span class="p">]</span> <span class="p">[</span><span class="nx">VERBATIM</span><span class="p">]</span>
    <span class="p">[</span><span class="nx">SOURCES</span> <span class="nx">src1</span> <span class="p">[</span><span class="nx">src2</span> <span class="o">...</span><span class="p">]])</span>
<span class="err">#</span> <span class="nx">该目标没有输出</span><span class="p">,</span><span class="nx">总是被认为过期的</span>
<span class="err">#</span> <span class="nx">如果指定了ALL</span><span class="p">,</span><span class="nx">表明目标会被添加到默认的构建目标</span><span class="p">,</span><span class="nx">使得它每次都会被运行</span>
<span class="err">#</span> <span class="nx">具体可以参见上面的例子</span>
</code></pre></div><h2 id="faq">FAQ</h2>
<ol>
<li>设置条件编译</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="nf">option</span><span class="p">(</span><span class="nx">DEBUG_mode</span> <span class="s">&#34;ON for debug or OFF for release&#34;</span> <span class="nx">ON</span><span class="p">)</span>
<span class="nf">IF</span><span class="p">(</span><span class="nx">DEBUG_mode</span><span class="p">)</span>
    <span class="nf">add_definitions</span><span class="p">(</span><span class="o">-</span><span class="nx">DDEBUG</span><span class="p">)</span>
<span class="nf">ENDIF</span><span class="p">()</span>
</code></pre></div><ol start="2">
<li>根据OS指定编译选项
IF(WIN32) IF(APPLE) IF(UNIX)</li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>makefile语法说明</title>
			<link>https://shenbaise9527.com/posts/makefile%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/</link>
			<pubDate>Sat, 28 Nov 2020 20:06:12 +0800</pubDate>
			
			<guid>https://shenbaise9527.com/posts/makefile%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/</guid>
			<description>CFLAGS 表示用于C编译器的选项. 指定头文件的路径. INCLUDES := -I./ INCLUDES += -I/usr/include INCLUDES += -I/usr/local/include INCLUDES += -I../../../3rd/curl-7.65.0/include INCLUDES += -I../../../3rd/mimetic-0.9.8/include CFLAGS := -m64 -std=c++11 -g -Wall -O3 $(INCLUDES) CXXFLAGS 表示用于C++编译器的选项,基本同CFLAGS LDFLAGS</description>
			<content type="html"><![CDATA[<h2 id="cflags">CFLAGS</h2>
<p>表示用于C编译器的选项.
指定头文件的路径.</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">INCLUDES</span> <span class="o">:=</span> <span class="o">-</span><span class="nx">I</span><span class="p">.</span><span class="o">/</span>
<span class="nx">INCLUDES</span> <span class="o">+=</span> <span class="o">-</span><span class="nx">I</span><span class="o">/</span><span class="nx">usr</span><span class="o">/</span><span class="nx">include</span>
<span class="nx">INCLUDES</span> <span class="o">+=</span> <span class="o">-</span><span class="nx">I</span><span class="o">/</span><span class="nx">usr</span><span class="o">/</span><span class="nx">local</span><span class="o">/</span><span class="nx">include</span>
<span class="nx">INCLUDES</span> <span class="o">+=</span> <span class="o">-</span><span class="nx">I</span><span class="p">..</span><span class="o">/</span><span class="p">..</span><span class="o">/</span><span class="p">..</span><span class="o">/</span><span class="mi">3</span><span class="nx">rd</span><span class="o">/</span><span class="nx">curl</span><span class="o">-</span><span class="mf">7.65.0</span><span class="o">/</span><span class="nx">include</span>
<span class="nx">INCLUDES</span> <span class="o">+=</span> <span class="o">-</span><span class="nx">I</span><span class="p">..</span><span class="o">/</span><span class="p">..</span><span class="o">/</span><span class="p">..</span><span class="o">/</span><span class="mi">3</span><span class="nx">rd</span><span class="o">/</span><span class="nx">mimetic</span><span class="o">-</span><span class="mf">0.9.8</span><span class="o">/</span><span class="nx">include</span>
<span class="nx">CFLAGS</span> <span class="o">:=</span> <span class="o">-</span><span class="nx">m64</span> <span class="o">-</span><span class="nx">std</span><span class="p">=</span><span class="nx">c</span><span class="o">++</span><span class="mi">11</span> <span class="o">-</span><span class="nx">g</span> <span class="o">-</span><span class="nx">Wall</span> <span class="o">-</span><span class="nx">O3</span> <span class="err">$</span><span class="p">(</span><span class="nx">INCLUDES</span><span class="p">)</span>
</code></pre></div><h2 id="cxxflags">CXXFLAGS</h2>
<p>表示用于C++编译器的选项,基本同CFLAGS</p>
<h2 id="ldflags">LDFLAGS</h2>
<p>编译器会用到的一些优化参数,也可指定库文件的位置,告诉链接器从哪里寻找库文件.</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">LDFLAGS</span> <span class="o">:=</span> <span class="o">-</span><span class="nx">L</span><span class="o">/</span><span class="nx">usr</span><span class="o">/</span><span class="nx">lib</span>
<span class="nx">LDFLAGS</span> <span class="o">+=</span> <span class="o">-</span><span class="nx">L</span><span class="o">/</span><span class="nx">usr</span><span class="o">/</span><span class="nx">local</span><span class="o">/</span><span class="nx">lib</span>
<span class="nx">LDFLAGS</span> <span class="o">+=</span> <span class="o">-</span><span class="nx">L</span><span class="o">/</span><span class="nx">usr</span><span class="o">/</span><span class="nx">local</span><span class="o">/</span><span class="nx">ssl</span><span class="o">/</span><span class="nx">lib</span>
<span class="nx">LDFLAGS</span> <span class="o">+=</span> <span class="o">-</span><span class="nx">L</span><span class="p">..</span><span class="o">/</span><span class="p">..</span><span class="o">/</span><span class="p">..</span><span class="o">/</span><span class="mi">3</span><span class="nx">rd</span><span class="o">/</span><span class="nx">curl</span><span class="o">-</span><span class="mf">7.65.0</span><span class="o">/</span><span class="nx">lib</span>
<span class="nx">LDFLAGS</span> <span class="o">+=</span> <span class="o">-</span><span class="nx">L</span><span class="p">..</span><span class="o">/</span><span class="p">..</span><span class="o">/</span><span class="p">..</span><span class="o">/</span><span class="mi">3</span><span class="nx">rd</span><span class="o">/</span><span class="nx">mimetic</span><span class="o">-</span><span class="mf">0.9.8</span><span class="o">/</span><span class="nx">lib</span>
</code></pre></div><h2 id="libs">LIBS</h2>
<p>告诉链接器需要链接哪些文件.</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">LIBS</span> <span class="p">=</span> <span class="o">-</span><span class="nx">lmimetic</span> <span class="o">-</span><span class="nx">lcurl</span> <span class="o">-</span><span class="nx">lrt</span> <span class="o">-</span><span class="nx">static</span><span class="o">-</span><span class="nx">libgcc</span> <span class="o">-</span><span class="nx">static</span><span class="o">-</span><span class="nx">libstdc</span><span class="o">++</span>
</code></pre></div><h2 id="include">include</h2>
<p>语法: include <!-- raw HTML omitted --></p>
<h2 id="wildcard">wildcard</h2>
<h1 id="隐晦规则">隐晦规则</h1>
<ol>
<li>make看到一个.o文件,就会自动把对应的.c文件加在依赖关系中,并且cc -c xx.c也会被推导.</li>
</ol>
<h1 id="伪目标">伪目标</h1>
<p>.PHONY : clean
clean :
-rm xx ${objects}
表示clean是个伪目标,在rm前面加个小减号表示当某些文件出现问题时跳过,继续往下执行.</p>
<h1 id="工作方式">工作方式</h1>
<ol>
<li>读入所有的Makefile.</li>
<li>读入被include的其它Makefile.</li>
<li>初始化文件中的变量.</li>
<li>推导隐晦规则,并分析所有规则.</li>
<li>为所有的目标文件创建依赖关系链.</li>
<li>根据依赖关系,决定哪些目标要重新生成.</li>
<li>执行生成命令.</li>
</ol>
<h1 id="书写规则">书写规则</h1>
<ol>
<li>Makefile中只应该有一个最终目标,其它目标都是被连带出来的.</li>
<li>规则语法,targets是目标,prerequisites表示目标所依赖的文件或目标,command表示生成目标文件所需要执行的命令.</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">targets</span> <span class="p">:</span> <span class="nx">prerequisites</span>
    <span class="nx">command</span>
</code></pre></div><ol start="3">
<li>在规则中使用通配符,支持三种(* ? [&hellip;]),*表示任意长度的字符串,转义字符为'/'</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">clean</span> <span class="p">:</span>
    <span class="nx">rm</span> <span class="o">-</span><span class="nx">f</span> <span class="o">*</span><span class="p">.</span><span class="nx">o</span>
<span class="c1">//　上面表示删除任意已.o结尾的文件.
</span><span class="c1"></span>
<span class="c1">// 需要注意用在变量中.
</span><span class="c1"></span><span class="nx">objects</span> <span class="p">=</span> <span class="o">*</span><span class="p">.</span><span class="nx">o</span>
<span class="c1">// objects的值就是&#34;*.o&#34;,并不会被展开,若想让objects的值是所有.o文件的集合，如下书写
</span><span class="c1"></span><span class="nx">objects</span> <span class="o">:=</span> <span class="err">$</span><span class="p">(</span><span class="nx">wildcard</span> <span class="o">*</span><span class="p">.</span><span class="nx">o</span><span class="p">)</span>
</code></pre></div><ol start="4">
<li>文件搜寻
VPATH: Makefile中的特殊变量,指定文件搜寻目录.
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">VPATH</span> <span class="p">=</span> <span class="nx">src</span> <span class="p">:</span> <span class="p">..</span><span class="o">/</span><span class="nx">headers</span>
<span class="c1">// make会自动去src和../headers目录搜寻依赖文件.
</span></code></pre></div><p>vpath: make的关键字,按照某种模式去搜寻目录,多个目录以:分隔.</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">vpath</span> <span class="p">&lt;</span><span class="nx">pattern</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nx">directories</span><span class="p">&gt;</span>
<span class="c1">// 为符合pattern模式的文件指定搜索目录directories.
</span><span class="c1"></span><span class="nx">vpath</span> <span class="p">&lt;</span><span class="nx">pattern</span><span class="p">&gt;</span>
<span class="c1">// 清除pattern模式的搜寻目录.
</span><span class="c1"></span><span class="nx">vpath</span>
<span class="c1">//　清除所有已被设置好的搜寻目录.
</span><span class="c1"></span><span class="nx">vpath</span> <span class="o">*</span><span class="p">.</span><span class="nx">h</span> <span class="p">..</span><span class="o">/</span><span class="nx">headers</span>
<span class="c1">// 在../headers目录下搜索所有以.h结尾的文件.
</span></code></pre></div></li>
</ol>
<h1 id="自动变量">自动变量</h1>
<ol>
<li>&ldquo;$@&quot;,表示目前规则中所有目标的集合,主要用于有多个目标的规则中.</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">bigoutput</span> <span class="nx">littleoutput</span> <span class="p">:</span> <span class="nx">text</span><span class="p">.</span><span class="nx">g</span>
    <span class="nx">generate</span> <span class="nx">text</span><span class="p">.</span><span class="nx">g</span> <span class="o">-</span><span class="err">$</span><span class="p">(</span><span class="nx">substr</span> <span class="nx">output</span><span class="p">,,</span><span class="err">$@</span><span class="p">)</span> <span class="p">&gt;</span> <span class="err">$@</span>
<span class="c1">//　上述规则等价于
</span><span class="c1"></span><span class="nx">bigoutput</span> <span class="p">:</span> <span class="nx">text</span><span class="p">.</span><span class="nx">g</span>
    <span class="nx">generate</span> <span class="nx">text</span><span class="p">.</span><span class="nx">g</span> <span class="o">-</span><span class="nx">big</span> <span class="p">&gt;</span> <span class="nx">bigoutput</span>
<span class="nx">littleoutput</span> <span class="p">:</span> <span class="nx">text</span><span class="p">.</span><span class="nx">g</span>
    <span class="nx">generate</span> <span class="nx">text</span><span class="p">.</span><span class="nx">g</span> <span class="o">-</span><span class="nx">little</span> <span class="p">&gt;</span> <span class="nx">littleoutput</span>
<span class="c1">// $@表示目标的集合,就像一个数组(2个元素bigoutput、littleoutput),$@依次取出目标并执行命令.
</span></code></pre></div><ol start="2">
<li>&ldquo;$&lt;&quot;,表示所有的依赖目标集,是一个一个取出来的.</li>
<li>&ldquo;$%&quot;,仅当目标是函数库文件时(.a或.lib),表示规则中的目标成员名.
如果目标&quot;foo.a(bar.o)&quot;,那&rdquo;$%&ldquo;就是bar.o,&quot;$@&ldquo;就是foo.a</li>
<li>&ldquo;$?&quot;,所有比目标新的依赖目标的集合,以空格分隔.</li>
<li>&ldquo;$^&quot;,所有的依赖目标的集合,以空格分隔,会去除重复的.</li>
<li>&ldquo;$*&quot;,表示目标模式中&rdquo;%&ldquo;及其之前的部分.如果目标是&quot;dir/a.foo.b&rdquo;,并且目标的模式是&quot;a.%.b&rdquo;,那么值就是&quot;dir/a.foo&rdquo;</li>
</ol>
<h1 id="静态模式">静态模式</h1>
<p>更容易定义多目标的规则.</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// 语法.
</span><span class="c1"></span><span class="p">&lt;</span><span class="nx">targets</span> <span class="o">...</span><span class="p">&gt;</span> <span class="p">:</span> <span class="p">&lt;</span><span class="nx">target</span><span class="o">-</span><span class="nx">pattern</span><span class="p">&gt;</span> <span class="p">:</span> <span class="p">&lt;</span><span class="nx">prereq</span><span class="o">-</span><span class="nx">patterns</span> <span class="o">...</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nx">command</span><span class="p">&gt;</span>
<span class="c1">// targets: 定义了一系列的目标文件,可以有通配符.是目标的一个集合.
</span><span class="c1">// target-pattern: 指明了targets的模式,也就是目标集的模式.
</span><span class="c1">// prereq-patterns: 目标的依赖模式.对target-pattern形成的模式再进行一次依赖目标的定义.
</span><span class="c1"></span>
<span class="nx">objects</span> <span class="p">=</span> <span class="nx">foo</span><span class="p">.</span><span class="nx">o</span> <span class="nx">bar</span><span class="p">.</span><span class="nx">o</span>
<span class="nx">all</span> <span class="p">:</span> <span class="err">$</span><span class="p">(</span><span class="nx">objects</span><span class="p">)</span>
<span class="err">$</span><span class="p">(</span><span class="nx">objects</span><span class="p">)</span> <span class="p">:</span> <span class="o">%</span><span class="p">.</span><span class="nx">o</span> <span class="p">:</span> <span class="o">%</span><span class="p">.</span><span class="nx">c</span>
    <span class="err">$</span><span class="p">(</span><span class="nx">CC</span><span class="p">)</span> <span class="o">-</span><span class="nx">c</span> <span class="err">$</span><span class="p">(</span><span class="nx">CFLAGS</span><span class="p">)</span> <span class="err">$</span><span class="p">&lt;</span> <span class="o">-</span><span class="nx">o</span> <span class="err">$@</span>
<span class="c1">// 目标从objects中获取,%.o表明所有以&#34;.o&#34;结尾的目标,也就是&#34;foo.o和bar.o&#34;,这也是变量$ojbects集合的模式
</span><span class="c1">// 而依赖模式&#34;%.c&#34;则取模式&#34;%.o&#34;的&#34;%&#34;,即&#34;foo和bar&#34;,并为其加上.c后缀,则依赖的目标是&#34;foo.c和bar.c&#34;
</span><span class="c1">// $&lt;为自动化变量,表示所有的依赖目标集,即&#34;foo.c和bar.c&#34;
</span><span class="c1">// $@为自动化变量,表示目标集.
</span><span class="c1">//　上面规则等价于:
</span><span class="c1"></span><span class="nx">foo</span><span class="p">.</span><span class="nx">o</span> <span class="p">:</span> <span class="nx">foo</span><span class="p">.</span><span class="nx">c</span>
    <span class="err">$</span><span class="p">(</span><span class="nx">CC</span><span class="p">)</span> <span class="o">-</span><span class="nx">c</span> <span class="err">$</span><span class="p">(</span><span class="nx">CFLAGS</span><span class="p">)</span> <span class="nx">foo</span><span class="p">.</span><span class="nx">c</span> <span class="o">-</span><span class="nx">o</span> <span class="nx">foo</span><span class="p">.</span><span class="nx">o</span>
<span class="nx">bar</span><span class="p">.</span><span class="nx">o</span> <span class="p">:</span> <span class="nx">bar</span><span class="p">.</span><span class="nx">c</span>
    <span class="err">$</span><span class="p">(</span><span class="nx">CC</span><span class="p">)</span> <span class="o">-</span><span class="nx">c</span> <span class="err">$</span><span class="p">(</span><span class="nx">CFLAGS</span><span class="p">)</span> <span class="nx">bar</span><span class="p">.</span><span class="nx">c</span> <span class="o">-</span><span class="nx">o</span> <span class="nx">bar</span><span class="p">.</span><span class="nx">o</span>

<span class="c1">//　例子:
</span><span class="c1"></span><span class="nx">files</span> <span class="p">=</span> <span class="nx">foo</span><span class="p">.</span><span class="nx">elc</span> <span class="nx">bar</span><span class="p">.</span><span class="nx">o</span> <span class="nx">lose</span><span class="p">.</span><span class="nx">o</span>
<span class="err">$</span><span class="p">(</span><span class="nx">filter</span> <span class="o">%</span><span class="p">.</span><span class="nx">o</span><span class="p">,</span><span class="err">$</span><span class="p">(</span><span class="nx">files</span><span class="p">))</span> <span class="p">:</span> <span class="o">%</span><span class="p">.</span><span class="nx">o</span> <span class="p">:</span> <span class="o">%</span><span class="p">.</span><span class="nx">c</span>
    <span class="err">$</span><span class="p">(</span><span class="nx">CC</span><span class="p">)</span> <span class="o">-</span><span class="nx">c</span> <span class="err">$</span><span class="p">(</span><span class="nx">CFLAGS</span><span class="p">)</span> <span class="err">$</span><span class="p">&lt;</span> <span class="o">-</span><span class="nx">o</span> <span class="err">$@</span>
<span class="c1">// filter为过滤函数.
</span></code></pre></div><h1 id="变量">变量</h1>
<ol>
<li>操作符&rdquo;=&quot;,右侧变量的值可以不用提前定义.</li>
<li>操作符&rdquo;:=&quot;,右侧变量的值必须在这之前定义.</li>
<li>操作符&rdquo;?=&quot;,如果变量之前没有被定义过,那变量的值就是右侧的值;否则什么也不做.</li>
<li>变量值的替换,$(var:a=b),把变量var中所有以&quot;a&quot;子串结尾的&quot;a&quot;替换成&quot;b&quot;子串,结尾指空格或结束符</li>
<li>操作符&rdquo;+=&quot;,给变量追加值.</li>
</ol>
<h1 id="条件表达式">条件表达式</h1>
<ol>
<li>ifeq</li>
<li>ifneq</li>
<li>ifdef</li>
<li>ifndef</li>
</ol>
<h1 id="函数">函数</h1>
<ol>
<li>$(subst <!-- raw HTML omitted -->,<!-- raw HTML omitted -->,<!-- raw HTML omitted -->),把字符串text中的&quot;from&quot;替换为&quot;to&quot;</li>
<li>$(patsubst <!-- raw HTML omitted -->,<!-- raw HTML omitted -->,<!-- raw HTML omitted -->),查找字符串text中是否有符合模式&quot;pattern&quot;,如果匹配则以&quot;replacement&quot;替换.
&ldquo;replacement&quot;中也可以包含&rdquo;%&quot;,指&quot;pattern&quot;中那个&quot;%&ldquo;所代表的子串.</li>
<li>$(stip <!-- raw HTML omitted -->),去掉字符串string中开头和结尾的空字符.</li>
<li>$(findstring <!-- raw HTML omitted -->,<!-- raw HTML omitted -->),在字符串&quot;in&quot;中查找&quot;find&rdquo;,如果找到返回&quot;find&quot;,否则返回空字符串.</li>
<li>$(filter &lt;pattern&hellip;&gt;,<!-- raw HTML omitted -->),以&quot;pattern&quot;模式过滤&quot;text&quot;字符串中的单词,保留符合&quot;pattern&quot;的单词.可以有多个模式.
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">sources</span> <span class="o">:=</span> <span class="nx">foo</span><span class="p">.</span><span class="nx">c</span> <span class="nx">bar</span><span class="p">.</span><span class="nx">c</span> <span class="nx">baz</span><span class="p">.</span><span class="nx">s</span> <span class="nx">ugh</span><span class="p">.</span><span class="nx">h</span>
<span class="nx">foo</span> <span class="p">:</span> <span class="err">$</span><span class="p">(</span><span class="nx">sources</span><span class="p">)</span>
     <span class="nx">cc</span> <span class="err">$</span><span class="p">(</span><span class="nx">filter</span> <span class="o">%</span><span class="p">.</span><span class="nx">c</span> <span class="o">%</span><span class="p">.</span><span class="nx">s</span><span class="p">,</span><span class="err">$</span><span class="p">(</span><span class="nx">sources</span><span class="p">))</span> <span class="o">-</span><span class="nx">o</span> <span class="nx">foo</span>
<span class="c1">// filter返回的是foo.c bar.c baz.s,有２个模式%.c和%.s
</span></code></pre></div></li>
<li>$(filter-out &lt;pattern&hellip;&gt;,<!-- raw HTML omitted -->),反过滤函数.</li>
<li>$(sort <!-- raw HTML omitted -->),排序函数,给&quot;list&quot;中的单词升序的方式排序.会去掉相同的单词.</li>
<li>$(word <!-- raw HTML omitted -->,<!-- raw HTML omitted -->),取字符串&quot;text&quot;中的第n个单词(从1开始).</li>
<li>$(wordlist <!-- raw HTML omitted -->,<!-- raw HTML omitted -->,<!-- raw HTML omitted -->),取单词串函数,从字符串&quot;text&quot;中取从<!-- raw HTML omitted -->到<!-- raw HTML omitted -->的单词串,s和e是一个数字.</li>
<li>$(words <!-- raw HTML omitted -->),单词个数统计函数.</li>
<li>$(firstword <!-- raw HTML omitted -->),首单词函数.</li>
<li>$(dir &lt;names&hellip;&gt;),取目录函数,从文件名序列中取出目录部分.</li>
<li>$(notdir &lt;names&hellip;&gt;),取文件函数,从文件名序列中取出非目录部分.</li>
<li>$(suffix &lt;names&hellip;&gt;),取后缀函数,从文件名序列中取出各个文件名的后缀.</li>
<li>$(basename &lt;names&hellip;&gt;),取前缀函数.</li>
<li>$(addsuffix <!-- raw HTML omitted -->,&lt;names&hellip;&gt;),加后缀函数.</li>
<li>$(addprefix <!-- raw HTML omitted -->,&lt;names&hellip;&gt;),加前缀函数.</li>
<li>$(join <!-- raw HTML omitted -->,<!-- raw HTML omitted -->),连接函数,把&quot;list2&quot;中的单词对应地加到&quot;list1&quot;的单词后面.
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="err">$</span><span class="p">(</span><span class="nx">join</span> <span class="nx">aaa</span> <span class="nx">bbb</span><span class="p">,</span><span class="mi">111</span> <span class="mi">222</span> <span class="mi">333</span><span class="p">)</span><span class="o">-</span><span class="p">&gt;</span><span class="s">&#34;aaa111 bbb222 333&#34;</span>
</code></pre></div></li>
<li>$(foreach <!-- raw HTML omitted -->,<!-- raw HTML omitted -->,<!-- raw HTML omitted -->),把参数list中的单词逐一取出放到参数var中,然后再执行<!-- raw HTML omitted -->所包含的表达式.
``` go
names := a b c d
files := $(foreach n,$(names),$(n).o)
// files的值就是a.o b.o c.o d.o
<pre><code></code></pre></li>
<li>$(if <!-- raw HTML omitted -->,<!-- raw HTML omitted -->,<!-- raw HTML omitted -->),else是可选的.</li>
<li>$(call <!-- raw HTML omitted -->,<!-- raw HTML omitted -->,<!-- raw HTML omitted -->,<!-- raw HTML omitted -->&hellip;),用参数依次取代&quot;expression&quot;中的变量.</li>
<li>$(origin <!-- raw HTML omitted -->),变量&quot;variable&quot;是从哪来的.
undefined: 表示该变量未定义.
default: 表示是默认定义的.
environment: 表示是环境变量.
file: 表示该变量定义在Makefile中
command line: 表示是被命令行定义的
override: 表示是被override指示符重新定义的
automatic:　表示是自动化变量</li>
</ol>
<h1 id="隐含规则">隐含规则</h1>
<ol>
<li>编译c程序的隐含规则,<!-- raw HTML omitted -->.o会自动推导为<!-- raw HTML omitted -->.c,命令是$(CC) -c $(CPPFLAGS) $(CFLAGS)</li>
<li>编译C++的隐含规则,<!-- raw HTML omitted -->.o会自动推导为<!-- raw HTML omitted -->.cc,命令是$(CXX) -c $(CPPFLAGS) $(CFLAGS)</li>
<li>链接Object文件的隐含规则,$(CC) $(LDFLAGS) <!-- raw HTML omitted -->.o $(LOADLIBES) $(LDLIBS)</li>
</ol>
<h2 id="变量-1">变量</h2>
<ol>
<li>CC,C语言编译程序,默认命令是&quot;cc&quot;</li>
<li>CXX,C++语言编译程序,默认命令是&quot;g++&quot;</li>
<li>RM,删除文件命令,默认命令是&quot;rm -f&quot;</li>
<li>CFLAGS,C语言编译器参数</li>
<li>CXXFLAGS,C++语言编译器参数</li>
<li>CPPFLAGS,C预处理器参数</li>
<li>LDFLAGS,链接器参数,如&quot;ld&quot;</li>
</ol>
<h1 id="模式规则">模式规则</h1>
<p>使用模式规则定义一个隐含规则.</p>
<h2 id="介绍">介绍</h2>
<p>模式规则中,至少在规则的目标定义中要包含&quot;%&quot;,否则就是一般的规则.目标中的&quot;%&ldquo;定义表示对文件名的匹配.
例子: %.o : %.c; <!-- raw HTML omitted --></p>
<h2 id="示例">示例</h2>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="o">%</span><span class="p">.</span><span class="nx">o</span> <span class="p">:</span> <span class="o">%</span><span class="p">.</span><span class="nx">c</span> 
    <span class="err">$</span><span class="p">(</span><span class="nx">CC</span><span class="p">)</span> <span class="o">-</span><span class="nx">c</span> <span class="err">$</span><span class="p">(</span><span class="nx">CFLAGS</span><span class="p">)</span> <span class="err">$</span><span class="p">(</span><span class="nx">CPPFLAGS</span><span class="p">)</span> <span class="err">$</span><span class="p">&lt;</span> <span class="o">-</span><span class="nx">o</span> <span class="err">$@</span>
<span class="c1">// $&lt; 表示依赖目标
</span><span class="c1">// $@ 表示目标
</span></code></pre></div><p>一个完整的例子:</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">SOURCE</span> <span class="o">:=</span> <span class="err">$</span><span class="p">(</span><span class="nx">wildcard</span> <span class="o">*</span><span class="p">.</span><span class="nx">cpp</span><span class="p">)</span>
<span class="nx">OBJS</span> <span class="o">:=</span> <span class="err">$</span><span class="p">(</span><span class="nx">patsubst</span> <span class="o">%</span><span class="p">.</span><span class="nx">cpp</span><span class="p">,</span><span class="o">%</span><span class="p">.</span><span class="nx">o</span><span class="p">,</span><span class="err">$</span><span class="p">(</span><span class="nx">SOURCE</span><span class="p">))</span>
<span class="nx">EXENAME</span> <span class="o">:=</span> <span class="nx">mail_agent</span>
<span class="nx">TARGET</span> <span class="o">:=</span> <span class="err">$</span><span class="p">(</span><span class="nx">EXENAME</span><span class="p">)</span>
<span class="nx">CC</span> <span class="o">:=</span> <span class="nx">g</span><span class="o">++</span>
 
<span class="nx">INCLUDES</span> <span class="o">:=</span> <span class="o">-</span><span class="nx">I</span><span class="p">.</span><span class="o">/</span>
<span class="nx">INCLUDES</span> <span class="o">+=</span> <span class="o">-</span><span class="nx">I</span><span class="o">/</span><span class="nx">usr</span><span class="o">/</span><span class="nx">include</span>
<span class="nx">INCLUDES</span> <span class="o">+=</span> <span class="o">-</span><span class="nx">I</span><span class="o">/</span><span class="nx">usr</span><span class="o">/</span><span class="nx">local</span><span class="o">/</span><span class="nx">include</span>
<span class="nx">INCLUDES</span> <span class="o">+=</span> <span class="o">-</span><span class="nx">I</span><span class="p">..</span><span class="o">/</span><span class="p">..</span><span class="o">/</span><span class="p">..</span><span class="o">/</span><span class="mi">3</span><span class="nx">rd</span><span class="o">/</span><span class="nx">curl</span><span class="o">-</span><span class="mf">7.65.0</span><span class="o">/</span><span class="nx">include</span>
<span class="nx">INCLUDES</span> <span class="o">+=</span> <span class="o">-</span><span class="nx">I</span><span class="p">..</span><span class="o">/</span><span class="p">..</span><span class="o">/</span><span class="p">..</span><span class="o">/</span><span class="mi">3</span><span class="nx">rd</span><span class="o">/</span><span class="nx">mimetic</span><span class="o">-</span><span class="mf">0.9.8</span><span class="o">/</span><span class="nx">include</span>
 
<span class="nx">LDFLAGS</span> <span class="o">:=</span> <span class="o">-</span><span class="nx">L</span><span class="o">/</span><span class="nx">usr</span><span class="o">/</span><span class="nx">lib</span>
<span class="nx">LDFLAGS</span> <span class="o">+=</span> <span class="o">-</span><span class="nx">L</span><span class="o">/</span><span class="nx">usr</span><span class="o">/</span><span class="nx">local</span><span class="o">/</span><span class="nx">lib</span>
<span class="nx">LDFLAGS</span> <span class="o">+=</span> <span class="o">-</span><span class="nx">L</span><span class="o">/</span><span class="nx">usr</span><span class="o">/</span><span class="nx">local</span><span class="o">/</span><span class="nx">ssl</span><span class="o">/</span><span class="nx">lib</span>
<span class="nx">LDFLAGS</span> <span class="o">+=</span> <span class="o">-</span><span class="nx">L</span><span class="p">..</span><span class="o">/</span><span class="p">..</span><span class="o">/</span><span class="p">..</span><span class="o">/</span><span class="mi">3</span><span class="nx">rd</span><span class="o">/</span><span class="nx">curl</span><span class="o">-</span><span class="mf">7.65.0</span><span class="o">/</span><span class="nx">lib</span>
<span class="nx">LDFLAGS</span> <span class="o">+=</span> <span class="o">-</span><span class="nx">L</span><span class="p">..</span><span class="o">/</span><span class="p">..</span><span class="o">/</span><span class="p">..</span><span class="o">/</span><span class="mi">3</span><span class="nx">rd</span><span class="o">/</span><span class="nx">mimetic</span><span class="o">-</span><span class="mf">0.9.8</span><span class="o">/</span><span class="nx">lib</span>
 
<span class="nx">LIBS</span> <span class="p">=</span> <span class="o">-</span><span class="nx">lmimetic</span> <span class="o">-</span><span class="nx">lcurl</span> <span class="o">-</span><span class="nx">lrt</span> <span class="o">-</span><span class="nx">static</span><span class="o">-</span><span class="nx">libgcc</span> <span class="o">-</span><span class="nx">static</span><span class="o">-</span><span class="nx">libstdc</span><span class="o">++</span>
<span class="nx">CFLAGS</span> <span class="o">:=</span> <span class="o">-</span><span class="nx">m64</span> <span class="o">-</span><span class="nx">std</span><span class="p">=</span><span class="nx">c</span><span class="o">++</span><span class="mi">11</span> <span class="o">-</span><span class="nx">g</span> <span class="o">-</span><span class="nx">Wall</span> <span class="o">-</span><span class="nx">O3</span> <span class="err">$</span><span class="p">(</span><span class="nx">INCLUDES</span><span class="p">)</span>
<span class="nx">CXXFLAGS</span> <span class="o">:=</span> <span class="err">$</span><span class="p">(</span><span class="nx">CFLAGS</span><span class="p">)</span>
 
<span class="err">$</span><span class="p">(</span><span class="nx">TARGET</span><span class="p">)</span> <span class="p">:</span> <span class="err">$</span><span class="p">(</span><span class="nx">OBJS</span><span class="p">)</span>
    <span class="err">$</span><span class="p">(</span><span class="nx">CC</span><span class="p">)</span> <span class="err">$</span><span class="p">(</span><span class="nx">CXXFLAGS</span><span class="p">)</span> <span class="o">-</span><span class="nx">o</span> <span class="err">$@</span> <span class="err">$</span><span class="p">(</span><span class="nx">OBJS</span><span class="p">)</span> <span class="err">$</span><span class="p">(</span><span class="nx">LDFLAGS</span><span class="p">)</span> <span class="err">$</span><span class="p">(</span><span class="nx">LIBS</span><span class="p">)</span>
 
<span class="p">.</span><span class="nx">PHONY</span> <span class="p">:</span> <span class="nx">clean</span>
<span class="nx">clean</span><span class="p">:</span>
    <span class="o">-</span><span class="nx">rm</span> <span class="err">$</span><span class="p">(</span><span class="nx">OBJS</span><span class="p">)</span> <span class="err">$</span><span class="p">(</span><span class="nx">TARGET</span><span class="p">)</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>tcp连接过程</title>
			<link>https://shenbaise9527.com/posts/tcp%E8%BF%9E%E6%8E%A5%E8%BF%87%E7%A8%8B/</link>
			<pubDate>Tue, 03 Nov 2020 21:35:24 +0800</pubDate>
			
			<guid>https://shenbaise9527.com/posts/tcp%E8%BF%9E%E6%8E%A5%E8%BF%87%E7%A8%8B/</guid>
			<description>tcp建连接三次握手 客户端发送SYN到服务器发起握手. 服务器收到SYN后回复SYN+ACK给客户端. 客户端收到SYN+ACK后,回复服务器一</description>
			<content type="html"><![CDATA[<h2 id="tcp建连接三次握手">tcp建连接三次握手</h2>
<ul>
<li>客户端发送SYN到服务器发起握手.</li>
<li>服务器收到SYN后回复SYN+ACK给客户端.</li>
<li>客户端收到SYN+ACK后,回复服务器一个ACK表示收到了,此时客户端的端口状态已经是established.</li>
<li>tcp握手的详细过程,<a href="http://www.cnxct.com/something-about-phpfpm-s-backlog/">图片来源</a>
<img src="/images/tcp_accept_queue.png" alt="tcp建立连接的流程和队列" title="tcp连接的流程"></li>
</ul>
<p>客户端作为主动发起连接方,首先要发送SYN(Synchronize Sequence Nubers,同步序列号)包,若客户端长时间收不到服务端的ACK报文,客户端就会重发SYN包,重传次数是受内核参数<code>/proc/sys/net/ipv4/tcp_syn_retries</code>控制.</p>
<pre><code># 系统为centos7.2.1511,默认为6次.
$ cat /proc/sys/net/ipv4/tcp_syn_retries 
6
</code></pre><p>通常第一次超时重传为1秒,第二次超时重传为2秒,第三次超时重传为4秒,第四次为8秒,第五次为16秒,第五次超时重传之后还会再等待32秒,如果服务端仍然没有回应ACK,客户端就会终止三次握手.总耗时为63秒.</p>
<h2 id="半连接队列">半连接队列</h2>
<p>syns queue就是半连接队列,server收到client的syn后会把连接信息放入该队列.</p>
<p>半连接队列的大小为max(64, /proc/sys/net/ipv4/tcp_max_syn_backlog).</p>
<pre><code># 在ubuntu18.04机器上为128.
$ cat /proc/sys/net/ipv4/tcp_max_syn_backlog 
128
</code></pre><p>syn floods攻击就是针对半连接队列的,攻击方不停的建立连接,收到server的syn+ack就丢弃什么也不做,导致server的半连接队列满而其它正常连接无法进来.</p>
<h2 id="全连接队列">全连接队列</h2>
<ul>
<li>accept queue就是全连接队列,server再收到client的ack后会把连接信息放入该队列.</li>
<li>全连接队列的大小为min(backlog, /proc/sys/net/core/somaxconn).</li>
<li>backlog是指<code>listen(int sockfd, int backlog)</code>函数中的backlog大小.</li>
</ul>
<pre><code># 在ubuntu18.04机器上为128.
$ cat /proc/sys/net/core/somaxconn
128
</code></pre><h2 id="如何观察队列溢出">如何观察队列溢出</h2>
<p><strong>netstat -s</strong></p>
<pre><code># 查看半连接队列溢出.
sky-HP# netstat -s | egrep &quot;SYNs to LISTEN&quot;
667399 SYNs to LISTEN sockets ignored
# 上面看到的667399就是半连接队列溢出次数,隔几秒执行下,如果这个数字一直在变大肯定就是半连接队列溢出了.

# 查看全连接队列溢出.
sky-HP# netstat -s | grep &quot;overflowed&quot;
667399 times the listen queue of a socket overflowed
</code></pre><p><strong>ss -lntp</strong></p>
<pre><code># l表示处于LISTEN状态 n表示不反向解析 t表示tcp协议 p表示进程信息.
sky-HP# ss -lntp
State       Recv-Q       Send-Q              Local Address:Port              Peer Address:Port                                                        
LISTEN      0            128                       0.0.0.0:8388                   0.0.0.0:*           users:((&quot;haproxy&quot;,pid=1465,fd=6))               
LISTEN      0            128                 127.0.0.53%lo:53                     0.0.0.0:*           users:((&quot;systemd-resolve&quot;,pid=841,fd=13))       
LISTEN      0            128                       0.0.0.0:22                     0.0.0.0:*           users:((&quot;sshd&quot;,pid=1476,fd=3))                  
LISTEN      0            5                       127.0.0.1:631                    0.0.0.0:*           users:((&quot;cupsd&quot;,pid=5112,fd=7))                 
LISTEN      0            128                     127.0.0.1:1080                   0.0.0.0:*           users:((&quot;trojan&quot;,pid=1940,fd=6))                
LISTEN      0            128                     127.0.0.1:8123                   0.0.0.0:*           users:((&quot;polipo&quot;,pid=1461,fd=4))                
</code></pre><p>Send-Q就是表示全连接队列的允许最大长度,Recv-Q表示当前全连接队列的长度.这是套接字处于LISTEN状态时.
需要注意,当套接字处于Established状态时Recv-Q表示套接字缓冲区还没有被应用取走的字节数(接收队列长度),Send-Q表示还没有被远端主机确认的字节数(发送队列长度).</p>
<h2 id="溢出行为的控制">溢出行为的控制</h2>
<p><strong>半连接队列控制</strong>
当半连接队列满时,只能丢弃连接?</p>
<p>并不是这样的,Linux提供了syncookies功能,可以在不适用半连接队列的情况下成功建立连接.
syncookies原理:服务器会根据当前的状态计算出一个值,放入己方的SYN+ACK报文中发送给客户端,当客户端返回ACK报文时,取出该值验证,如果合法,就认为连接建立成功.</p>
<p>syncookies功能由内核参数<code>/proc/sys/net/ipv4/tcp_syncookies</code>来控制.</p>
<ul>
<li>值为0时,表示关闭该功能.</li>
<li>值为1时,表示仅当半连接队列满时,再启用该功能.1为默认值,默认开启.</li>
<li>值为2时,表示无条件开启该功能.</li>
</ul>
<p><strong>全连接队列控制</strong>
内核参数<code>/proc/sys/net/ipv4/tcp_abort_on_overflow</code>决定当溢出后系统如何处理.</p>
<ul>
<li>为0时表示server扔掉client发过来的ack.server会认为连接还未建立.server过段时间会继续向client发送syn+ack.重传会经历1、2、4、8、16、32秒(若重传为5次),如果服务端仍没有收到ack,才会关闭连接,总共需63秒.
<ul>
<li>内核参数<code>/proc/sys/net/ipv4/tcp_synack_retries</code>控制重试次数.如果client超时时间比较短,client就容易异常.</li>
</ul>
</li>
<li>为1时表示server发送一个reset包给client,表示废掉这个握手过程和连接.client会看到connection reset by peer的错误.</li>
</ul>
<pre><code># 在ubuntu18.04机器上的默认值.
sky-HP# cat /proc/sys/net/ipv4/tcp_abort_on_overflow 
0
sky-HP# cat /proc/sys/net/ipv4/tcp_synack_retries 
5
</code></pre><p>可以通过<code>sysctl -w</code>来修改这些内核参数,重启之后修改无效.</p>
<pre><code>sky-HP# sysctl -w net.ipv4.tcp_synack_retries=2
net.ipv4.tcp_synack_retries = 2
sky-HP# cat /proc/sys/net/ipv4/tcp_synack_retries 
2

sky-HP# sysctl -w net.ipv4.tcp_abort_on_overflow=1
net.ipv4.tcp_abort_on_overflow = 1
sky-HP# cat /proc/sys/net/ipv4/tcp_abort_on_overflow 
1
</code></pre><p>修改配置文件<code>/etc/sysctl.conf</code>,然后再<code>sysctl -p</code>来触发,重启之后仍生效.</p>
<h2 id="绕过三次握手">绕过三次握手</h2>
<p>三次握手建立连接的后果就是,数据请求必须在一个RTT(从客户端到服务器一个往返时间)后才能发送.</p>
<p>在Linux3.7内核版本之后,提供了TCP Fast Open功能,可以减少TCP连接建立的时延.
<img src="/images/fast.jpg" alt="Fast Open" title="Linux TCP Fast Open"></p>
<p>客户端首次建立连接时仍然需要三次握手.</p>
<ol>
<li>客户端发送SYN报文,报文包含Fast Open选项,且该选项的Cookie为空,表名客户端请求Fast Open Cookie.</li>
<li>支持TCP Fast Open的服务器生成Cookie,并置于SYN-ACK数据包中的Fast Open选项发回给客户端.</li>
<li>客户端收到SYN-ACK后,本地缓存Fast Open选项中的Cookie.</li>
</ol>
<p>当客户端再次与服务器建立连接时就可以利用Cookie来绕过三次握手过程.</p>
<ol>
<li>客户端发送SYN报文,该报文包含之前缓存的Cookie及业务数据报文.</li>
<li>支持TCP Fast Open的服务器会对收到的Cookie进行校验.
<ul>
<li>如果合法,服务器将在SYN-ACK报文中对SYN和业务数据进行确认,服务器随后把业务数据传递给应用程序;</li>
<li>如果不合法,服务器将丢弃SYN报文中包含的业务数据,且在SYN-ACK报文中只确认SYN的序列号.</li>
</ul>
</li>
<li>若服务器接受了SYN报文中的业务数据,即在握手完成之前发送了数据,这就减少了握手带来的一个RTT的时间消耗.</li>
<li>客户端将发送ACK确认服务器发回的SYN及数据.若客户端在初始的SYN报文中的数据未被确认,则客户端会重新发送这些数据.</li>
<li>此后的TCP连接的数据传输过程和非TCP Fast Open的正常情况是一致的.</li>
</ol>
<p>TCP Fast Open功能受内核参数<code>/proc/sys/net/ipv4/tcp_fastopen</code>控制.</p>
<ul>
<li>值为0时,表示关闭该功能.</li>
<li>值为1时,作为客户端使用Fast Open功能.</li>
<li>值为2时,作为服务端使用Fast Open功能.</li>
<li>值为3时,作为客户端和服务端都可以使用Fast Open功能.</li>
</ul>
<h2 id="参考文章">参考文章</h2>
<ul>
<li><a href="https://mp.weixin.qq.com/s/yH3PzGEFopbpA-jw4MythQ">TCP 三次握手原理，你真的理解吗？</a></li>
<li><a href="https://time.geekbang.org/column/article/81057">关于 Linux 网络，你必须知道这些</a></li>
<li><a href="https://www.cnblogs.com/otis/p/13070877.html">看完这篇，再不懂TCP我也没办法了</a></li>
<li><a href="https://www.cnxct.com/something-about-phpfpm-s-backlog/">TCP SOCKET中backlog参数的用途是什么？</a></li>
</ul>
]]></content>
		</item>
		
	</channel>
</rss>
