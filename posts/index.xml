<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on 深白色9527</title>
		<link>https://shenbaise9527.github.io/posts/</link>
		<description>Recent content in Posts on 深白色9527</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Sat, 07 Nov 2020 11:47:48 +0800</lastBuildDate>
		<atom:link href="https://shenbaise9527.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>gRPC系列之server端调用</title>
			<link>https://shenbaise9527.github.io/posts/grpc%E7%B3%BB%E5%88%97%E4%B9%8Bserver%E7%AB%AF%E8%B0%83%E7%94%A8/</link>
			<pubDate>Sat, 07 Nov 2020 11:47:48 +0800</pubDate>
			
			<guid>https://shenbaise9527.github.io/posts/grpc%E7%B3%BB%E5%88%97%E4%B9%8Bserver%E7%AB%AF%E8%B0%83%E7%94%A8/</guid>
			<description>NewServer创建gRPC服务对象 主要是基于grpc-go的1.33.1版本Unary RPC来分析. // NewServer creates a gRPC server which has no service registered and has not // started to accept</description>
			<content type="html"><![CDATA[<h2 id="newserver创建grpc服务对象">NewServer创建gRPC服务对象</h2>
<p>主要是基于grpc-go的1.33.1版本Unary RPC来分析.</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// NewServer creates a gRPC server which has no service registered and has not
</span><span class="c1">// started to accept requests yet.
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">NewServer</span><span class="p">(</span><span class="nx">opt</span> <span class="o">...</span><span class="nx">ServerOption</span><span class="p">)</span> <span class="o">*</span><span class="nx">Server</span> <span class="p">{</span>
    <span class="c1">// 处理Server对象的一些定制化参数.在Go中推荐采用Option的方式从外部来影响对象内的行为.
</span><span class="c1"></span>	<span class="nx">opts</span> <span class="o">:=</span> <span class="nx">defaultServerOptions</span>
	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">o</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">opt</span> <span class="p">{</span>
		<span class="nx">o</span><span class="p">.</span><span class="nf">apply</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">opts</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="c1">// 生成Server对象.
</span><span class="c1"></span>	<span class="nx">s</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">Server</span><span class="p">{</span>
        <span class="nx">lis</span><span class="p">:</span>      <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="nx">net</span><span class="p">.</span><span class="nx">Listener</span><span class="p">]</span><span class="kt">bool</span><span class="p">),</span>
        <span class="nx">opts</span><span class="p">:</span>     <span class="nx">opts</span><span class="p">,</span>
		<span class="nx">conns</span><span class="p">:</span>    <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="nx">transport</span><span class="p">.</span><span class="nx">ServerTransport</span><span class="p">]</span><span class="kt">bool</span><span class="p">),</span>
		<span class="nx">services</span><span class="p">:</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="nx">serviceInfo</span><span class="p">),</span>
		<span class="nx">quit</span><span class="p">:</span>     <span class="nx">grpcsync</span><span class="p">.</span><span class="nf">NewEvent</span><span class="p">(),</span>
		<span class="nx">done</span><span class="p">:</span>     <span class="nx">grpcsync</span><span class="p">.</span><span class="nf">NewEvent</span><span class="p">(),</span>
		<span class="nx">czData</span><span class="p">:</span>   <span class="nb">new</span><span class="p">(</span><span class="nx">channelzData</span><span class="p">),</span>
    <span class="p">}</span>
    
    <span class="c1">// 处理一元服务端拦截器,支持链式多拦截器.
</span><span class="c1"></span>    <span class="nf">chainUnaryServerInterceptors</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span>
    
    <span class="c1">// 处理流式服务端拦截器,支持链式多拦截器.
</span><span class="c1"></span>	<span class="nf">chainStreamServerInterceptors</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span>
	<span class="nx">s</span><span class="p">.</span><span class="nx">cv</span> <span class="p">=</span> <span class="nx">sync</span><span class="p">.</span><span class="nf">NewCond</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">s</span><span class="p">.</span><span class="nx">mu</span><span class="p">)</span>
	<span class="k">if</span> <span class="nx">EnableTracing</span> <span class="p">{</span>
		<span class="nx">_</span><span class="p">,</span> <span class="nx">file</span><span class="p">,</span> <span class="nx">line</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">runtime</span><span class="p">.</span><span class="nf">Caller</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
		<span class="nx">s</span><span class="p">.</span><span class="nx">events</span> <span class="p">=</span> <span class="nx">trace</span><span class="p">.</span><span class="nf">NewEventLog</span><span class="p">(</span><span class="s">&#34;grpc.Server&#34;</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;%s:%d&#34;</span><span class="p">,</span> <span class="nx">file</span><span class="p">,</span> <span class="nx">line</span><span class="p">))</span>
	<span class="p">}</span>

    <span class="c1">// 用来控制处理连接的goroutine的数量,为0时表示不控制.
</span><span class="c1"></span>	<span class="k">if</span> <span class="nx">s</span><span class="p">.</span><span class="nx">opts</span><span class="p">.</span><span class="nx">numServerWorkers</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
		<span class="nx">s</span><span class="p">.</span><span class="nf">initServerWorkers</span><span class="p">()</span>
	<span class="p">}</span>

	<span class="k">if</span> <span class="nx">channelz</span><span class="p">.</span><span class="nf">IsOn</span><span class="p">()</span> <span class="p">{</span>
		<span class="nx">s</span><span class="p">.</span><span class="nx">channelzID</span> <span class="p">=</span> <span class="nx">channelz</span><span class="p">.</span><span class="nf">RegisterServer</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">channelzServer</span><span class="p">{</span><span class="nx">s</span><span class="p">},</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="nx">s</span>
<span class="p">}</span>
</code></pre></div><h2 id="serveroption自定义参数">ServerOption自定义参数</h2>
<p><strong>Creds</strong>
主要用来设置服务端认证相关的参数.</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// 用来设置TLS.
</span><span class="c1">// Creds returns a ServerOption that sets credentials for server connections.
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">Creds</span><span class="p">(</span><span class="nx">c</span> <span class="nx">credentials</span><span class="p">.</span><span class="nx">TransportCredentials</span><span class="p">)</span> <span class="nx">ServerOption</span> <span class="p">{</span>
	<span class="k">return</span> <span class="nf">newFuncServerOption</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">o</span> <span class="o">*</span><span class="nx">serverOptions</span><span class="p">)</span> <span class="p">{</span>
		<span class="nx">o</span><span class="p">.</span><span class="nx">creds</span> <span class="p">=</span> <span class="nx">c</span>
	<span class="p">})</span>
<span class="p">}</span>

<span class="c1">// gRPC中的credentials包,已定义相关的TransportCredentials.
</span><span class="c1">// NewServerTLSFromFile constructs TLS credentials from the input certificate file and key
</span><span class="c1">// file for server.
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">NewServerTLSFromFile</span><span class="p">(</span><span class="nx">certFile</span><span class="p">,</span> <span class="nx">keyFile</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="nx">TransportCredentials</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">cert</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">tls</span><span class="p">.</span><span class="nf">LoadX509KeyPair</span><span class="p">(</span><span class="nx">certFile</span><span class="p">,</span> <span class="nx">keyFile</span><span class="p">)</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="nf">NewTLS</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">tls</span><span class="p">.</span><span class="nx">Config</span><span class="p">{</span><span class="nx">Certificates</span><span class="p">:</span> <span class="p">[]</span><span class="nx">tls</span><span class="p">.</span><span class="nx">Certificate</span><span class="p">{</span><span class="nx">cert</span><span class="p">}}),</span> <span class="kc">nil</span>
<span class="p">}</span>
</code></pre></div><p><strong>UnaryInterceptor</strong>
主要用来设置服务端的拦截器.</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// UnaryInterceptor returns a ServerOption that sets the UnaryServerInterceptor for the
</span><span class="c1">// server. Only one unary interceptor can be installed. The construction of multiple
</span><span class="c1">// interceptors (e.g., chaining) can be implemented at the caller.
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">UnaryInterceptor</span><span class="p">(</span><span class="nx">i</span> <span class="nx">UnaryServerInterceptor</span><span class="p">)</span> <span class="nx">ServerOption</span> <span class="p">{</span>
	<span class="k">return</span> <span class="nf">newFuncServerOption</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">o</span> <span class="o">*</span><span class="nx">serverOptions</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">if</span> <span class="nx">o</span><span class="p">.</span><span class="nx">unaryInt</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
			<span class="nb">panic</span><span class="p">(</span><span class="s">&#34;The unary server interceptor was already set and may not be reset.&#34;</span><span class="p">)</span>
		<span class="p">}</span>
		<span class="nx">o</span><span class="p">.</span><span class="nx">unaryInt</span> <span class="p">=</span> <span class="nx">i</span>
	<span class="p">})</span>
<span class="p">}</span>

<span class="c1">// 具体的自定义拦截器需要实现UnaryServerInterceptor函数原型.
</span><span class="c1">// UnaryServerInterceptor provides a hook to intercept the execution of a unary RPC on the server. info
</span><span class="c1">// contains all the information of this RPC the interceptor can operate on. And handler is the wrapper
</span><span class="c1">// of the service method implementation. It is the responsibility of the interceptor to invoke handler
</span><span class="c1">// to complete the RPC.
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">UnaryServerInterceptor</span> <span class="kd">func</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">req</span> <span class="kd">interface</span><span class="p">{},</span> <span class="nx">info</span> <span class="o">*</span><span class="nx">UnaryServerInfo</span><span class="p">,</span> <span class="nx">handler</span> <span class="nx">UnaryHandler</span><span class="p">)</span> <span class="p">(</span><span class="nx">resp</span> <span class="kd">interface</span><span class="p">{},</span> <span class="nx">err</span> <span class="kt">error</span><span class="p">)</span>
</code></pre></div><p><strong>ChainUnaryInterceptor</strong>
主要用来设置服务端的链式拦截器.</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// 支持同时设置多个拦截器.
</span><span class="c1">// ChainUnaryInterceptor returns a ServerOption that specifies the chained interceptor
</span><span class="c1">// for unary RPCs. The first interceptor will be the outer most,
</span><span class="c1">// while the last interceptor will be the inner most wrapper around the real call.
</span><span class="c1">// All unary interceptors added by this method will be chained.
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">ChainUnaryInterceptor</span><span class="p">(</span><span class="nx">interceptors</span> <span class="o">...</span><span class="nx">UnaryServerInterceptor</span><span class="p">)</span> <span class="nx">ServerOption</span> <span class="p">{</span>
	<span class="k">return</span> <span class="nf">newFuncServerOption</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">o</span> <span class="o">*</span><span class="nx">serverOptions</span><span class="p">)</span> <span class="p">{</span>
		<span class="nx">o</span><span class="p">.</span><span class="nx">chainUnaryInts</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">chainUnaryInts</span><span class="p">,</span> <span class="nx">interceptors</span><span class="o">...</span><span class="p">)</span>
	<span class="p">})</span>
<span class="p">}</span>
</code></pre></div><h2 id="注册rpc对象到server中">注册RPC对象到Server中</h2>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// 注册HelloServiceServer对象到gRPC对象中.
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">RegisterHelloServiceServer</span><span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">grpc</span><span class="p">.</span><span class="nx">Server</span><span class="p">,</span> <span class="nx">srv</span> <span class="nx">HelloServiceServer</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">s</span><span class="p">.</span><span class="nf">RegisterService</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">_HelloService_serviceDesc</span><span class="p">,</span> <span class="nx">srv</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// _HelloService_serviceDesc主要用来描述RPC对象的信息.
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">_HelloService_serviceDesc</span> <span class="p">=</span> <span class="nx">grpc</span><span class="p">.</span><span class="nx">ServiceDesc</span><span class="p">{</span>
	<span class="nx">ServiceName</span><span class="p">:</span> <span class="s">&#34;HelloService&#34;</span><span class="p">,</span>
	<span class="nx">HandlerType</span><span class="p">:</span> <span class="p">(</span><span class="o">*</span><span class="nx">HelloServiceServer</span><span class="p">)(</span><span class="kc">nil</span><span class="p">),</span>
	<span class="nx">Methods</span><span class="p">:</span> <span class="p">[]</span><span class="nx">grpc</span><span class="p">.</span><span class="nx">MethodDesc</span><span class="p">{</span>
		<span class="p">{</span>
			<span class="nx">MethodName</span><span class="p">:</span> <span class="s">&#34;SayHello&#34;</span><span class="p">,</span>
			<span class="nx">Handler</span><span class="p">:</span>    <span class="nx">_HelloService_SayHello_Handler</span><span class="p">,</span>
		<span class="p">},</span>
	<span class="p">},</span>
	<span class="nx">Streams</span><span class="p">:</span>  <span class="p">[]</span><span class="nx">grpc</span><span class="p">.</span><span class="nx">StreamDesc</span><span class="p">{},</span>
	<span class="nx">Metadata</span><span class="p">:</span> <span class="s">&#34;hello.proto&#34;</span><span class="p">,</span>
<span class="p">}</span>

<span class="c1">// 注册RPC服务对象.
</span><span class="c1">// RegisterService registers a service and its implementation to the gRPC
</span><span class="c1">// server. It is called from the IDL generated code. This must be called before
</span><span class="c1">// invoking Serve. If ss is non-nil (for legacy code), its type is checked to
</span><span class="c1">// ensure it implements sd.HandlerType.
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">Server</span><span class="p">)</span> <span class="nf">RegisterService</span><span class="p">(</span><span class="nx">sd</span> <span class="o">*</span><span class="nx">ServiceDesc</span><span class="p">,</span> <span class="nx">ss</span> <span class="kd">interface</span><span class="p">{})</span> <span class="p">{</span>
    <span class="c1">// 主要用来判断接口类型是否一致.
</span><span class="c1"></span>	<span class="k">if</span> <span class="nx">ss</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nx">ht</span> <span class="o">:=</span> <span class="nx">reflect</span><span class="p">.</span><span class="nf">TypeOf</span><span class="p">(</span><span class="nx">sd</span><span class="p">.</span><span class="nx">HandlerType</span><span class="p">).</span><span class="nf">Elem</span><span class="p">()</span>
		<span class="nx">st</span> <span class="o">:=</span> <span class="nx">reflect</span><span class="p">.</span><span class="nf">TypeOf</span><span class="p">(</span><span class="nx">ss</span><span class="p">)</span>
		<span class="k">if</span> <span class="p">!</span><span class="nx">st</span><span class="p">.</span><span class="nf">Implements</span><span class="p">(</span><span class="nx">ht</span><span class="p">)</span> <span class="p">{</span>
			<span class="nx">logger</span><span class="p">.</span><span class="nf">Fatalf</span><span class="p">(</span><span class="s">&#34;grpc: Server.RegisterService found the handler of type %v that does not satisfy %v&#34;</span><span class="p">,</span> <span class="nx">st</span><span class="p">,</span> <span class="nx">ht</span><span class="p">)</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="nx">s</span><span class="p">.</span><span class="nf">register</span><span class="p">(</span><span class="nx">sd</span><span class="p">,</span> <span class="nx">ss</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">Server</span><span class="p">)</span> <span class="nf">register</span><span class="p">(</span><span class="nx">sd</span> <span class="o">*</span><span class="nx">ServiceDesc</span><span class="p">,</span> <span class="nx">ss</span> <span class="kd">interface</span><span class="p">{})</span> <span class="p">{</span>
	<span class="nx">s</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
	<span class="k">defer</span> <span class="nx">s</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
	<span class="nx">s</span><span class="p">.</span><span class="nf">printf</span><span class="p">(</span><span class="s">&#34;RegisterService(%q)&#34;</span><span class="p">,</span> <span class="nx">sd</span><span class="p">.</span><span class="nx">ServiceName</span><span class="p">)</span>
	<span class="k">if</span> <span class="nx">s</span><span class="p">.</span><span class="nx">serve</span> <span class="p">{</span>
		<span class="nx">logger</span><span class="p">.</span><span class="nf">Fatalf</span><span class="p">(</span><span class="s">&#34;grpc: Server.RegisterService after Server.Serve for %q&#34;</span><span class="p">,</span> <span class="nx">sd</span><span class="p">.</span><span class="nx">ServiceName</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="c1">// 判断服务名是否已经注册过了.
</span><span class="c1"></span>	<span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">s</span><span class="p">.</span><span class="nx">services</span><span class="p">[</span><span class="nx">sd</span><span class="p">.</span><span class="nx">ServiceName</span><span class="p">];</span> <span class="nx">ok</span> <span class="p">{</span>
		<span class="nx">logger</span><span class="p">.</span><span class="nf">Fatalf</span><span class="p">(</span><span class="s">&#34;grpc: Server.RegisterService found duplicate service registration for %q&#34;</span><span class="p">,</span> <span class="nx">sd</span><span class="p">.</span><span class="nx">ServiceName</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="c1">// 创建serviceInfo对象.
</span><span class="c1"></span>	<span class="nx">info</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">serviceInfo</span><span class="p">{</span>
        <span class="c1">// 接口的实现对象.
</span><span class="c1"></span>        <span class="nx">serviceImpl</span><span class="p">:</span> <span class="nx">ss</span><span class="p">,</span>
        
        <span class="c1">// 具体的方法描述信息.
</span><span class="c1"></span>		<span class="nx">methods</span><span class="p">:</span>     <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="nx">MethodDesc</span><span class="p">),</span>
        <span class="nx">streams</span><span class="p">:</span>     <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="nx">StreamDesc</span><span class="p">),</span>
        
        <span class="c1">// 元数据.
</span><span class="c1"></span>		<span class="nx">mdata</span><span class="p">:</span>       <span class="nx">sd</span><span class="p">.</span><span class="nx">Metadata</span><span class="p">,</span>
    <span class="p">}</span>
    
    <span class="c1">// 保存具体的方法.
</span><span class="c1"></span>	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">sd</span><span class="p">.</span><span class="nx">Methods</span> <span class="p">{</span>
		<span class="nx">d</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">sd</span><span class="p">.</span><span class="nx">Methods</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
		<span class="nx">info</span><span class="p">.</span><span class="nx">methods</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">MethodName</span><span class="p">]</span> <span class="p">=</span> <span class="nx">d</span>
	<span class="p">}</span>
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">sd</span><span class="p">.</span><span class="nx">Streams</span> <span class="p">{</span>
		<span class="nx">d</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">sd</span><span class="p">.</span><span class="nx">Streams</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
		<span class="nx">info</span><span class="p">.</span><span class="nx">streams</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">StreamName</span><span class="p">]</span> <span class="p">=</span> <span class="nx">d</span>
	<span class="p">}</span>
	<span class="nx">s</span><span class="p">.</span><span class="nx">services</span><span class="p">[</span><span class="nx">sd</span><span class="p">.</span><span class="nx">ServiceName</span><span class="p">]</span> <span class="p">=</span> <span class="nx">info</span>
<span class="p">}</span>
</code></pre></div><h2 id="server启动监听等待连接">Server启动监听等待连接</h2>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// Serve accepts incoming connections on the listener lis, creating a new
</span><span class="c1">// ServerTransport and service goroutine for each. The service goroutines
</span><span class="c1">// read gRPC requests and then call the registered handlers to reply to them.
</span><span class="c1">// Serve returns when lis.Accept fails with fatal errors.  lis will be closed when
</span><span class="c1">// this method returns.
</span><span class="c1">// Serve will return a non-nil error unless Stop or GracefulStop is called.
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">Server</span><span class="p">)</span> <span class="nf">Serve</span><span class="p">(</span><span class="nx">lis</span> <span class="nx">net</span><span class="p">.</span><span class="nx">Listener</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="nx">s</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>

    <span class="o">......</span>

	<span class="nx">ls</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">listenSocket</span><span class="p">{</span><span class="nx">Listener</span><span class="p">:</span> <span class="nx">lis</span><span class="p">}</span>
	<span class="nx">s</span><span class="p">.</span><span class="nx">lis</span><span class="p">[</span><span class="nx">ls</span><span class="p">]</span> <span class="p">=</span> <span class="kc">true</span>

    <span class="o">......</span>

	<span class="nx">s</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>

	<span class="k">defer</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
		<span class="nx">s</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
		<span class="k">if</span> <span class="nx">s</span><span class="p">.</span><span class="nx">lis</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">s</span><span class="p">.</span><span class="nx">lis</span><span class="p">[</span><span class="nx">ls</span><span class="p">]</span> <span class="p">{</span>
			<span class="nx">ls</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
			<span class="nb">delete</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">lis</span><span class="p">,</span> <span class="nx">ls</span><span class="p">)</span>
		<span class="p">}</span>
		<span class="nx">s</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
	<span class="p">}()</span>

	<span class="kd">var</span> <span class="nx">tempDelay</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span> <span class="c1">// how long to sleep on accept failure
</span><span class="c1"></span>
	<span class="k">for</span> <span class="p">{</span>
        <span class="c1">// 等待连接.
</span><span class="c1"></span>		<span class="nx">rawConn</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">lis</span><span class="p">.</span><span class="nf">Accept</span><span class="p">()</span>
		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
            <span class="c1">// 当返回错误时,会尝试重新调用Accept,时间间隔从5毫秒开始,每重试一次时间翻倍,直到1秒.
</span><span class="c1"></span>			<span class="k">if</span> <span class="nx">ne</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">err</span><span class="p">.(</span><span class="kd">interface</span> <span class="p">{</span>
				<span class="nf">Temporary</span><span class="p">()</span> <span class="kt">bool</span>
			<span class="p">});</span> <span class="nx">ok</span> <span class="o">&amp;&amp;</span> <span class="nx">ne</span><span class="p">.</span><span class="nf">Temporary</span><span class="p">()</span> <span class="p">{</span>
                <span class="c1">// 计算时间间隔的逻辑.
</span><span class="c1"></span>				<span class="k">if</span> <span class="nx">tempDelay</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
					<span class="nx">tempDelay</span> <span class="p">=</span> <span class="mi">5</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Millisecond</span>
				<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
					<span class="nx">tempDelay</span> <span class="o">*=</span> <span class="mi">2</span>
				<span class="p">}</span>
				<span class="k">if</span> <span class="nx">max</span> <span class="o">:=</span> <span class="mi">1</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">;</span> <span class="nx">tempDelay</span> <span class="p">&gt;</span> <span class="nx">max</span> <span class="p">{</span>
					<span class="nx">tempDelay</span> <span class="p">=</span> <span class="nx">max</span>
				<span class="p">}</span>
				<span class="nx">s</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
				<span class="nx">s</span><span class="p">.</span><span class="nf">printf</span><span class="p">(</span><span class="s">&#34;Accept error: %v; retrying in %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">,</span> <span class="nx">tempDelay</span><span class="p">)</span>
				<span class="nx">s</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
				<span class="nx">timer</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nf">NewTimer</span><span class="p">(</span><span class="nx">tempDelay</span><span class="p">)</span>
				<span class="k">select</span> <span class="p">{</span>
				<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">timer</span><span class="p">.</span><span class="nx">C</span><span class="p">:</span>
				<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">s</span><span class="p">.</span><span class="nx">quit</span><span class="p">.</span><span class="nf">Done</span><span class="p">():</span>
					<span class="nx">timer</span><span class="p">.</span><span class="nf">Stop</span><span class="p">()</span>
					<span class="k">return</span> <span class="kc">nil</span>
				<span class="p">}</span>
				<span class="k">continue</span>
			<span class="p">}</span>
			<span class="nx">s</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
			<span class="nx">s</span><span class="p">.</span><span class="nf">printf</span><span class="p">(</span><span class="s">&#34;done serving; Accept = %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
			<span class="nx">s</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>

			<span class="k">if</span> <span class="nx">s</span><span class="p">.</span><span class="nx">quit</span><span class="p">.</span><span class="nf">HasFired</span><span class="p">()</span> <span class="p">{</span>
				<span class="k">return</span> <span class="kc">nil</span>
			<span class="p">}</span>
			<span class="k">return</span> <span class="nx">err</span>
        <span class="p">}</span>
        
        <span class="c1">// Accept正常后,重置时间为0.
</span><span class="c1"></span>		<span class="nx">tempDelay</span> <span class="p">=</span> <span class="mi">0</span>
		<span class="c1">// Start a new goroutine to deal with rawConn so we don&#39;t stall this Accept
</span><span class="c1"></span>		<span class="c1">// loop goroutine.
</span><span class="c1"></span>		<span class="c1">//
</span><span class="c1"></span>		<span class="c1">// Make sure we account for the goroutine so GracefulStop doesn&#39;t nil out
</span><span class="c1"></span>        <span class="c1">// s.conns before this conn can be added.
</span><span class="c1"></span>        <span class="c1">// 主要是为了优雅的关闭,在关闭前所有的连接必须被处理完了.
</span><span class="c1"></span>		<span class="nx">s</span><span class="p">.</span><span class="nx">serveWG</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
		<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
            <span class="c1">// 启动一个新的goroutine来处理新的连接.
</span><span class="c1"></span>			<span class="nx">s</span><span class="p">.</span><span class="nf">handleRawConn</span><span class="p">(</span><span class="nx">rawConn</span><span class="p">)</span>
			<span class="nx">s</span><span class="p">.</span><span class="nx">serveWG</span><span class="p">.</span><span class="nf">Done</span><span class="p">()</span>
		<span class="p">}()</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div><h2 id="业务处理逻辑">业务处理逻辑</h2>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// handleRawConn forks a goroutine to handle a just-accepted connection that
</span><span class="c1">// has not had any I/O performed on it yet.
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">Server</span><span class="p">)</span> <span class="nf">handleRawConn</span><span class="p">(</span><span class="nx">rawConn</span> <span class="nx">net</span><span class="p">.</span><span class="nx">Conn</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">if</span> <span class="nx">s</span><span class="p">.</span><span class="nx">quit</span><span class="p">.</span><span class="nf">HasFired</span><span class="p">()</span> <span class="p">{</span>
		<span class="nx">rawConn</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
		<span class="k">return</span>
    <span class="p">}</span>
    
    <span class="c1">// 设置超时时间,默认是120秒.
</span><span class="c1"></span>    <span class="nx">rawConn</span><span class="p">.</span><span class="nf">SetDeadline</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nf">Now</span><span class="p">().</span><span class="nf">Add</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">opts</span><span class="p">.</span><span class="nx">connectionTimeout</span><span class="p">))</span>
    
    <span class="c1">// 处理TLS认证.
</span><span class="c1"></span>	<span class="nx">conn</span><span class="p">,</span> <span class="nx">authInfo</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">s</span><span class="p">.</span><span class="nf">useTransportAuthenticator</span><span class="p">(</span><span class="nx">rawConn</span><span class="p">)</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="c1">// ErrConnDispatched means that the connection was dispatched away from
</span><span class="c1"></span>		<span class="c1">// gRPC; those connections should be left open.
</span><span class="c1"></span>		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="nx">credentials</span><span class="p">.</span><span class="nx">ErrConnDispatched</span> <span class="p">{</span>
			<span class="nx">s</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
			<span class="nx">s</span><span class="p">.</span><span class="nf">errorf</span><span class="p">(</span><span class="s">&#34;ServerHandshake(%q) failed: %v&#34;</span><span class="p">,</span> <span class="nx">rawConn</span><span class="p">.</span><span class="nf">RemoteAddr</span><span class="p">(),</span> <span class="nx">err</span><span class="p">)</span>
			<span class="nx">s</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
			<span class="nx">channelz</span><span class="p">.</span><span class="nf">Warningf</span><span class="p">(</span><span class="nx">logger</span><span class="p">,</span> <span class="nx">s</span><span class="p">.</span><span class="nx">channelzID</span><span class="p">,</span> <span class="s">&#34;grpc: Server.Serve failed to complete security handshake from %q: %v&#34;</span><span class="p">,</span> <span class="nx">rawConn</span><span class="p">.</span><span class="nf">RemoteAddr</span><span class="p">(),</span> <span class="nx">err</span><span class="p">)</span>
			<span class="nx">rawConn</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
		<span class="p">}</span>
		<span class="nx">rawConn</span><span class="p">.</span><span class="nf">SetDeadline</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Time</span><span class="p">{})</span>
		<span class="k">return</span>
	<span class="p">}</span>

    <span class="c1">// 开启HTTP/2协议.
</span><span class="c1"></span>	<span class="c1">// Finish handshaking (HTTP2)
</span><span class="c1"></span>	<span class="nx">st</span> <span class="o">:=</span> <span class="nx">s</span><span class="p">.</span><span class="nf">newHTTP2Transport</span><span class="p">(</span><span class="nx">conn</span><span class="p">,</span> <span class="nx">authInfo</span><span class="p">)</span>
	<span class="k">if</span> <span class="nx">st</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="k">return</span>
	<span class="p">}</span>

	<span class="nx">rawConn</span><span class="p">.</span><span class="nf">SetDeadline</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Time</span><span class="p">{})</span>
	<span class="k">if</span> <span class="p">!</span><span class="nx">s</span><span class="p">.</span><span class="nf">addConn</span><span class="p">(</span><span class="nx">st</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">return</span>
	<span class="p">}</span>
	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// 开启新的goroutine来处理业务数据.
</span><span class="c1"></span>		<span class="nx">s</span><span class="p">.</span><span class="nf">serveStreams</span><span class="p">(</span><span class="nx">st</span><span class="p">)</span>
		<span class="nx">s</span><span class="p">.</span><span class="nf">removeConn</span><span class="p">(</span><span class="nx">st</span><span class="p">)</span>
	<span class="p">}()</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">Server</span><span class="p">)</span> <span class="nf">serveStreams</span><span class="p">(</span><span class="nx">st</span> <span class="nx">transport</span><span class="p">.</span><span class="nx">ServerTransport</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">defer</span> <span class="nx">st</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
	<span class="kd">var</span> <span class="nx">wg</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span>

    <span class="kd">var</span> <span class="nx">roundRobinCounter</span> <span class="kt">uint32</span>
    <span class="c1">// HandleStreams主要是接收数据,并生成Stream对象,在调用下面的匿名函数来处理具体的业务逻辑.
</span><span class="c1"></span>	<span class="nx">st</span><span class="p">.</span><span class="nf">HandleStreams</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">stream</span> <span class="o">*</span><span class="nx">transport</span><span class="p">.</span><span class="nx">Stream</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">wg</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
        <span class="c1">// 判断是否有设置numServerWorkers.
</span><span class="c1"></span>		<span class="k">if</span> <span class="nx">s</span><span class="p">.</span><span class="nx">opts</span><span class="p">.</span><span class="nx">numServerWorkers</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
			<span class="nx">data</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">serverWorkerData</span><span class="p">{</span><span class="nx">st</span><span class="p">:</span> <span class="nx">st</span><span class="p">,</span> <span class="nx">wg</span><span class="p">:</span> <span class="o">&amp;</span><span class="nx">wg</span><span class="p">,</span> <span class="nx">stream</span><span class="p">:</span> <span class="nx">stream</span><span class="p">}</span>
			<span class="k">select</span> <span class="p">{</span>
            <span class="c1">// 发送数据到指定的channel中.
</span><span class="c1"></span>			<span class="k">case</span> <span class="nx">s</span><span class="p">.</span><span class="nx">serverWorkerChannels</span><span class="p">[</span><span class="nx">atomic</span><span class="p">.</span><span class="nf">AddUint32</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">roundRobinCounter</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="nx">s</span><span class="p">.</span><span class="nx">opts</span><span class="p">.</span><span class="nx">numServerWorkers</span><span class="p">]</span> <span class="o">&lt;-</span> <span class="nx">data</span><span class="p">:</span>
			<span class="k">default</span><span class="p">:</span>
				<span class="c1">// If all stream workers are busy, fallback to the default code path.
</span><span class="c1"></span>				<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
                    <span class="c1">// 若所有workerchannel都在忙,则单独创建goroutine.
</span><span class="c1"></span>					<span class="nx">s</span><span class="p">.</span><span class="nf">handleStream</span><span class="p">(</span><span class="nx">st</span><span class="p">,</span> <span class="nx">stream</span><span class="p">,</span> <span class="nx">s</span><span class="p">.</span><span class="nf">traceInfo</span><span class="p">(</span><span class="nx">st</span><span class="p">,</span> <span class="nx">stream</span><span class="p">))</span>
					<span class="nx">wg</span><span class="p">.</span><span class="nf">Done</span><span class="p">()</span>
				<span class="p">}()</span>
			<span class="p">}</span>
		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
			<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
                <span class="c1">// 没有限制worker大小,则单独创建goroutine.
</span><span class="c1"></span>				<span class="k">defer</span> <span class="nx">wg</span><span class="p">.</span><span class="nf">Done</span><span class="p">()</span>
				<span class="nx">s</span><span class="p">.</span><span class="nf">handleStream</span><span class="p">(</span><span class="nx">st</span><span class="p">,</span> <span class="nx">stream</span><span class="p">,</span> <span class="nx">s</span><span class="p">.</span><span class="nf">traceInfo</span><span class="p">(</span><span class="nx">st</span><span class="p">,</span> <span class="nx">stream</span><span class="p">))</span>
			<span class="p">}()</span>
		<span class="p">}</span>
	<span class="p">},</span> <span class="kd">func</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">method</span> <span class="kt">string</span><span class="p">)</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span> <span class="p">{</span>
		<span class="k">if</span> <span class="p">!</span><span class="nx">EnableTracing</span> <span class="p">{</span>
			<span class="k">return</span> <span class="nx">ctx</span>
		<span class="p">}</span>
		<span class="nx">tr</span> <span class="o">:=</span> <span class="nx">trace</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;grpc.Recv.&#34;</span><span class="o">+</span><span class="nf">methodFamily</span><span class="p">(</span><span class="nx">method</span><span class="p">),</span> <span class="nx">method</span><span class="p">)</span>
		<span class="k">return</span> <span class="nx">trace</span><span class="p">.</span><span class="nf">NewContext</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">tr</span><span class="p">)</span>
	<span class="p">})</span>
	<span class="nx">wg</span><span class="p">.</span><span class="nf">Wait</span><span class="p">()</span>
<span class="p">}</span>

<span class="c1">// HandleStreams receives incoming streams using the given handler. This is
</span><span class="c1">// typically run in a separate goroutine.
</span><span class="c1">// traceCtx attaches trace to ctx and returns the new context.
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">http2Server</span><span class="p">)</span> <span class="nf">HandleStreams</span><span class="p">(</span><span class="nx">handle</span> <span class="kd">func</span><span class="p">(</span><span class="o">*</span><span class="nx">Stream</span><span class="p">),</span> <span class="nx">traceCtx</span> <span class="kd">func</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="kt">string</span><span class="p">)</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">defer</span> <span class="nb">close</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">readerDone</span><span class="p">)</span>
	<span class="k">for</span> <span class="p">{</span>
        <span class="nx">t</span><span class="p">.</span><span class="nx">controlBuf</span><span class="p">.</span><span class="nf">throttle</span><span class="p">()</span>
        <span class="c1">// 读取HTTP/2协议中的frame数据.
</span><span class="c1"></span>		<span class="nx">frame</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">t</span><span class="p">.</span><span class="nx">framer</span><span class="p">.</span><span class="nx">fr</span><span class="p">.</span><span class="nf">ReadFrame</span><span class="p">()</span>
		<span class="nx">atomic</span><span class="p">.</span><span class="nf">StoreInt64</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">t</span><span class="p">.</span><span class="nx">lastRead</span><span class="p">,</span> <span class="nx">time</span><span class="p">.</span><span class="nf">Now</span><span class="p">().</span><span class="nf">UnixNano</span><span class="p">())</span>
		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
            <span class="c1">// 错误相关.
</span><span class="c1"></span>            <span class="o">......</span>
			<span class="nx">t</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
			<span class="k">return</span>
        <span class="p">}</span>
        <span class="c1">// 针对不同类型的frame的处理,可以和之前的抓包对应起来.
</span><span class="c1"></span>		<span class="k">switch</span> <span class="nx">frame</span> <span class="o">:=</span> <span class="nx">frame</span><span class="p">.(</span><span class="kd">type</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">case</span> <span class="o">*</span><span class="nx">http2</span><span class="p">.</span><span class="nx">MetaHeadersFrame</span><span class="p">:</span>
			<span class="k">if</span> <span class="nx">t</span><span class="p">.</span><span class="nf">operateHeaders</span><span class="p">(</span><span class="nx">frame</span><span class="p">,</span> <span class="nx">handle</span><span class="p">,</span> <span class="nx">traceCtx</span><span class="p">)</span> <span class="p">{</span>
				<span class="nx">t</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
				<span class="k">break</span>
			<span class="p">}</span>
		<span class="k">case</span> <span class="o">*</span><span class="nx">http2</span><span class="p">.</span><span class="nx">DataFrame</span><span class="p">:</span>
			<span class="nx">t</span><span class="p">.</span><span class="nf">handleData</span><span class="p">(</span><span class="nx">frame</span><span class="p">)</span>
		<span class="k">case</span> <span class="o">*</span><span class="nx">http2</span><span class="p">.</span><span class="nx">RSTStreamFrame</span><span class="p">:</span>
			<span class="nx">t</span><span class="p">.</span><span class="nf">handleRSTStream</span><span class="p">(</span><span class="nx">frame</span><span class="p">)</span>
		<span class="k">case</span> <span class="o">*</span><span class="nx">http2</span><span class="p">.</span><span class="nx">SettingsFrame</span><span class="p">:</span>
			<span class="nx">t</span><span class="p">.</span><span class="nf">handleSettings</span><span class="p">(</span><span class="nx">frame</span><span class="p">)</span>
		<span class="k">case</span> <span class="o">*</span><span class="nx">http2</span><span class="p">.</span><span class="nx">PingFrame</span><span class="p">:</span>
			<span class="nx">t</span><span class="p">.</span><span class="nf">handlePing</span><span class="p">(</span><span class="nx">frame</span><span class="p">)</span>
		<span class="k">case</span> <span class="o">*</span><span class="nx">http2</span><span class="p">.</span><span class="nx">WindowUpdateFrame</span><span class="p">:</span>
			<span class="nx">t</span><span class="p">.</span><span class="nf">handleWindowUpdate</span><span class="p">(</span><span class="nx">frame</span><span class="p">)</span>
		<span class="k">case</span> <span class="o">*</span><span class="nx">http2</span><span class="p">.</span><span class="nx">GoAwayFrame</span><span class="p">:</span>
			<span class="c1">// TODO: Handle GoAway from the client appropriately.
</span><span class="c1"></span>		<span class="k">default</span><span class="p">:</span>
			<span class="k">if</span> <span class="nx">logger</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="nx">logLevel</span><span class="p">)</span> <span class="p">{</span>
				<span class="nx">logger</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;transport: http2Server.HandleStreams found unhandled frame type %v.&#34;</span><span class="p">,</span> <span class="nx">frame</span><span class="p">)</span>
			<span class="p">}</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">Server</span><span class="p">)</span> <span class="nf">handleStream</span><span class="p">(</span><span class="nx">t</span> <span class="nx">transport</span><span class="p">.</span><span class="nx">ServerTransport</span><span class="p">,</span> <span class="nx">stream</span> <span class="o">*</span><span class="nx">transport</span><span class="p">.</span><span class="nx">Stream</span><span class="p">,</span> <span class="nx">trInfo</span> <span class="o">*</span><span class="nx">traceInfo</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 解析方法名,如/HelloService/SayHello.
</span><span class="c1"></span>	<span class="nx">sm</span> <span class="o">:=</span> <span class="nx">stream</span><span class="p">.</span><span class="nf">Method</span><span class="p">()</span>
	<span class="k">if</span> <span class="nx">sm</span> <span class="o">!=</span> <span class="s">&#34;&#34;</span> <span class="o">&amp;&amp;</span> <span class="nx">sm</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;/&#39;</span> <span class="p">{</span>
		<span class="nx">sm</span> <span class="p">=</span> <span class="nx">sm</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>
	<span class="p">}</span>
	<span class="nx">pos</span> <span class="o">:=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">LastIndex</span><span class="p">(</span><span class="nx">sm</span><span class="p">,</span> <span class="s">&#34;/&#34;</span><span class="p">)</span>
	<span class="k">if</span> <span class="nx">pos</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="p">{</span>
        <span class="c1">// 错误处理.
</span><span class="c1"></span>        <span class="o">......</span>
		<span class="k">return</span>
    <span class="p">}</span>
    <span class="c1">// service服务名等于HelloService.
</span><span class="c1"></span>    <span class="nx">service</span> <span class="o">:=</span> <span class="nx">sm</span><span class="p">[:</span><span class="nx">pos</span><span class="p">]</span>
    <span class="c1">// 方法名等于SyaHello.
</span><span class="c1"></span>	<span class="nx">method</span> <span class="o">:=</span> <span class="nx">sm</span><span class="p">[</span><span class="nx">pos</span><span class="o">+</span><span class="mi">1</span><span class="p">:]</span>

    <span class="c1">// 从已注册的service中查找.
</span><span class="c1"></span>	<span class="nx">srv</span><span class="p">,</span> <span class="nx">knownService</span> <span class="o">:=</span> <span class="nx">s</span><span class="p">.</span><span class="nx">services</span><span class="p">[</span><span class="nx">service</span><span class="p">]</span>
	<span class="k">if</span> <span class="nx">knownService</span> <span class="p">{</span>
		<span class="k">if</span> <span class="nx">md</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">srv</span><span class="p">.</span><span class="nx">methods</span><span class="p">[</span><span class="nx">method</span><span class="p">];</span> <span class="nx">ok</span> <span class="p">{</span>
            <span class="c1">// 若方法存在,在调用processUnaryRPC.此时md已经指向注册时的Handler了,如SyaHello方法对应的_HelloService_SayHello_Handler.
</span><span class="c1"></span>			<span class="nx">s</span><span class="p">.</span><span class="nf">processUnaryRPC</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span> <span class="nx">stream</span><span class="p">,</span> <span class="nx">srv</span><span class="p">,</span> <span class="nx">md</span><span class="p">,</span> <span class="nx">trInfo</span><span class="p">)</span>
			<span class="k">return</span>
		<span class="p">}</span>
		<span class="k">if</span> <span class="nx">sd</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">srv</span><span class="p">.</span><span class="nx">streams</span><span class="p">[</span><span class="nx">method</span><span class="p">];</span> <span class="nx">ok</span> <span class="p">{</span>
            <span class="c1">// 调用流式处理.
</span><span class="c1"></span>			<span class="nx">s</span><span class="p">.</span><span class="nf">processStreamingRPC</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span> <span class="nx">stream</span><span class="p">,</span> <span class="nx">srv</span><span class="p">,</span> <span class="nx">sd</span><span class="p">,</span> <span class="nx">trInfo</span><span class="p">)</span>
			<span class="k">return</span>
		<span class="p">}</span>
    <span class="p">}</span>
    <span class="c1">// 若不存在,调用unknown.
</span><span class="c1"></span>	<span class="c1">// Unknown service, or known server unknown method.
</span><span class="c1"></span>	<span class="k">if</span> <span class="nx">unknownDesc</span> <span class="o">:=</span> <span class="nx">s</span><span class="p">.</span><span class="nx">opts</span><span class="p">.</span><span class="nx">unknownStreamDesc</span><span class="p">;</span> <span class="nx">unknownDesc</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nx">s</span><span class="p">.</span><span class="nf">processStreamingRPC</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span> <span class="nx">stream</span><span class="p">,</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">unknownDesc</span><span class="p">,</span> <span class="nx">trInfo</span><span class="p">)</span>
		<span class="k">return</span>
    <span class="p">}</span>
    
    <span class="o">......</span>
<span class="p">}</span>

<span class="c1">// processUnaryRPC实质上就是先从stream中读取一个完整的message,然后再调用md的Handler,来执行具体的业务代码,最后再sendResponse.
</span><span class="c1"></span>
<span class="c1">// 具体的业务逻辑代码,*.pb.go文件中.
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">_HelloService_SayHello_Handler</span><span class="p">(</span><span class="nx">srv</span> <span class="kd">interface</span><span class="p">{},</span> <span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">dec</span> <span class="kd">func</span><span class="p">(</span><span class="kd">interface</span><span class="p">{})</span> <span class="kt">error</span><span class="p">,</span> <span class="nx">interceptor</span> <span class="nx">grpc</span><span class="p">.</span><span class="nx">UnaryServerInterceptor</span><span class="p">)</span> <span class="p">(</span><span class="kd">interface</span><span class="p">{},</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 解析请求参数.
</span><span class="c1"></span>	<span class="nx">in</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">HelloRequest</span><span class="p">)</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">dec</span><span class="p">(</span><span class="nx">in</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
    <span class="p">}</span>
    
    <span class="c1">// 如果没有设置拦截器,就直接调用SayHello.
</span><span class="c1"></span>	<span class="k">if</span> <span class="nx">interceptor</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="k">return</span> <span class="nx">srv</span><span class="p">.(</span><span class="nx">HelloServiceServer</span><span class="p">).</span><span class="nf">SayHello</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">in</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="nx">info</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">grpc</span><span class="p">.</span><span class="nx">UnaryServerInfo</span><span class="p">{</span>
		<span class="nx">Server</span><span class="p">:</span>     <span class="nx">srv</span><span class="p">,</span>
		<span class="nx">FullMethod</span><span class="p">:</span> <span class="s">&#34;/HelloService/SayHello&#34;</span><span class="p">,</span>
    <span class="p">}</span>
    
    <span class="c1">// UnaryHandler,具体的业务逻辑.
</span><span class="c1"></span>	<span class="nx">handler</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">req</span> <span class="kd">interface</span><span class="p">{})</span> <span class="p">(</span><span class="kd">interface</span><span class="p">{},</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">return</span> <span class="nx">srv</span><span class="p">.(</span><span class="nx">HelloServiceServer</span><span class="p">).</span><span class="nf">SayHello</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">req</span><span class="p">.(</span><span class="o">*</span><span class="nx">HelloRequest</span><span class="p">))</span>
    <span class="p">}</span>
    
    <span class="c1">// 调用拦截器,最后再执行handler,来处理业务逻辑.
</span><span class="c1"></span>	<span class="k">return</span> <span class="nf">interceptor</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">in</span><span class="p">,</span> <span class="nx">info</span><span class="p">,</span> <span class="nx">handler</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div><h2 id="总结">总结</h2>
<ul>
<li>通过<code>ServerOption</code>来设置自定义参数,最主要的包括<code>grpc.Creds</code>(用于设置服务端认证)和<code>grpc.UnaryInterceptor</code>(用于设置服务端拦截器).</li>
<li>在*.pb.go中主要是通过<code>grpc.ServiceDesc</code>来描述rpc接口的信息,最终调用会指向其<code>Handler</code>字段.</li>
<li>在整个处理过程中会涉及到的goroutine.
<ul>
<li>当<code>Accept</code>接收到一个新连接时就会启用一个goroutine,主要用来处理认证及HTTP/2相关的初始化.</li>
<li>接着会启用一个goroutine用来接收HTTP/2协议的数据.</li>
<li>每接收到一个完整请求包时,会再启用一个goroutine用来处理新的消息包.注意:此处如果设置了<code>numServerWorkers</code>,会优先使用workchannel.</li>
</ul>
</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>gRPC系列之初识</title>
			<link>https://shenbaise9527.github.io/posts/grpc%E7%B3%BB%E5%88%97%E4%B9%8B%E5%88%9D%E8%AF%86/</link>
			<pubDate>Fri, 06 Nov 2020 22:05:51 +0800</pubDate>
			
			<guid>https://shenbaise9527.github.io/posts/grpc%E7%B3%BB%E5%88%97%E4%B9%8B%E5%88%9D%E8%AF%86/</guid>
			<description>RPC RPC指远程过程调用(Remote Procedure Call),让远程服务调用更加简单、透明.服务调用者可以像调用本地接口一样调用远程的服务提供者,而不需</description>
			<content type="html"><![CDATA[<h2 id="rpc">RPC</h2>
<p>RPC指远程过程调用(Remote Procedure Call),让远程服务调用更加简单、透明.服务调用者可以像调用本地接口一样调用远程的服务提供者,而不需要关心底层通信细节和调用过程,RPC框架负责底层的传输方式、序列化方式和通信细节.</p>
<p>gRPC是一个高性能、开源和通用的RPC框架,面向服务端和移动端,特点如下:</p>
<ul>
<li>支持多语言.</li>
<li>基于IDL文件定义服务,通过protoc工具生成指定语言的数据结构、服务端接口和客户端Stub.</li>
<li>通信协议基于HTTP/2设计,支持双向流、消息头压缩、单TCP的多路复用、服务端推送等特性.使得在移动端设备上更加省电和节省网络流量.</li>
<li>序列化支持<a href="https://github.com/protocolbuffers/protobuf">Protocol Buffer</a>和JSON.</li>
</ul>
<p><img src="/images/grpc.png" alt="gRPC调用示例" title="gRPC调用"></p>
<h2 id="protoc工具">protoc工具</h2>
<p>先安装相关工具,可以用来直接生成go和grpc的代码.</p>
<ol>
<li>安装<a href="https://github.com/protocolbuffers/protobuf">protoc</a></li>
<li>安装<a href="https://github.com/protocolbuffers/protobuf-go">protoc-gen-go</a></li>
<li>安装<a href="https://github.com/grpc/grpc-go">protoc-gen-go-grpc</a></li>
</ol>
<h2 id="idl文件">IDL文件</h2>
<p>生成<code>hello.proto</code>文件,内容如下:</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">syntax</span> <span class="p">=</span> <span class="s">&#34;proto3&#34;</span><span class="p">;</span>

<span class="nx">option</span> <span class="nx">go_package</span><span class="p">=</span><span class="s">&#34;.;pb&#34;</span><span class="p">;</span>

<span class="nx">message</span> <span class="nx">HelloRequest</span> <span class="p">{</span>
    <span class="kt">string</span> <span class="nx">name</span> <span class="p">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">message</span> <span class="nx">HelloReply</span> <span class="p">{</span>
    <span class="kt">string</span> <span class="nx">message</span> <span class="p">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">service</span> <span class="nx">HelloService</span> <span class="p">{</span>
    <span class="nx">rpc</span> <span class="nf">SayHello</span> <span class="p">(</span><span class="nx">HelloRequest</span><span class="p">)</span> <span class="nf">returns</span> <span class="p">(</span><span class="nx">HelloReply</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><ul>
<li>syntax,定义proto的版本,支持proto2和proto3,proto3才支持grpc.</li>
<li>go_package,定义生成的go文件的包名(package name).</li>
<li>message,定义数据结构.</li>
<li>service,定义服务,可包含多个rpc函数.</li>
</ul>
<h2 id="生成go语言代码">生成go语言代码</h2>
<p>使用工具<code>protoc</code>来生成对应的go文件,命令<code>protoc -I=./proto --go_out=plugins=grpc:./pb hello.proto</code>.</p>
<ul>
<li><code>-I=./proto</code>,表示proto文件所在的目录.</li>
<li><code>--go_out</code>,表示生成go语言的代码,且存放go文件的目录,默认是不会生成grpc的代码的,需要显式声明<code>plugins=grpc</code>.</li>
<li><code>hello.proto</code>,表示proto文件的名字.</li>
</ul>
<p>在目录<code>pb</code>中生成文件<code>hello.pb.go</code>,文件里面包含了grpc相关代码.</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// Reference imports to suppress errors if they are not otherwise used.
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">_</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span>
<span class="kd">var</span> <span class="nx">_</span> <span class="nx">grpc</span><span class="p">.</span><span class="nx">ClientConnInterface</span>

<span class="c1">// This is a compile-time assertion to ensure that this generated file
</span><span class="c1">// is compatible with the grpc package it is being compiled against.
</span><span class="c1"></span><span class="kd">const</span> <span class="nx">_</span> <span class="p">=</span> <span class="nx">grpc</span><span class="p">.</span><span class="nx">SupportPackageIsVersion6</span>

<span class="c1">// HelloServiceClient is the client API for HelloService service.
</span><span class="c1">//
</span><span class="c1">// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">HelloServiceClient</span> <span class="kd">interface</span> <span class="p">{</span>
	<span class="nf">SayHello</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">in</span> <span class="o">*</span><span class="nx">HelloRequest</span><span class="p">,</span> <span class="nx">opts</span> <span class="o">...</span><span class="nx">grpc</span><span class="p">.</span><span class="nx">CallOption</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">HelloReply</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">type</span> <span class="nx">helloServiceClient</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">cc</span> <span class="nx">grpc</span><span class="p">.</span><span class="nx">ClientConnInterface</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">NewHelloServiceClient</span><span class="p">(</span><span class="nx">cc</span> <span class="nx">grpc</span><span class="p">.</span><span class="nx">ClientConnInterface</span><span class="p">)</span> <span class="nx">HelloServiceClient</span> <span class="p">{</span>
	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">helloServiceClient</span><span class="p">{</span><span class="nx">cc</span><span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">helloServiceClient</span><span class="p">)</span> <span class="nf">SayHello</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">in</span> <span class="o">*</span><span class="nx">HelloRequest</span><span class="p">,</span> <span class="nx">opts</span> <span class="o">...</span><span class="nx">grpc</span><span class="p">.</span><span class="nx">CallOption</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">HelloReply</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">out</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">HelloReply</span><span class="p">)</span>
	<span class="nx">err</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">cc</span><span class="p">.</span><span class="nf">Invoke</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="s">&#34;/HelloService/SayHello&#34;</span><span class="p">,</span> <span class="nx">in</span><span class="p">,</span> <span class="nx">out</span><span class="p">,</span> <span class="nx">opts</span><span class="o">...</span><span class="p">)</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="nx">out</span><span class="p">,</span> <span class="kc">nil</span>
<span class="p">}</span>

<span class="c1">// HelloServiceServer is the server API for HelloService service.
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">HelloServiceServer</span> <span class="kd">interface</span> <span class="p">{</span>
	<span class="nf">SayHello</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="o">*</span><span class="nx">HelloRequest</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">HelloReply</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// UnimplementedHelloServiceServer can be embedded to have forward compatible implementations.
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">UnimplementedHelloServiceServer</span> <span class="kd">struct</span> <span class="p">{</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="o">*</span><span class="nx">UnimplementedHelloServiceServer</span><span class="p">)</span> <span class="nf">SayHello</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="o">*</span><span class="nx">HelloRequest</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">HelloReply</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">status</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="nx">codes</span><span class="p">.</span><span class="nx">Unimplemented</span><span class="p">,</span> <span class="s">&#34;method SayHello not implemented&#34;</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">RegisterHelloServiceServer</span><span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">grpc</span><span class="p">.</span><span class="nx">Server</span><span class="p">,</span> <span class="nx">srv</span> <span class="nx">HelloServiceServer</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">s</span><span class="p">.</span><span class="nf">RegisterService</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">_HelloService_serviceDesc</span><span class="p">,</span> <span class="nx">srv</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">_HelloService_SayHello_Handler</span><span class="p">(</span><span class="nx">srv</span> <span class="kd">interface</span><span class="p">{},</span> <span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">dec</span> <span class="kd">func</span><span class="p">(</span><span class="kd">interface</span><span class="p">{})</span> <span class="kt">error</span><span class="p">,</span> <span class="nx">interceptor</span> <span class="nx">grpc</span><span class="p">.</span><span class="nx">UnaryServerInterceptor</span><span class="p">)</span> <span class="p">(</span><span class="kd">interface</span><span class="p">{},</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">in</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">HelloRequest</span><span class="p">)</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">dec</span><span class="p">(</span><span class="nx">in</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
	<span class="p">}</span>
	<span class="k">if</span> <span class="nx">interceptor</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="k">return</span> <span class="nx">srv</span><span class="p">.(</span><span class="nx">HelloServiceServer</span><span class="p">).</span><span class="nf">SayHello</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">in</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="nx">info</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">grpc</span><span class="p">.</span><span class="nx">UnaryServerInfo</span><span class="p">{</span>
		<span class="nx">Server</span><span class="p">:</span>     <span class="nx">srv</span><span class="p">,</span>
		<span class="nx">FullMethod</span><span class="p">:</span> <span class="s">&#34;/HelloService/SayHello&#34;</span><span class="p">,</span>
	<span class="p">}</span>
	<span class="nx">handler</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">req</span> <span class="kd">interface</span><span class="p">{})</span> <span class="p">(</span><span class="kd">interface</span><span class="p">{},</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">return</span> <span class="nx">srv</span><span class="p">.(</span><span class="nx">HelloServiceServer</span><span class="p">).</span><span class="nf">SayHello</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">req</span><span class="p">.(</span><span class="o">*</span><span class="nx">HelloRequest</span><span class="p">))</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="nf">interceptor</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">in</span><span class="p">,</span> <span class="nx">info</span><span class="p">,</span> <span class="nx">handler</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">_HelloService_serviceDesc</span> <span class="p">=</span> <span class="nx">grpc</span><span class="p">.</span><span class="nx">ServiceDesc</span><span class="p">{</span>
	<span class="nx">ServiceName</span><span class="p">:</span> <span class="s">&#34;HelloService&#34;</span><span class="p">,</span>
	<span class="nx">HandlerType</span><span class="p">:</span> <span class="p">(</span><span class="o">*</span><span class="nx">HelloServiceServer</span><span class="p">)(</span><span class="kc">nil</span><span class="p">),</span>
	<span class="nx">Methods</span><span class="p">:</span> <span class="p">[]</span><span class="nx">grpc</span><span class="p">.</span><span class="nx">MethodDesc</span><span class="p">{</span>
		<span class="p">{</span>
			<span class="nx">MethodName</span><span class="p">:</span> <span class="s">&#34;SayHello&#34;</span><span class="p">,</span>
			<span class="nx">Handler</span><span class="p">:</span>    <span class="nx">_HelloService_SayHello_Handler</span><span class="p">,</span>
		<span class="p">},</span>
	<span class="p">},</span>
	<span class="nx">Streams</span><span class="p">:</span>  <span class="p">[]</span><span class="nx">grpc</span><span class="p">.</span><span class="nx">StreamDesc</span><span class="p">{},</span>
	<span class="nx">Metadata</span><span class="p">:</span> <span class="s">&#34;hello.proto&#34;</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></div><h2 id="服务端代码">服务端代码</h2>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// 监听tcp端口,用于接受客户端请求.
</span><span class="c1"></span><span class="nx">lis</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">net</span><span class="p">.</span><span class="nf">Listen</span><span class="p">(</span><span class="s">&#34;tcp&#34;</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;:%d&#34;</span><span class="p">,</span> <span class="o">*</span><span class="nx">port</span><span class="p">))</span>
<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;failed to listen: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>

	<span class="k">return</span>
<span class="p">}</span>

<span class="c1">// 创建gRPC服务实例对象.
</span><span class="c1"></span><span class="nx">grpcserver</span> <span class="o">:=</span> <span class="nx">grpc</span><span class="p">.</span><span class="nf">NewServer</span><span class="p">()</span>

<span class="c1">// 把server对象注册到gRPC服务中,server对象实现了HelloServiceServer接口.
</span><span class="c1"></span><span class="nx">pb</span><span class="p">.</span><span class="nf">RegisterHelloServiceServer</span><span class="p">(</span><span class="nx">grpcserver</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">server</span><span class="p">{})</span>

<span class="c1">// 阻塞等待客户端连接,直到进程被终止或Stop函数被调用.
</span><span class="c1"></span><span class="nx">err</span> <span class="p">=</span> <span class="nx">grpcserver</span><span class="p">.</span><span class="nf">Serve</span><span class="p">(</span><span class="nx">lis</span><span class="p">)</span>
<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;failed to server: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div><h2 id="客户端代码">客户端代码</h2>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// 创建一个连接与服务端进行通信.
</span><span class="c1"></span><span class="nx">conn</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">grpc</span><span class="p">.</span><span class="nf">Dial</span><span class="p">(</span><span class="o">*</span><span class="nx">addr</span><span class="p">,</span> <span class="nx">grpc</span><span class="p">.</span><span class="nf">WithInsecure</span><span class="p">())</span>
<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;failed to dail: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>

	<span class="k">return</span>
<span class="p">}</span>

<span class="c1">// 关闭连接.
</span><span class="c1"></span><span class="k">defer</span> <span class="nx">conn</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>

<span class="c1">// 创建HelloService的Client stub.
</span><span class="c1"></span><span class="nx">client</span> <span class="o">:=</span> <span class="nx">pb</span><span class="p">.</span><span class="nf">NewHelloServiceClient</span><span class="p">(</span><span class="nx">conn</span><span class="p">)</span>

<span class="c1">// 调用对应的服务方法.
</span><span class="c1"></span><span class="nx">reply</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">SayHello</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">Background</span><span class="p">(),</span> <span class="o">&amp;</span><span class="nx">pb</span><span class="p">.</span><span class="nx">HelloRequest</span><span class="p">{</span><span class="nx">Name</span><span class="p">:</span> <span class="s">&#34;zhou&#34;</span><span class="p">})</span>
<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;failed to sayhello: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>

	<span class="k">return</span>
<span class="p">}</span>

<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">reply</span><span class="p">)</span>
</code></pre></div><h2 id="调用分析">调用分析</h2>
<h3 id="wireshark抓包">wireshark抓包</h3>
<p>服务端监听在9090端口,用<a href="https://www.wireshark.org/">wireshark</a>来进行抓包.
<img src="/images/pcap1.png" alt="抓包" title="wireshark抓包">
可以看到前三行是tcp三次握手的报文,后续的全部都解析成了tcp协议,gRPC是基于http/2,需要手工修改Protocol为http/2.
wireshark菜单栏&ndash;&gt;分析(A)&ndash;&gt;解码为(Decode As),在弹出的界面新增一行,然后修改&quot;当前&quot;列为HTTP2.
<img src="/images/pcap2.png" alt="设置http/2" title="设置协议为http2"></p>
<p>现在能正常解析为HTTP/2协议了,一次gRPC调用总览如下:
<img src="/images/pcap3.png" alt="HTTP/2协议" title="gRPC调用总览">
从上图大体可以看出,gRPC调用过程分为:<code>Magic(C-&gt;S) --&gt; SETTINGS(S-&gt;C) --&gt; SETTINGS(C-&gt;S) --&gt; SETTINGS(S-&gt;C) --&gt; SETTINGS,HEADERS,DATA(C-&gt;S) --&gt; WINDOW_UPDATE,PING(S-&gt;C) --&gt; HEADERS,DATA,HEADERS(S-&gt;C) --&gt; PING,WINDOW_UPDATE,PING(C-&gt;S) --&gt; PING(S-&gt;C)</code></p>
<h3 id="magic">Magic</h3>
<p><img src="/images/grpc-magic.png" alt="Magic" title="gRPC-Magic">
Magic帧的主要作用是建立HTTP/2请求的前言.在HTTP/2协议中,要求两端都要发送连接前言,来最终确认所使用的协议,并确定HTTP/2连接的初始设置.</p>
<p>而Magic帧是客户端的前言之一,内容为<code>PRI * HTTP/2.0\r\n\r\nSM\r\n\r\n</code>,以确定启用HTTP/2连接.</p>
<h3 id="settings">SETTINGS</h3>
<p><img src="/images/grpc-settings1.png" alt="SETTINGS1" title="gRPC-SETTINGS">
由服务端发送给客户端,主要设置<code>Max Frame Size</code>为16384字节,作用域是整个连接而非单一的流.也是服务端的连接前言.</p>
<p><img src="/images/grpc-settings2.png" alt="SETTINGS2" title="gRPC-SETTINGS">
由客户端发送给服务端,是客户端的连接前言(和Magic一起).</p>
<p><img src="/images/grpc-settings3.png" alt="SETTINGS3" title="gRPC-SETTINGS">
由服务端发送给客户端,在发送完前言后,客户端和服务端还需要有一步互相确认的动作,对应的就是带有<code>ACK: True</code>的帧.</p>
<p><img src="/images/grpc-settings4.png" alt="SETTINGS4" title="gRPC-SETTINGS">
由客户端发送给服务端,是带有<code>ACK: True</code>的帧.</p>
<h3 id="headers">HEADERS</h3>
<p><img src="/images/grpc-headers1.png" alt="HEADERS1" title="gRPC-HEADERS">
主要是存储和传播HTTP的表头信息.</p>
<h3 id="data">DATA</h3>
<p><img src="/images/grpc-data1.png" alt="DATA1" title="gRPC-DATA">
DATA是数据帧,可以看到请求的protobuf结构只有1个字段,该字段的值为<code>zhou</code>(可以参见客户端代码).</p>
<h3 id="window_update">WINDOW_UPDATE</h3>
<p><img src="/images/grpc-win.png" alt="WIN" title="gRPC-WINDOW_UPDATE">
主要是管理流控制窗口的大小.</p>
<h3 id="headersdataheaders">HEADERS,DATA,HEADERS</h3>
<p><img src="/images/grpc-rsp1.png" alt="RSP1" title="gRPC-DATA">
<img src="/images/grpc-rsp2.png" alt="RSP2" title="gRPC-DATA">
服务端发送给客户端的响应,HEADERS frame记录的是HTTP响应状态(<code>200 OK</code>)和响应的内容格式(<code>application/grpc</code>).
响应的protobuf结构也是只有1个字段,字段的值是<code>zhou</code>.</p>
<h3 id="ping">PING</h3>
<p>主要是判断当前连接是否仍然可用,也常用于计算往返时间.</p>
<h2 id="流式模式">流式模式</h2>
<p>gRPC支持UnaryRPC(一元PRC)和StreamRPC(流式RPC).</p>
<ul>
<li>UnaryRPC,上面介绍的都是基于UnaryRPC的,该模式是一个请求对应一个响应.</li>
<li>StreamRPC流式模式的请求和响应是多对多的,又分为三种类型:
<ul>
<li>Server-side streaming RPC,服务端流式模式,即一个请求对应多个响应.</li>
<li>Client-side streaming RPC,客户端流式模式,即多个请求对应一个响应.</li>
<li>Bidirectional streaming RPC,双向流式模式,即多个请求对应多个响应.</li>
</ul>
</li>
</ul>
<p>流式模式需要用到关键字<code>stream</code>,如下proto文件.</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">syntax</span> <span class="p">=</span> <span class="s">&#34;proto3&#34;</span><span class="p">;</span>

<span class="nx">option</span> <span class="nx">go_package</span><span class="p">=</span><span class="s">&#34;.;pb&#34;</span><span class="p">;</span>

<span class="nx">message</span> <span class="nx">HelloRequest</span> <span class="p">{</span>
    <span class="kt">string</span> <span class="nx">name</span> <span class="p">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">message</span> <span class="nx">HelloReply</span> <span class="p">{</span>
    <span class="kt">string</span> <span class="nx">message</span> <span class="p">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">service</span> <span class="nx">HelloService</span> <span class="p">{</span>
    <span class="nx">rpc</span> <span class="nf">SayHello</span> <span class="p">(</span><span class="nx">HelloRequest</span><span class="p">)</span> <span class="nf">returns</span> <span class="p">(</span><span class="nx">HelloReply</span><span class="p">);</span>
    <span class="nx">rpc</span> <span class="nf">ServerSayHello</span> <span class="p">(</span><span class="nx">HelloRequest</span><span class="p">)</span> <span class="nf">returns</span> <span class="p">(</span><span class="nx">stream</span> <span class="nx">HelloReply</span><span class="p">);</span>
    <span class="nx">rpc</span> <span class="nf">ClientSayHello</span> <span class="p">(</span><span class="nx">stream</span> <span class="nx">HelloRequest</span><span class="p">)</span> <span class="nf">returns</span> <span class="p">(</span><span class="nx">HelloReply</span><span class="p">);</span>
    <span class="nx">rpc</span> <span class="nf">BidirSayHello</span> <span class="p">(</span><span class="nx">stream</span> <span class="nx">HelloRequest</span><span class="p">)</span> <span class="nf">returns</span> <span class="p">(</span><span class="nx">stream</span> <span class="nx">HelloReply</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><p><code>SayHello</code>是一元RPC模式.
<code>ServerSayHello</code>是服务端流式模式.
<code>ClientSayHello</code>是客户端流式模式.
<code>BidirSayHello</code>是双向流式模式.</p>
<h2 id="参考资料">参考资料</h2>
<ul>
<li><a href="https://jingwei.link/2018/10/02/grpc-wireshark-analysis.html">抓包gRPC的细节与分析</a></li>
<li><a href="https://httpwg.org/specs/rfc7540.html">Hypertext Transfer Protocol Version 2</a></li>
<li><a href="https://eddycjy.com/posts/go/talk/2019-06-29-talking-grpc/">从实践到原理，带你参透 gRPC</a></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>记录cgo调用C实现的加解密静态库中遇到的问题</title>
			<link>https://shenbaise9527.github.io/posts/cgo/</link>
			<pubDate>Tue, 03 Nov 2020 21:35:24 +0800</pubDate>
			
			<guid>https://shenbaise9527.github.io/posts/cgo/</guid>
			<description>起因 公司有个公共的加解密库,供所有后端C++服务调用的,但最近要使用Go来实现个服务需要用到加解密,而Go并没有提供AES-256-ECB的</description>
			<content type="html"><![CDATA[<h2 id="起因">起因</h2>
<p>公司有个公共的加解密库,供所有后端C++服务调用的,但最近要使用Go来实现个服务需要用到加解密,而Go并没有提供AES-256-ECB的加解密库,所以决定用cgo来调用这个公共的加解密库.</p>
<h2 id="window">Window</h2>
<p>在window下加解密库是提供的DLL,用Go的<code>syscall.NewLazyDLL</code>可以非常方便的加载DLL,window下基本没有遇到障碍.</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&#34;fmt&#34;</span>
	<span class="s">&#34;syscall&#34;</span>
	<span class="s">&#34;unsafe&#34;</span>
<span class="p">)</span>

<span class="c1">// MICrypt 接口.
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">MICrypt</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">MIFreeSafeHandle</span>    <span class="o">*</span><span class="nx">syscall</span><span class="p">.</span><span class="nx">LazyProc</span>
	<span class="nx">MIGetDecryptDataLen</span> <span class="o">*</span><span class="nx">syscall</span><span class="p">.</span><span class="nx">LazyProc</span>
	<span class="nx">MIGetEncryptDataLen</span> <span class="o">*</span><span class="nx">syscall</span><span class="p">.</span><span class="nx">LazyProc</span>
	<span class="nx">MIGetSafeHandle</span>     <span class="o">*</span><span class="nx">syscall</span><span class="p">.</span><span class="nx">LazyProc</span>
	<span class="nx">MILoad</span>              <span class="o">*</span><span class="nx">syscall</span><span class="p">.</span><span class="nx">LazyProc</span>
	<span class="nx">MITransDecrypt</span>      <span class="o">*</span><span class="nx">syscall</span><span class="p">.</span><span class="nx">LazyProc</span>
	<span class="nx">MITransEncrypt</span>      <span class="o">*</span><span class="nx">syscall</span><span class="p">.</span><span class="nx">LazyProc</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">lib</span> <span class="o">:=</span> <span class="nx">syscall</span><span class="p">.</span><span class="nf">NewLazyDLL</span><span class="p">(</span><span class="s">&#34;crypto64.dll&#34;</span><span class="p">)</span>
	<span class="nx">c</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">MICrypt</span><span class="p">{</span>
		<span class="nx">MIGetSafeHandle</span><span class="p">:</span>     <span class="nx">lib</span><span class="p">.</span><span class="nf">NewProc</span><span class="p">(</span><span class="s">&#34;MIGetSafeHandle&#34;</span><span class="p">),</span>
		<span class="nx">MIFreeSafeHandle</span><span class="p">:</span>    <span class="nx">lib</span><span class="p">.</span><span class="nf">NewProc</span><span class="p">(</span><span class="s">&#34;MIFreeSafeHandle&#34;</span><span class="p">),</span>
		<span class="nx">MIGetDecryptDataLen</span><span class="p">:</span> <span class="nx">lib</span><span class="p">.</span><span class="nf">NewProc</span><span class="p">(</span><span class="s">&#34;MIGetDecryptDataLen&#34;</span><span class="p">),</span>
		<span class="nx">MIGetEncryptDataLen</span><span class="p">:</span> <span class="nx">lib</span><span class="p">.</span><span class="nf">NewProc</span><span class="p">(</span><span class="s">&#34;MIGetEncryptDataLen&#34;</span><span class="p">),</span>
		<span class="nx">MILoad</span><span class="p">:</span>              <span class="nx">lib</span><span class="p">.</span><span class="nf">NewProc</span><span class="p">(</span><span class="s">&#34;MILoad&#34;</span><span class="p">),</span>
		<span class="nx">MITransDecrypt</span><span class="p">:</span>      <span class="nx">lib</span><span class="p">.</span><span class="nf">NewProc</span><span class="p">(</span><span class="s">&#34;MITransDecrypt&#34;</span><span class="p">),</span>
		<span class="nx">MITransEncrypt</span><span class="p">:</span>      <span class="nx">lib</span><span class="p">.</span><span class="nf">NewProc</span><span class="p">(</span><span class="s">&#34;MITransEncrypt&#34;</span><span class="p">),</span>
	<span class="p">}</span>

	<span class="c1">// 待加密字符串.
</span><span class="c1"></span>	<span class="nx">msg</span> <span class="o">:=</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&#34;I am test trans crypto!&#34;</span><span class="p">)</span>
	<span class="nx">h</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">MIGetSafeHandle</span><span class="p">.</span><span class="nf">Call</span><span class="p">()</span>
	<span class="nx">c</span><span class="p">.</span><span class="nx">MILoad</span><span class="p">.</span><span class="nf">Call</span><span class="p">(</span><span class="nb">uintptr</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">h</span><span class="p">)</span>
	<span class="kd">var</span> <span class="nx">iLen</span> <span class="kt">int32</span>
	<span class="kd">var</span> <span class="nx">srcLen</span> <span class="kt">int</span> <span class="p">=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">msg</span><span class="p">)</span>
	<span class="nx">c</span><span class="p">.</span><span class="nx">MIGetEncryptDataLen</span><span class="p">.</span><span class="nf">Call</span><span class="p">(</span><span class="nb">uintptr</span><span class="p">(</span><span class="nx">unsafe</span><span class="p">.</span><span class="nf">Pointer</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">iLen</span><span class="p">)),</span> <span class="nb">uintptr</span><span class="p">(</span><span class="nx">unsafe</span><span class="p">.</span><span class="nf">Pointer</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">msg</span><span class="p">[</span><span class="mi">0</span><span class="p">])),</span> <span class="nb">uintptr</span><span class="p">(</span><span class="nx">srcLen</span><span class="p">),</span> <span class="nx">h</span><span class="p">)</span>
	<span class="nx">buf</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="nx">iLen</span><span class="p">)</span>

	<span class="c1">// 加密.
</span><span class="c1"></span>	<span class="nx">c</span><span class="p">.</span><span class="nx">MITransEncrypt</span><span class="p">.</span><span class="nf">Call</span><span class="p">(</span><span class="nb">uintptr</span><span class="p">(</span><span class="nx">unsafe</span><span class="p">.</span><span class="nf">Pointer</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">buf</span><span class="p">[</span><span class="mi">0</span><span class="p">])),</span> <span class="nb">uintptr</span><span class="p">(</span><span class="nx">iLen</span><span class="p">),</span> <span class="nb">uintptr</span><span class="p">(</span><span class="nx">unsafe</span><span class="p">.</span><span class="nf">Pointer</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">msg</span><span class="p">[</span><span class="mi">0</span><span class="p">])),</span> <span class="nb">uintptr</span><span class="p">(</span><span class="nx">srcLen</span><span class="p">),</span> <span class="nx">h</span><span class="p">)</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">buf</span><span class="p">)</span>

	<span class="nx">dstLen</span> <span class="o">:=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">buf</span><span class="p">)</span>
	<span class="kd">var</span> <span class="nx">iDLen</span> <span class="kt">int32</span>
	<span class="nx">c</span><span class="p">.</span><span class="nx">MIGetDecryptDataLen</span><span class="p">.</span><span class="nf">Call</span><span class="p">(</span><span class="nb">uintptr</span><span class="p">(</span><span class="nx">unsafe</span><span class="p">.</span><span class="nf">Pointer</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">iDLen</span><span class="p">)),</span> <span class="nb">uintptr</span><span class="p">(</span><span class="nx">unsafe</span><span class="p">.</span><span class="nf">Pointer</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">buf</span><span class="p">[</span><span class="mi">0</span><span class="p">])),</span> <span class="nb">uintptr</span><span class="p">(</span><span class="nx">dstLen</span><span class="p">),</span> <span class="nx">h</span><span class="p">)</span>

	<span class="c1">// 再解密.
</span><span class="c1"></span>	<span class="nx">newSrc</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="nx">iDLen</span><span class="p">)</span>
	<span class="nx">c</span><span class="p">.</span><span class="nx">MITransDecrypt</span><span class="p">.</span><span class="nf">Call</span><span class="p">(</span><span class="nb">uintptr</span><span class="p">(</span><span class="nx">unsafe</span><span class="p">.</span><span class="nf">Pointer</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">newSrc</span><span class="p">[</span><span class="mi">0</span><span class="p">])),</span> <span class="nb">uintptr</span><span class="p">(</span><span class="nx">iDLen</span><span class="p">),</span> <span class="nb">uintptr</span><span class="p">(</span><span class="nx">unsafe</span><span class="p">.</span><span class="nf">Pointer</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">buf</span><span class="p">[</span><span class="mi">0</span><span class="p">])),</span> <span class="nb">uintptr</span><span class="p">(</span><span class="nx">dstLen</span><span class="p">),</span> <span class="nx">h</span><span class="p">)</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">newSrc</span><span class="p">))</span>
	<span class="nx">c</span><span class="p">.</span><span class="nx">MIFreeSafeHandle</span><span class="p">.</span><span class="nf">Call</span><span class="p">(</span><span class="nx">h</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div><h2 id="linux">Linux</h2>
<p>在Linux下加解密库提供的是静态库,调用方式完全不同于windows,碰到很多问题.</p>
<h3 id="不支持c中的引用">不支持C++中的引用<code>&amp;</code></h3>
<pre><code># aesecb
./aesecb.go:27:2: could not determine kind of name for C.MIGetDecryptDataLen
./aesecb.go:20:2: could not determine kind of name for C.MIGetEncryptDataLen
cgo: 
gcc errors for preamble:
In file included from ./aesecb.go:6:0:
/home/sky/code/imp/2nd/crypto/include/ISafeInterface.h:111:50: error: expected ';', ',' or ')' before '&amp;' token
 _DLL_EXP_API int32_t MIGetEncryptDataLen(int32_t &amp;iRevLen, const char *pData, int32_t iLen, intptr_t pSafeHandle);
</code></pre><p><strong>解决方案</strong>
把引用修改为指针</p>
<div class="highlight"><pre class="chroma"><code class="language-C++" data-lang="C++"><span class="n">_DLL_EXP_API</span> <span class="kt">int32_t</span> <span class="nf">MIGetEncryptDataLen</span><span class="p">(</span><span class="kt">int32_t</span><span class="o">*</span> <span class="n">iRevLen</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">pData</span><span class="p">,</span> <span class="kt">int32_t</span> <span class="n">iLen</span><span class="p">,</span> <span class="n">intptr_t</span> <span class="n">pSafeHandle</span><span class="p">);</span>
</code></pre></div><h3 id="undefined-reference">undefined reference</h3>
<pre><code>$ go build -x
WORK=/tmp/go-build163613860
mkdir -p $WORK/b001/
cd /home/sky/go/path/src/aesecb
CGO_LDFLAGS='&quot;-g&quot; &quot;-O2&quot; &quot;-L/home/sky/code/imp/2nd/cryptogo/lib/Linux_x86_64&quot; &quot;-lmism&quot; &quot;-lstdc++&quot;' /home/sky/go/go1.14/pkg/tool/linux_amd64/cgo -objdir $WORK/b001/ -importpath aesecb -- -I/h
ome/sky/code/imp/2nd/cryptogo/include -I $WORK/b001/ -g -O2 ./aesecb.gocd $WORK
gcc -fno-caret-diagnostics -c -x c - -o /dev/null || true
gcc -Qunused-arguments -c -x c - -o /dev/null || true
gcc -fdebug-prefix-map=a=b -c -x c - -o /dev/null || true
gcc -gno-record-gcc-switches -c -x c - -o /dev/null || true
cd $WORK/b001
TERM='dumb' gcc -I /home/sky/go/path/src/aesecb -fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=$WORK/b001=/tmp/go-build -gno-record-gcc-switches -I/home/sky/code/imp/2nd/cryptogo
/include -I ./ -g -O2 -o ./_x001.o -c _cgo_export.cTERM='dumb' gcc -I /home/sky/go/path/src/aesecb -fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=$WORK/b001=/tmp/go-build -gno-record-gcc-switches -I/home/sky/code/imp/2nd/cryptogo
/include -I ./ -g -O2 -o ./_x002.o -c aesecb.cgo2.cTERM='dumb' gcc -I /home/sky/go/path/src/aesecb -fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=$WORK/b001=/tmp/go-build -gno-record-gcc-switches -I/home/sky/code/imp/2nd/cryptogo
/include -I ./ -g -O2 -o ./_cgo_main.o -c _cgo_main.ccd /home/sky/go/path/src/aesecb
TERM='dumb' gcc -I . -fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=$WORK/b001=/tmp/go-build -gno-record-gcc-switches -o $WORK/b001/_cgo_.o $WORK/b001/_cgo_main.o $WORK/b001/_x00
1.o $WORK/b001/_x002.o -g -O2 -L/home/sky/code/imp/2nd/cryptogo/lib/Linux_x86_64 -lmism -lstdc++# aesecb
/tmp/go-build163613860/b001/_x002.o: In function `_cgo_2c40edecf6fd_Cfunc_MIGetDecryptDataLen':
/tmp/go-build/cgo-gcc-prolog:69: undefined reference to `MIGetDecryptDataLen'
/tmp/go-build163613860/b001/_x002.o: In function `_cgo_2c40edecf6fd_Cfunc_MIGetEncryptDataLen':
/tmp/go-build/cgo-gcc-prolog:92: undefined reference to `MIGetEncryptDataLen'
/tmp/go-build163613860/b001/_x002.o: In function `_cgo_2c40edecf6fd_Cfunc_MIGetSafeHandle':
/tmp/go-build/cgo-gcc-prolog:109: undefined reference to `MIGetSafeHandle'
/tmp/go-build163613860/b001/_x002.o: In function `_cgo_2c40edecf6fd_Cfunc_MILoad':
/tmp/go-build/cgo-gcc-prolog:131: undefined reference to `MILoad'
/tmp/go-build163613860/b001/_x002.o: In function `_cgo_2c40edecf6fd_Cfunc_MITransDecrypt':
/tmp/go-build/cgo-gcc-prolog:156: undefined reference to `MITransDecrypt'
/tmp/go-build163613860/b001/_x002.o: In function `_cgo_2c40edecf6fd_Cfunc_MITransEncrypt':
/tmp/go-build/cgo-gcc-prolog:181: undefined reference to `MITransEncrypt'
/tmp/go-build163613860/b001/_x002.o: In function `_cgo_2c40edecf6fd_Cfunc_MIFreeSafeHandle':
/tmp/go-build/cgo-gcc-prolog:49: undefined reference to `MIFreeSafeHandle'
collect2: error: ld returned 1 exit status
</code></pre><p>由于在编译加解密库mism时,是使用的g++编译器,编译出来的函数名会加上修饰符,导致cgo找不到对应的函数</p>
<pre><code># 查看符号表
$ nm libmism.a
...
0000000000000490 T _Z12MIMD5DecryptPcRiPKci
000000000000040f T _Z12MIMD5EncryptPcRiPKci
000000000000031f T _Z14MITransDecryptPciPKcil
00000000000002c9 T _Z14MITransEncryptPciPKcil
...
</code></pre><p>可以看到函数名已经发生变化了.</p>
<p><strong>解决方案</strong>
修改代码以C方式编译</p>
<div class="highlight"><pre class="chroma"><code class="language-C++" data-lang="C++"><span class="cp">#ifdef __cplusplus
</span><span class="cp"></span><span class="k">extern</span> <span class="s">&#34;C&#34;</span>
<span class="p">{</span>
<span class="cp">#endif
</span><span class="cp"></span><span class="p">......</span>
    <span class="n">_DLL_EXP_API</span> <span class="n">intptr_t</span> <span class="n">MIGetSafeHandle</span><span class="p">();</span>
<span class="p">......</span>
<span class="cp">#ifdef __cplusplus
</span><span class="cp"></span><span class="p">}</span>
<span class="cp">#endif
</span></code></pre></div><p>再次编译后,查看符号表,可以看到函数名没有发生变化.</p>
<pre><code>$ nm libmism.a
......
0000000000000040 T MIFreeSafeHandle
00000000000001d0 T MIGetDecryptDataLen
0000000000000190 T MIGetEncryptDataLen
0000000000000000 T MIGetSafeHandle
0000000000000070 T MILoad
0000000000000150 T MITransDecrypt
0000000000000110 T MITransEncrypt
......
</code></pre><h3 id="库依赖">库依赖</h3>
<p>继续编译,又报了undefined reference</p>
<pre><code>$ go build aesecb.go 
# command-line-arguments
./libmism.a(AESEncryptHandle.cpp.o): In function `AESEncryptHandle::Encrypt(char*, int&amp;, char const*, int const&amp;)':
AESEncryptHandle.cpp:(.text+0x135): undefined reference to `EVP_aes_256_ecb'
AESEncryptHandle.cpp:(.text+0x145): undefined reference to `EVP_EncryptInit'
AESEncryptHandle.cpp:(.text+0x15c): undefined reference to `EVP_EncryptUpdate'
AESEncryptHandle.cpp:(.text+0x171): undefined reference to `EVP_EncryptFinal'
AESEncryptHandle.cpp:(.text+0x179): undefined reference to `EVP_CIPHER_CTX_cleanup'
./libmism.a(AESEncryptHandle.cpp.o): In function `AESEncryptHandle::Decrypt(char*, int&amp;, char const*, int const&amp;)':
AESEncryptHandle.cpp:(.text+0x215): undefined reference to `EVP_aes_256_ecb'
AESEncryptHandle.cpp:(.text+0x225): undefined reference to `EVP_DecryptInit'
AESEncryptHandle.cpp:(.text+0x23c): undefined reference to `EVP_DecryptUpdate'
AESEncryptHandle.cpp:(.text+0x251): undefined reference to `EVP_DecryptFinal'
AESEncryptHandle.cpp:(.text+0x259): undefined reference to `EVP_CIPHER_CTX_cleanup'
collect2: error: ld returned 1 exit status
</code></pre><p>这是加解密库是调用的openssl来实现的,而在go代码里只显示链接了加解密库</p>
<p><strong>解决方案</strong>
修改go代码,还要额外链接openssl的库.</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="err">#</span><span class="nx">cgo</span> <span class="nx">LDFLAGS</span><span class="p">:</span> <span class="o">-</span><span class="nx">L</span><span class="p">..</span><span class="o">/</span><span class="mi">2</span><span class="nx">nd</span><span class="o">/</span><span class="nx">crypto</span><span class="o">/</span><span class="nx">lib</span><span class="o">/</span><span class="nx">Linux_x86_64</span> <span class="o">-</span><span class="nx">L</span><span class="p">..</span><span class="o">/</span><span class="mi">3</span><span class="nx">rd</span><span class="o">/</span><span class="nx">openssl</span><span class="o">-</span><span class="nx">OpenSSL_1_0_2</span><span class="o">-</span><span class="nx">stable</span><span class="o">/</span><span class="nx">lib</span><span class="o">/</span><span class="nx">Linux_x86_64</span> <span class="o">-</span><span class="nx">lmism</span> <span class="o">-</span><span class="nx">lssl</span> <span class="o">-</span><span class="nx">lcrypto</span> <span class="o">-</span><span class="nx">lstdc</span><span class="o">++</span>
</code></pre></div><p>继续编译,又报了undefined reference</p>
<pre><code>$ go build aesecb.go 
# command-line-arguments
./libcrypto.a(dso_dlfcn.o): In function `dlfcn_globallookup':
dso_dlfcn.c:(.text+0x11): undefined reference to `dlopen'
dso_dlfcn.c:(.text+0x24): undefined reference to `dlsym'
dso_dlfcn.c:(.text+0x2f): undefined reference to `dlclose'
./libcrypto.a(dso_dlfcn.o): In function `dlfcn_bind_func':
dso_dlfcn.c:(.text+0x354): undefined reference to `dlsym'
dso_dlfcn.c:(.text+0x412): undefined reference to `dlerror'
./libcrypto.a(dso_dlfcn.o): In function `dlfcn_bind_var':
dso_dlfcn.c:(.text+0x484): undefined reference to `dlsym'
dso_dlfcn.c:(.text+0x542): undefined reference to `dlerror'
./libcrypto.a(dso_dlfcn.o): In function `dlfcn_load':
dso_dlfcn.c:(.text+0x5a9): undefined reference to `dlopen'
dso_dlfcn.c:(.text+0x60d): undefined reference to `dlclose'
dso_dlfcn.c:(.text+0x645): undefined reference to `dlerror'
./libcrypto.a(dso_dlfcn.o): In function `dlfcn_pathbyaddr':
dso_dlfcn.c:(.text+0x6d1): undefined reference to `dladdr'
dso_dlfcn.c:(.text+0x731): undefined reference to `dlerror'
./libcrypto.a(dso_dlfcn.o): In function `dlfcn_unload':
dso_dlfcn.c:(.text+0x792): undefined reference to `dlclose'
collect2: error: ld returned 1 exit status
</code></pre><p>缺少ld引用.</p>
<p><strong>解决方案</strong>
修改go代码,还要额外链接ld的库.</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="err">#</span><span class="nx">cgo</span> <span class="nx">LDFLAGS</span><span class="p">:</span> <span class="o">-</span><span class="nx">L</span><span class="p">..</span><span class="o">/</span><span class="mi">2</span><span class="nx">nd</span><span class="o">/</span><span class="nx">crypto</span><span class="o">/</span><span class="nx">lib</span><span class="o">/</span><span class="nx">Linux_x86_64</span> <span class="o">-</span><span class="nx">L</span><span class="p">..</span><span class="o">/</span><span class="mi">3</span><span class="nx">rd</span><span class="o">/</span><span class="nx">openssl</span><span class="o">-</span><span class="nx">OpenSSL_1_0_2</span><span class="o">-</span><span class="nx">stable</span><span class="o">/</span><span class="nx">lib</span><span class="o">/</span><span class="nx">Linux_x86_64</span> <span class="o">-</span><span class="nx">lmism</span> <span class="o">-</span><span class="nx">lssl</span> <span class="o">-</span><span class="nx">lcrypto</span> <span class="o">-</span><span class="nx">lstdc</span><span class="o">++</span> <span class="o">-</span><span class="nx">ldl</span>
</code></pre></div><h3 id="类型映射错误">类型映射错误</h3>
<pre><code>$ go build aesecb.go 
# command-line-arguments
./aesecb.go:16:10: assignment mismatch: 3 variables but _Cfunc_MIGetSafeHandle returns 1 values
./aesecb.go:17:18: cannot use uintptr(0) (type uintptr) as type *_Ctype_char in argument to _Cfunc_MILoad
./aesecb.go:20:31: cannot use uintptr(unsafe.Pointer(&amp;iLen)) (type uintptr) as type *_Ctype_int in argument to _Cfunc_MIGetEncryptDataLen
./aesecb.go:20:63: cannot use uintptr(unsafe.Pointer(&amp;msg[0])) (type uintptr) as type *_Ctype_char in argument to _Cfunc_MIGetEncryptDataLen
./aesecb.go:20:97: cannot use uintptr(srcLen) (type uintptr) as type _Ctype_int in argument to _Cfunc_MIGetEncryptDataLen
./aesecb.go:22:26: cannot use uintptr(unsafe.Pointer(&amp;buf[0])) (type uintptr) as type *_Ctype_char in argument to _Cfunc_MITransEncrypt
./aesecb.go:22:60: cannot use uintptr(iLen) (type uintptr) as type _Ctype_int in argument to _Cfunc_MITransEncrypt
./aesecb.go:22:75: cannot use uintptr(unsafe.Pointer(&amp;msg[0])) (type uintptr) as type *_Ctype_char in argument to _Cfunc_MITransEncrypt
./aesecb.go:22:109: cannot use uintptr(srcLen) (type uintptr) as type _Ctype_int in argument to _Cfunc_MITransEncrypt
./aesecb.go:27:31: cannot use uintptr(unsafe.Pointer(&amp;iDLen)) (type uintptr) as type *_Ctype_int in argument to _Cfunc_MIGetDecryptDataLen
./aesecb.go:27:31: too many errors
</code></pre><p>基本上都是用错了类型,参考类型映射来修改.</p>
<table>
<thead>
<tr>
<th style="text-align:left">C类型</th>
<th style="text-align:left">调用方法</th>
<th style="text-align:left">Go类型</th>
<th style="text-align:left">字节数</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">char</td>
<td style="text-align:left">C.char</td>
<td style="text-align:left">byte</td>
<td style="text-align:left">1</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">signed char</td>
<td style="text-align:left">C.schar</td>
<td style="text-align:left">int8</td>
<td style="text-align:left">1</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">unsigned char</td>
<td style="text-align:left">C.uchar</td>
<td style="text-align:left">uint8</td>
<td style="text-align:left">1</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">short int</td>
<td style="text-align:left">C.short</td>
<td style="text-align:left">int16</td>
<td style="text-align:left">2</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">short unsigned int</td>
<td style="text-align:left">C.ushort</td>
<td style="text-align:left">uint16</td>
<td style="text-align:left">2</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">int</td>
<td style="text-align:left">C.int</td>
<td style="text-align:left">int</td>
<td style="text-align:left">4</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">unsigned int</td>
<td style="text-align:left">C.uint</td>
<td style="text-align:left">uint32</td>
<td style="text-align:left">4</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">long int</td>
<td style="text-align:left">C.long</td>
<td style="text-align:left">int32 or int64</td>
<td style="text-align:left">4</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">long unsigned int</td>
<td style="text-align:left">C.ulong</td>
<td style="text-align:left">uint32 or uint64</td>
<td style="text-align:left">4</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">long long int</td>
<td style="text-align:left">C.longlong</td>
<td style="text-align:left">int64</td>
<td style="text-align:left">8</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">long long unsigned int</td>
<td style="text-align:left">C.ulonglong</td>
<td style="text-align:left">uint64</td>
<td style="text-align:left">8</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">float</td>
<td style="text-align:left">C.float</td>
<td style="text-align:left">float32</td>
<td style="text-align:left">4</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">double</td>
<td style="text-align:left">C.double</td>
<td style="text-align:left">float64</td>
<td style="text-align:left">8</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">wchar_t</td>
<td style="text-align:left">C.wchar_t</td>
<td style="text-align:left"></td>
<td style="text-align:left">2</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">void *</td>
<td style="text-align:left">unsafe.Pointer</td>
<td style="text-align:left"></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>最后完整代码如下</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>                                     

<span class="cm">/*                                               
</span><span class="cm">#cgo CFLAGS: -I../2nd/crypto/include
</span><span class="cm">#cgo LDFLAGS: -L../2nd/crypto/lib/Linux_x86_64 -L../3rd/openssl-OpenSSL_1_0_2-stable/lib/Linux_x86_64 -lmism -lssl -lcrypto -lstdc++ -ldl                    
</span><span class="cm">#include &#34;ISafeInterface.h&#34;                      
</span><span class="cm">*/</span>                                               
<span class="kn">import</span> <span class="s">&#34;C&#34;</span>                                       
<span class="kn">import</span> <span class="p">(</span>                                         
    <span class="s">&#34;fmt&#34;</span>                                        
    <span class="s">&#34;unsafe&#34;</span>                                     
<span class="p">)</span>                                                

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>                                    
    <span class="nx">msg</span> <span class="o">:=</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&#34;I am test trans crypto!&#34;</span><span class="p">)</span>  
    <span class="nx">h</span> <span class="o">:=</span> <span class="nx">C</span><span class="p">.</span><span class="nf">MIGetSafeHandle</span><span class="p">()</span>                     
    <span class="nx">C</span><span class="p">.</span><span class="nf">MILoad</span><span class="p">(</span><span class="kc">nil</span><span class="p">,</span> <span class="nx">C</span><span class="p">.</span><span class="nb">int</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="nx">h</span><span class="p">)</span>                   
    <span class="kd">var</span> <span class="nx">iLen</span> <span class="kt">int32</span>                               
    <span class="kd">var</span> <span class="nx">srcLen</span> <span class="kt">int</span> <span class="p">=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">msg</span><span class="p">)</span>                    
    <span class="nx">C</span><span class="p">.</span><span class="nf">MIGetEncryptDataLen</span><span class="p">((</span><span class="o">*</span><span class="nx">C</span><span class="p">.</span><span class="kt">int</span><span class="p">)(</span><span class="o">&amp;</span><span class="nx">iLen</span><span class="p">),</span> <span class="p">(</span><span class="o">*</span><span class="nx">C</span><span class="p">.</span><span class="nx">char</span><span class="p">)(</span><span class="nx">unsafe</span><span class="p">.</span><span class="nf">Pointer</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">msg</span><span class="p">[</span><span class="mi">0</span><span class="p">])),</span> <span class="nx">C</span><span class="p">.</span><span class="nb">int</span><span class="p">(</span><span class="nx">srcLen</span><span class="p">),</span> <span class="nx">h</span><span class="p">)</span>
    <span class="nx">buf</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="mi">44</span><span class="p">)</span>                      
    <span class="nx">C</span><span class="p">.</span><span class="nf">MITransEncrypt</span><span class="p">((</span><span class="o">*</span><span class="nx">C</span><span class="p">.</span><span class="nx">char</span><span class="p">)(</span><span class="nx">unsafe</span><span class="p">.</span><span class="nf">Pointer</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">buf</span><span class="p">[</span><span class="mi">0</span><span class="p">])),</span> <span class="nx">C</span><span class="p">.</span><span class="nb">int</span><span class="p">(</span><span class="nx">iLen</span><span class="p">),</span> <span class="p">(</span><span class="o">*</span><span class="nx">C</span><span class="p">.</span><span class="nx">char</span><span class="p">)(</span><span class="nx">unsafe</span><span class="p">.</span><span class="nf">Pointer</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">msg</span><span class="p">[</span><span class="mi">0</span><span class="p">])),</span> <span class="nx">C</span><span class="p">.</span><span class="nb">int</span><span class="p">(</span><span class="nx">srcLen</span><span class="p">),</span> <span class="nx">h</span><span class="p">)</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">buf</span><span class="p">)</span>                             
                                                 
    <span class="nx">dstLen</span> <span class="o">:=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">buf</span><span class="p">)</span>                           
    <span class="kd">var</span> <span class="nx">iDLen</span> <span class="kt">int32</span>                              
    <span class="nx">C</span><span class="p">.</span><span class="nf">MIGetDecryptDataLen</span><span class="p">((</span><span class="o">*</span><span class="nx">C</span><span class="p">.</span><span class="kt">int</span><span class="p">)(</span><span class="o">&amp;</span><span class="nx">iDLen</span><span class="p">),</span> <span class="p">(</span><span class="o">*</span><span class="nx">C</span><span class="p">.</span><span class="nx">char</span><span class="p">)(</span><span class="nx">unsafe</span><span class="p">.</span><span class="nf">Pointer</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">buf</span><span class="p">[</span><span class="mi">0</span><span class="p">])),</span> <span class="nx">C</span><span class="p">.</span><span class="nb">int</span><span class="p">(</span><span class="nx">dstLen</span><span class="p">),</span> <span class="nx">h</span><span class="p">)</span>
                                                 
    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">iDLen</span><span class="p">)</span>                           
    <span class="nx">newSrc</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="nx">iDLen</span><span class="p">)</span>                
    <span class="nx">C</span><span class="p">.</span><span class="nf">MITransDecrypt</span><span class="p">((</span><span class="o">*</span><span class="nx">C</span><span class="p">.</span><span class="nx">char</span><span class="p">)(</span><span class="nx">unsafe</span><span class="p">.</span><span class="nf">Pointer</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">newSrc</span><span class="p">[</span><span class="mi">0</span><span class="p">])),</span> <span class="nx">C</span><span class="p">.</span><span class="nb">int</span><span class="p">(</span><span class="nx">iDLen</span><span class="p">),</span> <span class="p">(</span><span class="o">*</span><span class="nx">C</span><span class="p">.</span><span class="nx">char</span><span class="p">)(</span><span class="nx">unsafe</span><span class="p">.</span><span class="nf">Pointer</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">buf</span><span class="p">[</span><span class="mi">0</span><span class="p">])),</span> <span class="nx">C</span><span class="p">.</span><span class="nb">int</span><span class="p">(</span><span class="nx">dstLen</span><span class="p">),</span> <span class="nx">h</span><span class="p">)</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">newSrc</span><span class="p">))</span>                  
    <span class="nx">C</span><span class="p">.</span><span class="nf">MIFreeSafeHandle</span><span class="p">(</span><span class="nx">h</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div><h3 id="go-tool-cgo">go tool cgo</h3>
<p>调用该命令会在当前目录生成_obj文件夹,在里面文件可以看到类型转换的信息.<a href="https://wiki.jikexueyuan.com/project/go-command-tutorial/0.13.html">参考命令</a></p>
<pre><code># sky @ localhost in ~/go/path/src/aesecb/_obj [11:33:09] 
$ ll 
total 48
drwxr-xr-x 2 sky sky 4096 Sep 10 11:32 .
drwxr-xr-x 3 sky sky   92 Sep 10 11:32 ..
-rw-r--r-- 1 sky sky 6264 Sep 10 11:32 _cgo_.o
-rw-r--r-- 1 sky sky  605 Sep 10 11:32 _cgo_export.c
-rw-r--r-- 1 sky sky 1547 Sep 10 11:32 _cgo_export.h
-rw-r--r-- 1 sky sky   13 Sep 10 11:32 _cgo_flags
-rw-r--r-- 1 sky sky 5427 Sep 10 11:32 _cgo_gotypes.go
-rw-r--r-- 1 sky sky  416 Sep 10 11:32 _cgo_main.c
-rw-r--r-- 1 sky sky 2020 Sep 10 11:32 aesecb.cgo1.go
-rw-r--r-- 1 sky sky 5710 Sep 10 11:32 aesecb.cgo2.c
</code></pre>]]></content>
		</item>
		
	</channel>
</rss>
