<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>深白色9527</title>
    <link>https://shenbaise9527.com/</link>
    <description>Recent content on 深白色9527</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Thu, 10 Dec 2020 21:35:42 +0800</lastBuildDate><atom:link href="https://shenbaise9527.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Zipkin指南</title>
      <link>https://shenbaise9527.com/posts/zipkin%E6%8C%87%E5%8D%97/</link>
      <pubDate>Thu, 10 Dec 2020 21:35:42 +0800</pubDate>
      
      <guid>https://shenbaise9527.com/posts/zipkin%E6%8C%87%E5%8D%97/</guid>
      <description>快速启动 可以通过http://your_host:9411去访问zipkin UI. Docker docker run -d -p 9411:9411 openzipkin/zipkin Java 需要Java8或更高版本. curl -sSL https://zipkin.io/quickstart.sh | bash -s java -jar zipkin.jar Source</description>
    </item>
    
    <item>
      <title>OpenTracing最佳实践</title>
      <link>https://shenbaise9527.com/posts/opentracing%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Thu, 10 Dec 2020 21:35:32 +0800</pubDate>
      
      <guid>https://shenbaise9527.com/posts/opentracing%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</guid>
      <description>回顾: OpenTracing的目标是什么? OpenTracing是一个位于应用程序/库代码和追踪系统之间的一个标准中间层.结构如下: +-------------+ +---------+ +----------+ +------------+</description>
    </item>
    
    <item>
      <title>OpenTracing分布式链路追踪</title>
      <link>https://shenbaise9527.com/posts/opentracing%E5%88%86%E5%B8%83%E5%BC%8F%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/</link>
      <pubDate>Thu, 10 Dec 2020 21:35:19 +0800</pubDate>
      
      <guid>https://shenbaise9527.com/posts/opentracing%E5%88%86%E5%B8%83%E5%BC%8F%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/</guid>
      <description>概述 简介 虽然微服务是一种强大的系统架构,但也伴随着新的问题,就是当微服务数量众多且调用链条过长时,在复杂的网络环境下是很难调试和观察分布式事</description>
    </item>
    
    <item>
      <title>CMake语法说明</title>
      <link>https://shenbaise9527.com/posts/cmake%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/</link>
      <pubDate>Sat, 28 Nov 2020 20:06:39 +0800</pubDate>
      
      <guid>https://shenbaise9527.com/posts/cmake%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/</guid>
      <description>预定义变量 PROJECT_SOURCE_DIR 工程的根目录 PROJECT_BINARY_DIR 运行cmake命令的目录,通常是${PROJECT_SOURCE_DIR}/build CMAKE_INCLUDE_PATH 环境变量,非CMake变量</description>
    </item>
    
    <item>
      <title>makefile语法说明</title>
      <link>https://shenbaise9527.com/posts/makefile%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/</link>
      <pubDate>Sat, 28 Nov 2020 20:06:12 +0800</pubDate>
      
      <guid>https://shenbaise9527.com/posts/makefile%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/</guid>
      <description>CFLAGS 表示用于C编译器的选项. 指定头文件的路径. INCLUDES := -I./ INCLUDES += -I/usr/include INCLUDES += -I/usr/local/include INCLUDES += -I../../../3rd/curl-7.65.0/include INCLUDES += -I../../../3rd/mimetic-0.9.8/include CFLAGS := -m64 -std=c++11 -g -Wall -O3 $(INCLUDES) CXXFLAGS 表示用于C++编译器的选项,基本同CFLAGS LDFLAGS</description>
    </item>
    
    <item>
      <title>MySQL的orderby分析</title>
      <link>https://shenbaise9527.com/posts/mysql%E7%9A%84orderby%E5%88%86%E6%9E%90/</link>
      <pubDate>Tue, 24 Nov 2020 20:50:44 +0800</pubDate>
      
      <guid>https://shenbaise9527.com/posts/mysql%E7%9A%84orderby%E5%88%86%E6%9E%90/</guid>
      <description>数据准备 /*mysql版本*/ Server version: 5.7.27-log MySQL Community Server (GPL) /*创建表t*/ CREATE TABLE `t` ( `id` int(11) NOT NULL AUTO_INCREMENT, `city` varchar(16) NOT NULL, `name` varchar(16) NOT NULL, `age` int(11) NOT NULL, `addr` varchar(128) DEFAULT NULL, PRIMARY KEY (`id`), KEY `city` (`city`) ) ENGINE=InnoDB; /*数据分布*</description>
    </item>
    
    <item>
      <title>MySQL锁机制分析</title>
      <link>https://shenbaise9527.com/posts/mysql%E9%94%81%E6%9C%BA%E5%88%B6%E5%88%86%E6%9E%90/</link>
      <pubDate>Tue, 24 Nov 2020 20:50:10 +0800</pubDate>
      
      <guid>https://shenbaise9527.com/posts/mysql%E9%94%81%E6%9C%BA%E5%88%B6%E5%88%86%E6%9E%90/</guid>
      <description>全局锁 全局锁就是对整个数据库实例加锁.MySQL提供了命令Flush tables with read lock(FTWRL),可使整库处于只读状态,其它线程的数据更新语</description>
    </item>
    
    <item>
      <title>MySQL的join分析</title>
      <link>https://shenbaise9527.com/posts/mysql%E4%B9%8Bjoin/</link>
      <pubDate>Tue, 24 Nov 2020 20:47:44 +0800</pubDate>
      
      <guid>https://shenbaise9527.com/posts/mysql%E4%B9%8Bjoin/</guid>
      <description>问题 使用join时驱动表、被驱动表是如何选择的?影响因素有哪些? 如何优化? 数据准备 /*创建表*/ CREATE TABLE `t1` ( `id` int(11) NOT NULL, `a` int(11) DEFAULT NULL, `b` int(11) DEFAULT NULL, PRIMARY KEY (`id`), KEY `a` (`a`)</description>
    </item>
    
    <item>
      <title>MySQL索引(InnoDB引擎)</title>
      <link>https://shenbaise9527.com/posts/mysql%E4%B9%8Binnodb%E7%B4%A2%E5%BC%95/</link>
      <pubDate>Tue, 24 Nov 2020 20:43:33 +0800</pubDate>
      
      <guid>https://shenbaise9527.com/posts/mysql%E4%B9%8Binnodb%E7%B4%A2%E5%BC%95/</guid>
      <description>B+树 基于N叉树(每个父节点有N个子节点,子节点的值从左到右按照从小到大的顺序排列),非叶子节点只存储索引值,叶子节点储存索引值和数据,所有</description>
    </item>
    
    <item>
      <title>golang数据类型</title>
      <link>https://shenbaise9527.com/posts/golang%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Sun, 22 Nov 2020 11:41:27 +0800</pubDate>
      
      <guid>https://shenbaise9527.com/posts/golang%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>主要包含基本的内建类型(布尔类型、数值类型和字符串类型)和复合类型(array、slice、map、channel、function、str</description>
    </item>
    
  </channel>
</rss>
