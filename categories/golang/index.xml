<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Golang - 分类 - 深白色9527</title>
        <link>https://shenbaise9527.com/categories/golang/</link>
        <description>Golang - 分类 - 深白色9527</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>zhouyingan@gmail.com (深白色)</managingEditor>
            <webMaster>zhouyingan@gmail.com (深白色)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sun, 22 Nov 2020 11:41:27 &#43;0800</lastBuildDate><atom:link href="https://shenbaise9527.com/categories/golang/" rel="self" type="application/rss+xml" /><item>
    <title>golang数据类型</title>
    <link>https://shenbaise9527.com/golang-data-type/</link>
    <pubDate>Sun, 22 Nov 2020 11:41:27 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://shenbaise9527.com/golang-data-type/</guid>
    <description><![CDATA[主要包含基本的内建类型(布尔类型、数值类型和字符串类型)和复合类型(array、slice、map、channel、function、str]]></description>
</item><item>
    <title>gRPC系列之连接异常机制</title>
    <link>https://shenbaise9527.com/grpc-connection-exception/</link>
    <pubDate>Sat, 07 Nov 2020 13:27:24 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://shenbaise9527.com/grpc-connection-exception/</guid>
    <description><![CDATA[连接server端失败的处理 重试机制 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52]]></description>
</item><item>
    <title>gRPC系列之client和server的timetou机制</title>
    <link>https://shenbaise9527.com/grpc-client-server-timeout/</link>
    <pubDate>Sat, 07 Nov 2020 13:22:04 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://shenbaise9527.com/grpc-client-server-timeout/</guid>
    <description><![CDATA[客户端超时的处理 客户端在调用rpc接口时带timeout的context是如何传递给服务端的. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23]]></description>
</item><item>
    <title>gRPC系列之client端调用</title>
    <link>https://shenbaise9527.com/grpc-client-call/</link>
    <pubDate>Sat, 07 Nov 2020 13:16:47 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://shenbaise9527.com/grpc-client-call/</guid>
    <description><![CDATA[Dail/DailContext与服务端建立连接 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46]]></description>
</item><item>
    <title>gRPC系列之server端调用</title>
    <link>https://shenbaise9527.com/grpc-server-call/</link>
    <pubDate>Sat, 07 Nov 2020 11:47:48 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://shenbaise9527.com/grpc-server-call/</guid>
    <description><![CDATA[NewServer创建gRPC服务对象 主要是基于grpc-go的1.33.1版本Unary RPC来分析. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18]]></description>
</item><item>
    <title>gRPC系列之初识</title>
    <link>https://shenbaise9527.com/grpc-first-introduction/</link>
    <pubDate>Fri, 06 Nov 2020 22:05:51 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://shenbaise9527.com/grpc-first-introduction/</guid>
    <description><![CDATA[RPC RPC指远程过程调用(Remote Procedure Call),让远程服务调用更加简单、透明.服务调用者可以像调用本地接口一样调用远程的服务提供者,而不需]]></description>
</item><item>
    <title>go性能分析</title>
    <link>https://shenbaise9527.com/golang-pprof/</link>
    <pubDate>Tue, 03 Nov 2020 21:35:24 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://shenbaise9527.com/golang-pprof/</guid>
    <description><![CDATA[性能分析 Go语言项目中的性能分析主要有以下几个方面: CPU profile: CPU使用情况,按照一定频率去采集应用程序在CPU和寄存器上面的数据. Memory profile(Heap profile): 报告程序]]></description>
</item><item>
    <title>记录cgo调用C实现的加解密静态库中遇到的问题</title>
    <link>https://shenbaise9527.com/cgo/</link>
    <pubDate>Tue, 03 Nov 2020 21:35:24 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://shenbaise9527.com/cgo/</guid>
    <description><![CDATA[起因 公司有个公共的加解密库,供所有后端C++服务调用的,但最近要使用Go来实现个服务需要用到加解密,而Go并没有提供AES-256-ECB的]]></description>
</item></channel>
</rss>
